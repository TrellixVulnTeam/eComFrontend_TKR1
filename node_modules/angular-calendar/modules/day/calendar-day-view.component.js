import { Component, Input, Output, EventEmitter, ChangeDetectorRef, LOCALE_ID, Inject, TemplateRef } from '@angular/core';
import { Subject } from 'rxjs';
import addMinutes from 'date-fns/add_minutes/index';
import { CalendarDragHelper } from '../common/calendar-drag-helper.provider';
import { CalendarResizeHelper } from '../common/calendar-resize-helper.provider';
import { CalendarUtils } from '../common/calendar-utils.provider';
import { validateEvents, trackByEventId } from '../common/util';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../common/calendar-utils.provider';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from './calendar-all-day-event.component';
import * as ɵngcc4 from 'angular-resizable-element';
import * as ɵngcc5 from 'angular-draggable-droppable';
import * as ɵngcc6 from './calendar-day-view-event.component';
import * as ɵngcc7 from './calendar-day-view-hour-segment.component';

function CalendarDayViewComponent_mwl_calendar_all_day_event_2_Template(rf, ctx) { if (rf & 1) {
    var _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mwl-calendar-all-day-event", 7);
    ɵngcc0.ɵɵlistener("eventClicked", function CalendarDayViewComponent_mwl_calendar_all_day_event_2_Template_mwl_calendar_all_day_event_eventClicked_0_listener() { ɵngcc0.ɵɵrestoreView(_r6); var event_r4 = ctx.$implicit; var ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.eventClicked.emit({ event: event_r4 }); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var event_r4 = ctx.$implicit;
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("event", event_r4)("customTemplate", ctx_r1.allDayEventTemplate)("eventTitleTemplate", ctx_r1.eventTitleTemplate);
} }
var _c0 = function (a0, a1) { return { top: a0, bottom: a1 }; };
var _c1 = function (a1) { return { x: false, y: a1 }; };
var _c2 = function (a0) { return { y: a0 }; };
function CalendarDayViewComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    var _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 8, 9);
    ɵngcc0.ɵɵlistener("resizeStart", function CalendarDayViewComponent_div_5_Template_div_resizeStart_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); var dayEvent_r7 = ctx.$implicit; var ctx_r9 = ɵngcc0.ɵɵnextContext(); var _r0 = ɵngcc0.ɵɵreference(1); return ctx_r9.resizeStarted(dayEvent_r7, $event, _r0); })("resizing", function CalendarDayViewComponent_div_5_Template_div_resizing_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); var dayEvent_r7 = ctx.$implicit; var ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.resizing(dayEvent_r7, $event); })("resizeEnd", function CalendarDayViewComponent_div_5_Template_div_resizeEnd_0_listener() { ɵngcc0.ɵɵrestoreView(_r10); var dayEvent_r7 = ctx.$implicit; var ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.resizeEnded(dayEvent_r7); })("dragPointerDown", function CalendarDayViewComponent_div_5_Template_div_dragPointerDown_0_listener() { ɵngcc0.ɵɵrestoreView(_r10); var _r8 = ɵngcc0.ɵɵreference(1); var ctx_r13 = ɵngcc0.ɵɵnextContext(); var _r0 = ɵngcc0.ɵɵreference(1); return ctx_r13.dragStart(_r8, _r0); })("dragEnd", function CalendarDayViewComponent_div_5_Template_div_dragEnd_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); var dayEvent_r7 = ctx.$implicit; var ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14.eventDragged(dayEvent_r7, $event.y); });
    ɵngcc0.ɵɵelementStart(2, "mwl-calendar-day-view-event", 10);
    ɵngcc0.ɵɵlistener("eventClicked", function CalendarDayViewComponent_div_5_Template_mwl_calendar_day_view_event_eventClicked_2_listener() { ɵngcc0.ɵɵrestoreView(_r10); var dayEvent_r7 = ctx.$implicit; var ctx_r15 = ɵngcc0.ɵɵnextContext(); return ctx_r15.eventClicked.emit({ event: dayEvent_r7.event }); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var dayEvent_r7 = ctx.$implicit;
    var ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("margin-top", dayEvent_r7.top, "px")("height", dayEvent_r7.height, "px")("margin-left", dayEvent_r7.left + 70, "px")("width", dayEvent_r7.width - 1, "px");
    ɵngcc0.ɵɵclassProp("cal-draggable", dayEvent_r7.event.draggable)("cal-starts-within-day", !dayEvent_r7.startsBeforeDay)("cal-ends-within-day", !dayEvent_r7.endsAfterDay);
    ɵngcc0.ɵɵproperty("ngClass", dayEvent_r7.event.cssClass)("resizeEdges", ɵngcc0.ɵɵpureFunction2(27, _c0, dayEvent_r7.event == null ? null : dayEvent_r7.event.resizable == null ? null : dayEvent_r7.event.resizable.beforeStart, dayEvent_r7.event == null ? null : dayEvent_r7.event.resizable == null ? null : dayEvent_r7.event.resizable.afterEnd))("resizeSnapGrid", ɵngcc0.ɵɵpureFunction2(30, _c0, ctx_r2.eventSnapSize, ctx_r2.eventSnapSize))("validateResize", ctx_r2.validateResize)("dragAxis", ɵngcc0.ɵɵpureFunction1(33, _c1, dayEvent_r7.event.draggable && ctx_r2.currentResizes.size === 0))("dragSnapGrid", ɵngcc0.ɵɵpureFunction1(35, _c2, ctx_r2.eventSnapSize))("validateDrag", ctx_r2.validateDrag);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("dayEvent", dayEvent_r7)("tooltipPlacement", ctx_r2.tooltipPlacement)("tooltipTemplate", ctx_r2.tooltipTemplate)("tooltipAppendToBody", ctx_r2.tooltipAppendToBody)("customTemplate", ctx_r2.eventTemplate)("eventTitleTemplate", ctx_r2.eventTitleTemplate);
} }
function CalendarDayViewComponent_div_6_mwl_calendar_day_view_hour_segment_1_Template(rf, ctx) { if (rf & 1) {
    var _r20 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mwl-calendar-day-view-hour-segment", 13);
    ɵngcc0.ɵɵlistener("click", function CalendarDayViewComponent_div_6_mwl_calendar_day_view_hour_segment_1_Template_mwl_calendar_day_view_hour_segment_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r20); var segment_r18 = ctx.$implicit; var ctx_r19 = ɵngcc0.ɵɵnextContext(2); return ctx_r19.hourSegmentClicked.emit({ date: segment_r18.date }); })("dragEnter", function CalendarDayViewComponent_div_6_mwl_calendar_day_view_hour_segment_1_Template_mwl_calendar_day_view_hour_segment_dragEnter_0_listener() { var segment_r18 = ctx.$implicit; return segment_r18.dragOver = true; })("dragLeave", function CalendarDayViewComponent_div_6_mwl_calendar_day_view_hour_segment_1_Template_mwl_calendar_day_view_hour_segment_dragLeave_0_listener() { var segment_r18 = ctx.$implicit; return segment_r18.dragOver = false; })("drop", function CalendarDayViewComponent_div_6_mwl_calendar_day_view_hour_segment_1_Template_mwl_calendar_day_view_hour_segment_drop_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r20); var segment_r18 = ctx.$implicit; var ctx_r23 = ɵngcc0.ɵɵnextContext(2); segment_r18.dragOver = false; return ctx_r23.eventDropped($event, segment_r18); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var segment_r18 = ctx.$implicit;
    var ctx_r17 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵstyleProp("height", ctx_r17.hourSegmentHeight, "px");
    ɵngcc0.ɵɵclassProp("cal-drag-over", segment_r18.dragOver);
    ɵngcc0.ɵɵproperty("segment", segment_r18)("segmentHeight", ctx_r17.hourSegmentHeight)("locale", ctx_r17.locale)("customTemplate", ctx_r17.hourSegmentTemplate);
} }
function CalendarDayViewComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 11);
    ɵngcc0.ɵɵtemplate(1, CalendarDayViewComponent_div_6_mwl_calendar_day_view_hour_segment_1_Template, 1, 8, "mwl-calendar-day-view-hour-segment", 12);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var hour_r16 = ctx.$implicit;
    var ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("min-width", (ctx_r3.view == null ? null : ctx_r3.view.width) + 70, "px");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", hour_r16.segments)("ngForTrackBy", ctx_r3.trackByHourSegment);
} }
var MINUTES_IN_HOUR = 60;
/**
 * Shows all events on a given day. Example usage:
 *
 * ```typescript
 * <mwl-calendar-day-view
 *  [viewDate]="viewDate"
 *  [events]="events">
 * </mwl-calendar-day-view>
 * ```
 */
var CalendarDayViewComponent = /** @class */ (function () {
    /**
     * @hidden
     */
    function CalendarDayViewComponent(cdr, utils, locale) {
        this.cdr = cdr;
        this.utils = utils;
        /**
           * An array of events to display on view
           * The schema is available here: https://github.com/mattlewis92/calendar-utils/blob/c51689985f59a271940e30bc4e2c4e1fee3fcb5c/src/calendarUtils.ts#L49-L63
           */
        this.events = [];
        /**
           * The number of segments in an hour. Must be <= 6
           */
        this.hourSegments = 2;
        /**
           * The height in pixels of each hour segment
           */
        this.hourSegmentHeight = 30;
        /**
           * The day start hours in 24 hour time. Must be 0-23
           */
        this.dayStartHour = 0;
        /**
           * The day start minutes. Must be 0-59
           */
        this.dayStartMinute = 0;
        /**
           * The day end hours in 24 hour time. Must be 0-23
           */
        this.dayEndHour = 23;
        /**
           * The day end minutes. Must be 0-59
           */
        this.dayEndMinute = 59;
        /**
           * The width in pixels of each event on the view
           */
        this.eventWidth = 150;
        /**
           * The grid size to snap resizing and dragging of events to
           */
        this.eventSnapSize = this.hourSegmentHeight;
        /**
           * The placement of the event tooltip
           */
        this.tooltipPlacement = 'top';
        /**
           * Whether to append tooltips to the body or next to the trigger element
           */
        this.tooltipAppendToBody = true;
        /**
           * Called when an event title is clicked
           */
        this.eventClicked = new EventEmitter();
        /**
           * Called when an hour segment is clicked
           */
        this.hourSegmentClicked = new EventEmitter();
        /**
           * Called when an event is resized or dragged and dropped
           */
        this.eventTimesChanged = new EventEmitter();
        /**
           * An output that will be called before the view is rendered for the current day.
           * If you add the `cssClass` property to an hour grid segment it will add that class to the hour segment in the template
           */
        this.beforeViewRender = new EventEmitter();
        /**
           * @hidden
           */
        this.hours = [];
        /**
           * @hidden
           */
        this.width = 0;
        /**
           * @hidden
           */
        this.currentResizes = new Map();
        /**
           * @hidden
           */
        this.trackByEventId = trackByEventId;
        /**
           * @hidden
           */
        this.trackByDayEvent = function (index, dayEvent) {
            return dayEvent.event.id ? dayEvent.event.id : dayEvent.event;
        };
        /**
           * @hidden
           */
        this.trackByHour = function (index, hour) {
            return hour.segments[0].date.toISOString();
        };
        /**
           * @hidden
           */
        this.trackByHourSegment = function (index, segment) {
            return segment.date.toISOString();
        };
        this.locale = locale;
    }
    /**
     * @hidden
     */
    /**
       * @hidden
       */
    CalendarDayViewComponent.prototype.ngOnInit = /**
       * @hidden
       */
    function () {
        var _this = this;
        if (this.refresh) {
            this.refreshSubscription = this.refresh.subscribe(function () {
                _this.refreshAll();
                _this.cdr.markForCheck();
            });
        }
    };
    /**
     * @hidden
     */
    /**
       * @hidden
       */
    CalendarDayViewComponent.prototype.ngOnDestroy = /**
       * @hidden
       */
    function () {
        if (this.refreshSubscription) {
            this.refreshSubscription.unsubscribe();
        }
    };
    /**
     * @hidden
     */
    /**
       * @hidden
       */
    CalendarDayViewComponent.prototype.ngOnChanges = /**
       * @hidden
       */
    function (changes) {
        if (changes.viewDate ||
            changes.dayStartHour ||
            changes.dayStartMinute ||
            changes.dayEndHour ||
            changes.dayEndMinute ||
            changes.hourSegments) {
            this.refreshHourGrid();
        }
        if (changes.events) {
            validateEvents(this.events);
        }
        if (changes.viewDate ||
            changes.events ||
            changes.dayStartHour ||
            changes.dayStartMinute ||
            changes.dayEndHour ||
            changes.dayEndMinute ||
            changes.eventWidth) {
            this.refreshView();
        }
    };
    CalendarDayViewComponent.prototype.eventDropped = function (dropEvent, segment) {
        if (dropEvent.dropData && dropEvent.dropData.event) {
            this.eventTimesChanged.emit({
                event: dropEvent.dropData.event,
                newStart: segment.date
            });
        }
    };
    CalendarDayViewComponent.prototype.resizeStarted = function (event, resizeEvent, dayViewContainer) {
        this.currentResizes.set(event, {
            originalTop: event.top,
            originalHeight: event.height,
            edge: typeof resizeEvent.edges.top !== 'undefined' ? 'top' : 'bottom'
        });
        var resizeHelper = new CalendarResizeHelper(dayViewContainer);
        this.validateResize = function (_a) {
            var rectangle = _a.rectangle;
            return resizeHelper.validateResize({ rectangle: rectangle });
        };
        this.cdr.markForCheck();
    };
    CalendarDayViewComponent.prototype.resizing = function (event, resizeEvent) {
        var currentResize = this.currentResizes.get(event);
        if (resizeEvent.edges.top) {
            event.top = currentResize.originalTop + +resizeEvent.edges.top;
            event.height = currentResize.originalHeight - +resizeEvent.edges.top;
        }
        else if (resizeEvent.edges.bottom) {
            event.height = currentResize.originalHeight + +resizeEvent.edges.bottom;
        }
    };
    CalendarDayViewComponent.prototype.resizeEnded = function (dayEvent) {
        var currentResize = this.currentResizes.get(dayEvent);
        var pixelsMoved;
        if (currentResize.edge === 'top') {
            pixelsMoved = dayEvent.top - currentResize.originalTop;
        }
        else {
            pixelsMoved = dayEvent.height - currentResize.originalHeight;
        }
        dayEvent.top = currentResize.originalTop;
        dayEvent.height = currentResize.originalHeight;
        var pixelAmountInMinutes = MINUTES_IN_HOUR / (this.hourSegments * this.hourSegmentHeight);
        var minutesMoved = pixelsMoved * pixelAmountInMinutes;
        var newStart = dayEvent.event.start;
        var newEnd = dayEvent.event.end;
        if (currentResize.edge === 'top') {
            newStart = addMinutes(newStart, minutesMoved);
        }
        else if (newEnd) {
            newEnd = addMinutes(newEnd, minutesMoved);
        }
        this.eventTimesChanged.emit({ newStart: newStart, newEnd: newEnd, event: dayEvent.event });
        this.currentResizes.delete(dayEvent);
    };
    CalendarDayViewComponent.prototype.dragStart = function (event, dayViewContainer) {
        var _this = this;
        var dragHelper = new CalendarDragHelper(dayViewContainer, event);
        this.validateDrag = function (_a) {
            var x = _a.x, y = _a.y;
            return _this.currentResizes.size === 0 && dragHelper.validateDrag({ x: x, y: y });
        };
        this.cdr.markForCheck();
    };
    CalendarDayViewComponent.prototype.eventDragged = function (dayEvent, draggedInPixels) {
        var pixelAmountInMinutes = MINUTES_IN_HOUR / (this.hourSegments * this.hourSegmentHeight);
        var minutesMoved = draggedInPixels * pixelAmountInMinutes;
        var newStart = addMinutes(dayEvent.event.start, minutesMoved);
        var newEnd;
        if (dayEvent.event.end) {
            newEnd = addMinutes(dayEvent.event.end, minutesMoved);
        }
        this.eventTimesChanged.emit({ newStart: newStart, newEnd: newEnd, event: dayEvent.event });
    };
    CalendarDayViewComponent.prototype.refreshHourGrid = function () {
        this.hours = this.utils.getDayViewHourGrid({
            viewDate: this.viewDate,
            hourSegments: this.hourSegments,
            dayStart: {
                hour: this.dayStartHour,
                minute: this.dayStartMinute
            },
            dayEnd: {
                hour: this.dayEndHour,
                minute: this.dayEndMinute
            }
        });
        this.emitBeforeViewRender();
    };
    CalendarDayViewComponent.prototype.refreshView = function () {
        this.view = this.utils.getDayView({
            events: this.events,
            viewDate: this.viewDate,
            hourSegments: this.hourSegments,
            dayStart: {
                hour: this.dayStartHour,
                minute: this.dayStartMinute
            },
            dayEnd: {
                hour: this.dayEndHour,
                minute: this.dayEndMinute
            },
            eventWidth: this.eventWidth,
            segmentHeight: this.hourSegmentHeight
        });
        this.emitBeforeViewRender();
    };
    CalendarDayViewComponent.prototype.refreshAll = function () {
        this.refreshHourGrid();
        this.refreshView();
    };
    CalendarDayViewComponent.prototype.emitBeforeViewRender = function () {
        if (this.hours && this.view) {
            this.beforeViewRender.emit({
                body: {
                    hourGrid: this.hours
                },
                period: this.view.period
            });
        }
    };
    /** @nocollapse */
    CalendarDayViewComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef, },
        { type: CalendarUtils, },
        { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] },] },
    ]; };
    CalendarDayViewComponent.propDecorators = {
        "viewDate": [{ type: Input },],
        "events": [{ type: Input },],
        "hourSegments": [{ type: Input },],
        "hourSegmentHeight": [{ type: Input },],
        "dayStartHour": [{ type: Input },],
        "dayStartMinute": [{ type: Input },],
        "dayEndHour": [{ type: Input },],
        "dayEndMinute": [{ type: Input },],
        "eventWidth": [{ type: Input },],
        "refresh": [{ type: Input },],
        "locale": [{ type: Input },],
        "eventSnapSize": [{ type: Input },],
        "tooltipPlacement": [{ type: Input },],
        "tooltipTemplate": [{ type: Input },],
        "tooltipAppendToBody": [{ type: Input },],
        "hourSegmentTemplate": [{ type: Input },],
        "allDayEventTemplate": [{ type: Input },],
        "eventTemplate": [{ type: Input },],
        "eventTitleTemplate": [{ type: Input },],
        "eventClicked": [{ type: Output },],
        "hourSegmentClicked": [{ type: Output },],
        "eventTimesChanged": [{ type: Output },],
        "beforeViewRender": [{ type: Output },],
    };
CalendarDayViewComponent.ɵfac = function CalendarDayViewComponent_Factory(t) { return new (t || CalendarDayViewComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CalendarUtils), ɵngcc0.ɵɵdirectiveInject(LOCALE_ID)); };
CalendarDayViewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CalendarDayViewComponent, selectors: [["mwl-calendar-day-view"]], inputs: { events: "events", hourSegments: "hourSegments", hourSegmentHeight: "hourSegmentHeight", dayStartHour: "dayStartHour", dayStartMinute: "dayStartMinute", dayEndHour: "dayEndHour", dayEndMinute: "dayEndMinute", eventWidth: "eventWidth", eventSnapSize: "eventSnapSize", tooltipPlacement: "tooltipPlacement", tooltipAppendToBody: "tooltipAppendToBody", locale: "locale", viewDate: "viewDate", refresh: "refresh", tooltipTemplate: "tooltipTemplate", hourSegmentTemplate: "hourSegmentTemplate", allDayEventTemplate: "allDayEventTemplate", eventTemplate: "eventTemplate", eventTitleTemplate: "eventTitleTemplate" }, outputs: { eventClicked: "eventClicked", hourSegmentClicked: "hourSegmentClicked", eventTimesChanged: "eventTimesChanged", beforeViewRender: "beforeViewRender" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 7, vars: 6, consts: [[1, "cal-day-view"], ["dayViewContainer", ""], [3, "event", "customTemplate", "eventTitleTemplate", "eventClicked", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "cal-hour-rows"], [1, "cal-events"], ["class", "cal-event-container", "mwlResizable", "", "mwlDraggable", "", 3, "cal-draggable", "cal-starts-within-day", "cal-ends-within-day", "ngClass", "resizeEdges", "resizeSnapGrid", "validateResize", "dragAxis", "dragSnapGrid", "validateDrag", "marginTop", "height", "marginLeft", "width", "resizeStart", "resizing", "resizeEnd", "dragPointerDown", "dragEnd", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "cal-hour", 3, "minWidth", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "event", "customTemplate", "eventTitleTemplate", "eventClicked"], ["mwlResizable", "", "mwlDraggable", "", 1, "cal-event-container", 3, "ngClass", "resizeEdges", "resizeSnapGrid", "validateResize", "dragAxis", "dragSnapGrid", "validateDrag", "resizeStart", "resizing", "resizeEnd", "dragPointerDown", "dragEnd"], ["event", ""], [3, "dayEvent", "tooltipPlacement", "tooltipTemplate", "tooltipAppendToBody", "customTemplate", "eventTitleTemplate", "eventClicked"], [1, "cal-hour"], ["mwlDroppable", "", 3, "height", "segment", "segmentHeight", "locale", "customTemplate", "cal-drag-over", "click", "dragEnter", "dragLeave", "drop", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["mwlDroppable", "", 3, "segment", "segmentHeight", "locale", "customTemplate", "click", "dragEnter", "dragLeave", "drop"]], template: function CalendarDayViewComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0, 1);
        ɵngcc0.ɵɵtemplate(2, CalendarDayViewComponent_mwl_calendar_all_day_event_2_Template, 1, 3, "mwl-calendar-all-day-event", 2);
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵelementStart(4, "div", 4);
        ɵngcc0.ɵɵtemplate(5, CalendarDayViewComponent_div_5_Template, 3, 37, "div", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(6, CalendarDayViewComponent_div_6_Template, 2, 4, "div", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.view.allDayEvents)("ngForTrackBy", ctx.trackByEventId);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.view == null ? null : ctx.view.events)("ngForTrackBy", ctx.trackByDayEvent);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.hours)("ngForTrackBy", ctx.trackByHour);
    } }, directives: [ɵngcc2.NgForOf, ɵngcc3.CalendarAllDayEventComponent, ɵngcc4.ResizableDirective, ɵngcc5.ɵa, ɵngcc2.NgClass, ɵngcc6.CalendarDayViewEventComponent, ɵngcc7.CalendarDayViewHourSegmentComponent, ɵngcc5.ɵb], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CalendarDayViewComponent, [{
        type: Component,
        args: [{
                selector: 'mwl-calendar-day-view',
                template: "\n    <div class=\"cal-day-view\" #dayViewContainer>\n      <mwl-calendar-all-day-event\n        *ngFor=\"let event of view.allDayEvents; trackBy:trackByEventId\"\n        [event]=\"event\"\n        [customTemplate]=\"allDayEventTemplate\"\n        [eventTitleTemplate]=\"eventTitleTemplate\"\n        (eventClicked)=\"eventClicked.emit({event: event})\">\n      </mwl-calendar-all-day-event>\n      <div class=\"cal-hour-rows\">\n        <div class=\"cal-events\">\n          <div\n            #event\n            *ngFor=\"let dayEvent of view?.events; trackBy:trackByDayEvent\"\n            class=\"cal-event-container\"\n            [class.cal-draggable]=\"dayEvent.event.draggable\"\n            [class.cal-starts-within-day]=\"!dayEvent.startsBeforeDay\"\n            [class.cal-ends-within-day]=\"!dayEvent.endsAfterDay\"\n            [ngClass]=\"dayEvent.event.cssClass\"\n            mwlResizable\n            [resizeEdges]=\"{top: dayEvent.event?.resizable?.beforeStart, bottom: dayEvent.event?.resizable?.afterEnd}\"\n            [resizeSnapGrid]=\"{top: eventSnapSize, bottom: eventSnapSize}\"\n            [validateResize]=\"validateResize\"\n            (resizeStart)=\"resizeStarted(dayEvent, $event, dayViewContainer)\"\n            (resizing)=\"resizing(dayEvent, $event)\"\n            (resizeEnd)=\"resizeEnded(dayEvent)\"\n            mwlDraggable\n            [dragAxis]=\"{x: false, y: dayEvent.event.draggable && currentResizes.size === 0}\"\n            [dragSnapGrid]=\"{y: eventSnapSize}\"\n            [validateDrag]=\"validateDrag\"\n            (dragPointerDown)=\"dragStart(event, dayViewContainer)\"\n            (dragEnd)=\"eventDragged(dayEvent, $event.y)\"\n            [style.marginTop.px]=\"dayEvent.top\"\n            [style.height.px]=\"dayEvent.height\"\n            [style.marginLeft.px]=\"dayEvent.left + 70\"\n            [style.width.px]=\"dayEvent.width - 1\">\n            <mwl-calendar-day-view-event\n              [dayEvent]=\"dayEvent\"\n              [tooltipPlacement]=\"tooltipPlacement\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [tooltipAppendToBody]=\"tooltipAppendToBody\"\n              [customTemplate]=\"eventTemplate\"\n              [eventTitleTemplate]=\"eventTitleTemplate\"\n              (eventClicked)=\"eventClicked.emit({event: dayEvent.event})\">\n            </mwl-calendar-day-view-event>\n          </div>\n        </div>\n        <div class=\"cal-hour\" *ngFor=\"let hour of hours; trackBy:trackByHour\" [style.minWidth.px]=\"view?.width + 70\">\n          <mwl-calendar-day-view-hour-segment\n            *ngFor=\"let segment of hour.segments; trackBy:trackByHourSegment\"\n            [style.height.px]=\"hourSegmentHeight\"\n            [segment]=\"segment\"\n            [segmentHeight]=\"hourSegmentHeight\"\n            [locale]=\"locale\"\n            [customTemplate]=\"hourSegmentTemplate\"\n            (click)=\"hourSegmentClicked.emit({date: segment.date})\"\n            [class.cal-drag-over]=\"segment.dragOver\"\n            mwlDroppable\n            (dragEnter)=\"segment.dragOver = true\"\n            (dragLeave)=\"segment.dragOver = false\"\n            (drop)=\"segment.dragOver = false; eventDropped($event, segment)\">\n          </mwl-calendar-day-view-hour-segment>\n        </div>\n      </div>\n    </div>\n  "
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.CalendarUtils }, { type: undefined, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }]; }, { events: [{
            type: Input
        }], hourSegments: [{
            type: Input
        }], hourSegmentHeight: [{
            type: Input
        }], dayStartHour: [{
            type: Input
        }], dayStartMinute: [{
            type: Input
        }], dayEndHour: [{
            type: Input
        }], dayEndMinute: [{
            type: Input
        }], eventWidth: [{
            type: Input
        }], eventSnapSize: [{
            type: Input
        }], tooltipPlacement: [{
            type: Input
        }], tooltipAppendToBody: [{
            type: Input
        }], eventClicked: [{
            type: Output
        }], hourSegmentClicked: [{
            type: Output
        }], eventTimesChanged: [{
            type: Output
        }], beforeViewRender: [{
            type: Output
        }], locale: [{
            type: Input
        }], viewDate: [{
            type: Input
        }], refresh: [{
            type: Input
        }], tooltipTemplate: [{
            type: Input
        }], hourSegmentTemplate: [{
            type: Input
        }], allDayEventTemplate: [{
            type: Input
        }], eventTemplate: [{
            type: Input
        }], eventTitleTemplate: [{
            type: Input
        }] }); })();
    return CalendarDayViewComponent;
}());
export { CalendarDayViewComponent };

//# sourceMappingURL=calendar-day-view.component.js.map