import { Directive, Input, HostListener, HostBinding, ChangeDetectorRef, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import * as ɵngcc0 from '@angular/core';
export class ScrollSpyLinkDirective {
    constructor(cdRef, document) {
        this.cdRef = cdRef;
        this.document = document;
        this._scrollIntoView = true;
        this.active = false;
    }
    get scrollIntoView() { return this._scrollIntoView; }
    set scrollIntoView(value) {
        this._scrollIntoView = value;
    }
    get section() { return this._section; }
    set section(value) {
        if (value) {
            this._section = value;
        }
    }
    get id() {
        return this._id;
    }
    set id(newId) {
        if (newId) {
            this._id = newId;
        }
    }
    onClick() {
        if (this.section && this.scrollIntoView === true) {
            this.section.scrollIntoView();
        }
    }
    detectChanges() {
        this.cdRef.detectChanges();
    }
    assignSectionToId() {
        this.section = this.document.documentElement.querySelector(`#${this.id}`);
    }
    ngOnInit() {
        this.assignSectionToId();
    }
}
ScrollSpyLinkDirective.ɵfac = function ScrollSpyLinkDirective_Factory(t) { return new (t || ScrollSpyLinkDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };
ScrollSpyLinkDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ScrollSpyLinkDirective, selectors: [["", "mdbScrollSpyLink", ""]], hostVars: 2, hostBindings: function ScrollSpyLinkDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ScrollSpyLinkDirective_click_HostBindingHandler() { return ctx.onClick(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("active", ctx.active);
    } }, inputs: { scrollIntoView: "scrollIntoView", id: ["mdbScrollSpyLink", "id"] } });
ScrollSpyLinkDirective.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
ScrollSpyLinkDirective.propDecorators = {
    scrollIntoView: [{ type: Input }],
    id: [{ type: Input, args: ['mdbScrollSpyLink',] }],
    active: [{ type: HostBinding, args: ['class.active',] }],
    onClick: [{ type: HostListener, args: ['click', [],] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollSpyLinkDirective, [{
        type: Directive,
        args: [{
                selector: '[mdbScrollSpyLink]'
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, { active: [{
            type: HostBinding,
            args: ['class.active']
        }], scrollIntoView: [{
            type: Input
        }], id: [{
            type: Input,
            args: ['mdbScrollSpyLink']
        }], onClick: [{
            type: HostListener,
            args: ['click', []]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLXNweS1saW5rLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctdWlraXQtcHJvLXN0YW5kYXJkL3NyYy9saWIvcHJvL3Njcm9sbC1zcHkvc2Nyb2xsLXNweS1saW5rLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUVULEtBQUssRUFDTCxZQUFZLEVBQ1osV0FBVyxFQUNYLGlCQUFpQixFQUNqQixNQUFNLEVBQ1AsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDOztBQUszQyxNQUFNLE9BQU8sc0JBQXNCO0FBQUcsSUFpQnBDLFlBQ1UsS0FBd0IsRUFDTixRQUFhO0FBQ3hDLFFBRlMsVUFBSyxHQUFMLEtBQUssQ0FBbUI7QUFBQyxRQUNQLGFBQVEsR0FBUixRQUFRLENBQUs7QUFDM0MsUUFkVSxvQkFBZSxHQUFHLElBQUksQ0FBQztBQUNqQyxRQTBCRSxXQUFNLEdBQUcsS0FBSyxDQUFDO0FBQ2pCLElBZEssQ0FBQztBQUNOLElBcEJFLElBQ0ksY0FBYyxLQUFLLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7QUFDdkQsSUFBRSxJQUFJLGNBQWMsQ0FBQyxLQUFjO0FBQ25DLFFBQUksSUFBSSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUM7QUFDakMsSUFBRSxDQUFDO0FBQ0gsSUFFRSxJQUFJLE9BQU8sS0FBSyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQ3pDLElBQUUsSUFBSSxPQUFPLENBQUMsS0FBa0I7QUFDaEMsUUFBSSxJQUFJLEtBQUssRUFBRTtBQUNmLFlBQU0sSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7QUFDNUIsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNILElBUUUsSUFDSSxFQUFFO0FBQUssUUFDVCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUM7QUFDcEIsSUFBRSxDQUFDO0FBQ0gsSUFBRSxJQUFJLEVBQUUsQ0FBQyxLQUFhO0FBQ3RCLFFBQUksSUFBSSxLQUFLLEVBQUU7QUFDZixZQUFNLElBQUksQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDO0FBQ3ZCLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxJQUtFLE9BQU87QUFDVCxRQUFJLElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsY0FBYyxLQUFLLElBQUksRUFBRTtBQUN0RCxZQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDcEMsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNILElBQ0UsYUFBYTtBQUNmLFFBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsQ0FBQztBQUMvQixJQUFFLENBQUM7QUFDSCxJQUNFLGlCQUFpQjtBQUNuQixRQUFJLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLElBQUksSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDOUUsSUFBRSxDQUFDO0FBQ0gsSUFDRSxRQUFRO0FBQ1YsUUFBSSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztBQUM3QixJQUFFLENBQUM7QUFDSDtrREF4REMsU0FBUyxTQUFDLGtCQUNULFFBQVEsRUFBRSxvQkFBb0IsY0FDL0I7Ozs7O3lGQUNJO0FBQUM7QUFBZ0QsWUFScEQsaUJBQWlCO0FBQ2pCLDRDQTBCRyxNQUFNLFNBQUMsUUFBUTtBQUFRO0FBQUc7QUFHViw2QkFyQmxCLEtBQUs7QUFDTixpQkFvQkMsS0FBSyxTQUFDLGtCQUFrQjtBQUN0QixxQkFTRixXQUFXLFNBQUMsY0FBYztBQUN4QixzQkFFRixZQUFZLFNBQUMsT0FBTyxFQUFFLEVBQUU7QUFDdkI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIE9uSW5pdCxcbiAgSW5wdXQsXG4gIEhvc3RMaXN0ZW5lcixcbiAgSG9zdEJpbmRpbmcsXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBJbmplY3Rcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1ttZGJTY3JvbGxTcHlMaW5rXSdcbn0pXG5leHBvcnQgY2xhc3MgU2Nyb2xsU3B5TGlua0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBJbnB1dCgpXG4gIGdldCBzY3JvbGxJbnRvVmlldygpIHsgcmV0dXJuIHRoaXMuX3Njcm9sbEludG9WaWV3OyB9XG4gIHNldCBzY3JvbGxJbnRvVmlldyh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX3Njcm9sbEludG9WaWV3ID0gdmFsdWU7XG4gIH1cbiAgcHJpdmF0ZSBfc2Nyb2xsSW50b1ZpZXcgPSB0cnVlO1xuXG4gIGdldCBzZWN0aW9uKCkgeyByZXR1cm4gdGhpcy5fc2VjdGlvbjsgfVxuICBzZXQgc2VjdGlvbih2YWx1ZTogSFRNTEVsZW1lbnQpIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHRoaXMuX3NlY3Rpb24gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcHJpdmF0ZSBfc2VjdGlvbjogSFRNTEVsZW1lbnQ7XG4gIHByaXZhdGUgX2lkOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBjZFJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBkb2N1bWVudDogYW55XG4gICkge31cblxuICBASW5wdXQoJ21kYlNjcm9sbFNweUxpbmsnKVxuICBnZXQgaWQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5faWQ7XG4gIH1cbiAgc2V0IGlkKG5ld0lkOiBzdHJpbmcpIHtcbiAgICBpZiAobmV3SWQpIHtcbiAgICAgIHRoaXMuX2lkID0gbmV3SWQ7XG4gICAgfVxuICB9XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hY3RpdmUnKVxuICBhY3RpdmUgPSBmYWxzZTtcblxuICBASG9zdExpc3RlbmVyKCdjbGljaycsIFtdKVxuICBvbkNsaWNrKCkge1xuICAgIGlmICh0aGlzLnNlY3Rpb24gJiYgdGhpcy5zY3JvbGxJbnRvVmlldyA9PT0gdHJ1ZSkge1xuICAgICAgdGhpcy5zZWN0aW9uLnNjcm9sbEludG9WaWV3KCk7XG4gICAgfVxuICB9XG5cbiAgZGV0ZWN0Q2hhbmdlcygpIHtcbiAgICB0aGlzLmNkUmVmLmRldGVjdENoYW5nZXMoKTtcbiAgfVxuXG4gIGFzc2lnblNlY3Rpb25Ub0lkKCkge1xuICAgIHRoaXMuc2VjdGlvbiA9IHRoaXMuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke3RoaXMuaWR9YCk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmFzc2lnblNlY3Rpb25Ub0lkKCk7XG4gIH1cbn1cbiJdfQ==