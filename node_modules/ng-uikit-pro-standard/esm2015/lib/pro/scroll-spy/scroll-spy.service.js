import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export class ScrollSpyService {
    constructor() {
        this.scrollSpys = [];
        this.activeSubject = new Subject();
        this.active$ = this.activeSubject;
    }
    addScrollSpy(scrollSpy) {
        this.scrollSpys.push(scrollSpy);
    }
    removeScrollSpy(scrollSpyId) {
        const scrollSpyIndex = this.scrollSpys.findIndex((spy) => {
            return spy.id === scrollSpyId;
        });
        this.scrollSpys.splice(scrollSpyIndex, 1);
    }
    updateActiveState(scrollSpyId, activeLinkId) {
        const scrollSpy = this.scrollSpys.find(spy => {
            return spy.id === scrollSpyId;
        });
        if (!scrollSpy) {
            return;
        }
        const activeLink = scrollSpy.links.find(link => {
            return link.id === activeLinkId;
        });
        this.setActiveLink(activeLink);
    }
    removeActiveState(scrollSpyId, activeLinkId) {
        const scrollSpy = this.scrollSpys.find(spy => {
            return spy.id === scrollSpyId;
        });
        if (!scrollSpy) {
            return;
        }
        const activeLink = scrollSpy.links.find(link => {
            return link.id === activeLinkId;
        });
        if (!activeLink) {
            return;
        }
        activeLink.active = false;
        activeLink.detectChanges();
    }
    setActiveLink(activeLink) {
        if (activeLink) {
            activeLink.active = true;
            activeLink.detectChanges();
            this.activeSubject.next(activeLink);
        }
    }
    removeActiveLinks(scrollSpyId) {
        const scrollSpy = this.scrollSpys.find(spy => {
            return spy.id === scrollSpyId;
        });
        if (!scrollSpy) {
            return;
        }
        scrollSpy.links.forEach(link => {
            link.active = false;
            link.detectChanges();
        });
    }
}
ScrollSpyService.ɵfac = function ScrollSpyService_Factory(t) { return new (t || ScrollSpyService)(); };
ScrollSpyService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ScrollSpyService, factory: ScrollSpyService.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollSpyService, [{
        type: Injectable
    }], function () { return []; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLXNweS5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy11aWtpdC1wcm8tc3RhbmRhcmQvc3JjL2xpYi9wcm8vc2Nyb2xsLXNweS9zY3JvbGwtc3B5LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUV0RCxPQUFPLEVBQUUsT0FBTyxFQUFjLE1BQU0sTUFBTSxDQUFDOztBQVEzQyxNQUFNLE9BQU8sZ0JBQWdCO0FBQzdCLElBRkE7QUFDRSxRQUNRLGVBQVUsR0FBZ0IsRUFBRSxDQUFDO0FBQ3ZDLFFBQ1Usa0JBQWEsR0FBRyxJQUFJLE9BQU8sRUFBMEIsQ0FBQztBQUNoRSxRQUFFLFlBQU8sR0FBb0IsSUFBSSxDQUFDLGFBQWEsQ0FBQztBQUNoRCxJQXVFQSxDQUFDO0FBQ0QsSUF2RUUsWUFBWSxDQUFDLFNBQW9CO0FBQ25DLFFBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDcEMsSUFBRSxDQUFDO0FBQ0gsSUFDRSxlQUFlLENBQUMsV0FBbUI7QUFDckMsUUFBSSxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBRSxDQUFDLEdBQUcsRUFBRSxFQUFFO0FBQzlELFlBQU0sT0FBTyxHQUFHLENBQUMsRUFBRSxLQUFLLFdBQVcsQ0FBQztBQUNwQyxRQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ1AsUUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDOUMsSUFBRSxDQUFDO0FBQ0gsSUFDRSxpQkFBaUIsQ0FBQyxXQUFtQixFQUFFLFlBQW9CO0FBQzdELFFBQUksTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7QUFDakQsWUFBTSxPQUFPLEdBQUcsQ0FBQyxFQUFFLEtBQUssV0FBVyxDQUFDO0FBQ3BDLFFBQUksQ0FBQyxDQUFDLENBQUM7QUFDUCxRQUNJLElBQUksQ0FBQyxTQUFTLEVBQUU7QUFDcEIsWUFBTSxPQUFPO0FBQ2IsU0FBSztBQUNMLFFBQ0ksTUFBTSxVQUFVLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDbkQsWUFBTSxPQUFPLElBQUksQ0FBQyxFQUFFLEtBQUssWUFBWSxDQUFDO0FBQ3RDLFFBQUksQ0FBQyxDQUFDLENBQUM7QUFDUCxRQUNJLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDbkMsSUFBRSxDQUFDO0FBQ0gsSUFDRSxpQkFBaUIsQ0FBQyxXQUFtQixFQUFFLFlBQW9CO0FBQzdELFFBQUksTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7QUFDakQsWUFBTSxPQUFPLEdBQUcsQ0FBQyxFQUFFLEtBQUssV0FBVyxDQUFDO0FBQ3BDLFFBQUksQ0FBQyxDQUFDLENBQUM7QUFDUCxRQUNJLElBQUksQ0FBQyxTQUFTLEVBQUU7QUFDcEIsWUFBTSxPQUFPO0FBQ2IsU0FBSztBQUNMLFFBQ0ksTUFBTSxVQUFVLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDbkQsWUFBTSxPQUFPLElBQUksQ0FBQyxFQUFFLEtBQUssWUFBWSxDQUFDO0FBQ3RDLFFBQUksQ0FBQyxDQUFDLENBQUM7QUFDUCxRQUNJLElBQUksQ0FBQyxVQUFVLEVBQUU7QUFDckIsWUFBTSxPQUFPO0FBQ2IsU0FBSztBQUNMLFFBQ0ksVUFBVSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7QUFDOUIsUUFBSSxVQUFVLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDL0IsSUFBRSxDQUFDO0FBQ0gsSUFDRSxhQUFhLENBQUMsVUFBd0M7QUFDeEQsUUFBSSxJQUFJLFVBQVUsRUFBRTtBQUNwQixZQUFNLFVBQVUsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0FBQy9CLFlBQU0sVUFBVSxDQUFDLGFBQWEsRUFBRSxDQUFDO0FBQ2pDLFlBQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDMUMsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNILElBQ0UsaUJBQWlCLENBQUMsV0FBbUI7QUFDdkMsUUFBSSxNQUFNLFNBQVMsR0FBMEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7QUFDeEUsWUFBTSxPQUFPLEdBQUcsQ0FBQyxFQUFFLEtBQUssV0FBVyxDQUFDO0FBQ3BDLFFBQUksQ0FBQyxDQUFDLENBQUM7QUFDUCxRQUNJLElBQUksQ0FBQyxTQUFTLEVBQUU7QUFDcEIsWUFBTSxPQUFPO0FBQ2IsU0FBSztBQUNMLFFBQ0ksU0FBUyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDbkMsWUFBTSxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztBQUMxQixZQUFNLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztBQUMzQixRQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ1AsSUFBRSxDQUFDO0FBQ0g7NENBN0VDLFVBQVU7Ozs7Z0RBQ1Q7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIFF1ZXJ5TGlzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU2Nyb2xsU3B5TGlua0RpcmVjdGl2ZSB9IGZyb20gJy4vc2Nyb2xsLXNweS1saW5rLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2Nyb2xsU3B5IHtcbiAgaWQ6IHN0cmluZztcbiAgbGlua3M6IFF1ZXJ5TGlzdDxTY3JvbGxTcHlMaW5rRGlyZWN0aXZlPjtcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNjcm9sbFNweVNlcnZpY2Uge1xuICBwcml2YXRlIHNjcm9sbFNweXM6IFNjcm9sbFNweVtdID0gW107XG5cbiAgcHJpdmF0ZSBhY3RpdmVTdWJqZWN0ID0gbmV3IFN1YmplY3Q8U2Nyb2xsU3B5TGlua0RpcmVjdGl2ZT4oKTtcbiAgYWN0aXZlJDogT2JzZXJ2YWJsZTxhbnk+ID0gdGhpcy5hY3RpdmVTdWJqZWN0O1xuXG4gIGFkZFNjcm9sbFNweShzY3JvbGxTcHk6IFNjcm9sbFNweSkge1xuICAgIHRoaXMuc2Nyb2xsU3B5cy5wdXNoKHNjcm9sbFNweSk7XG4gIH1cblxuICByZW1vdmVTY3JvbGxTcHkoc2Nyb2xsU3B5SWQ6IHN0cmluZykge1xuICAgIGNvbnN0IHNjcm9sbFNweUluZGV4ID0gdGhpcy5zY3JvbGxTcHlzLmZpbmRJbmRleCggKHNweSkgPT4ge1xuICAgICAgcmV0dXJuIHNweS5pZCA9PT0gc2Nyb2xsU3B5SWQ7XG4gICAgfSk7XG4gICAgdGhpcy5zY3JvbGxTcHlzLnNwbGljZShzY3JvbGxTcHlJbmRleCwgMSk7XG4gIH1cblxuICB1cGRhdGVBY3RpdmVTdGF0ZShzY3JvbGxTcHlJZDogc3RyaW5nLCBhY3RpdmVMaW5rSWQ6IHN0cmluZykge1xuICAgIGNvbnN0IHNjcm9sbFNweSA9IHRoaXMuc2Nyb2xsU3B5cy5maW5kKHNweSA9PiB7XG4gICAgICByZXR1cm4gc3B5LmlkID09PSBzY3JvbGxTcHlJZDtcbiAgICB9KTtcblxuICAgIGlmICghc2Nyb2xsU3B5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgYWN0aXZlTGluayA9IHNjcm9sbFNweS5saW5rcy5maW5kKGxpbmsgPT4ge1xuICAgICAgcmV0dXJuIGxpbmsuaWQgPT09IGFjdGl2ZUxpbmtJZDtcbiAgICB9KTtcblxuICAgIHRoaXMuc2V0QWN0aXZlTGluayhhY3RpdmVMaW5rKTtcbiAgfVxuXG4gIHJlbW92ZUFjdGl2ZVN0YXRlKHNjcm9sbFNweUlkOiBzdHJpbmcsIGFjdGl2ZUxpbmtJZDogc3RyaW5nKSB7XG4gICAgY29uc3Qgc2Nyb2xsU3B5ID0gdGhpcy5zY3JvbGxTcHlzLmZpbmQoc3B5ID0+IHtcbiAgICAgIHJldHVybiBzcHkuaWQgPT09IHNjcm9sbFNweUlkO1xuICAgIH0pO1xuXG4gICAgaWYgKCFzY3JvbGxTcHkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBhY3RpdmVMaW5rID0gc2Nyb2xsU3B5LmxpbmtzLmZpbmQobGluayA9PiB7XG4gICAgICByZXR1cm4gbGluay5pZCA9PT0gYWN0aXZlTGlua0lkO1xuICAgIH0pO1xuXG4gICAgaWYgKCFhY3RpdmVMaW5rKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgYWN0aXZlTGluay5hY3RpdmUgPSBmYWxzZTtcbiAgICBhY3RpdmVMaW5rLmRldGVjdENoYW5nZXMoKTtcbiAgfVxuXG4gIHNldEFjdGl2ZUxpbmsoYWN0aXZlTGluazogU2Nyb2xsU3B5TGlua0RpcmVjdGl2ZSB8IGFueSkge1xuICAgIGlmIChhY3RpdmVMaW5rKSB7XG4gICAgICBhY3RpdmVMaW5rLmFjdGl2ZSA9IHRydWU7XG4gICAgICBhY3RpdmVMaW5rLmRldGVjdENoYW5nZXMoKTtcbiAgICAgIHRoaXMuYWN0aXZlU3ViamVjdC5uZXh0KGFjdGl2ZUxpbmspO1xuICAgIH1cbiAgfVxuXG4gIHJlbW92ZUFjdGl2ZUxpbmtzKHNjcm9sbFNweUlkOiBzdHJpbmcpIHtcbiAgICBjb25zdCBzY3JvbGxTcHk6IFNjcm9sbFNweSB8IHVuZGVmaW5lZCA9IHRoaXMuc2Nyb2xsU3B5cy5maW5kKHNweSA9PiB7XG4gICAgICByZXR1cm4gc3B5LmlkID09PSBzY3JvbGxTcHlJZDtcbiAgICB9KTtcblxuICAgIGlmICghc2Nyb2xsU3B5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2Nyb2xsU3B5LmxpbmtzLmZvckVhY2gobGluayA9PiB7XG4gICAgICBsaW5rLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgbGluay5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==