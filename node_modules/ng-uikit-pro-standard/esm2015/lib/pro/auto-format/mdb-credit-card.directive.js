import { Directive, HostListener, Input, HostBinding } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export class MdbCreditCardDirective {
    constructor() {
        this.standardPattern = /(\d{1,4})/g;
        this.defaultCard = {
            name: '',
            fullName: '',
            re: /\d{0,16}/,
            pattern: this.standardPattern,
            maxLength: 19,
            cvvLength: 3,
        };
        this.cards = [
            {
                name: 'visa',
                fullName: 'Visa',
                re: /^4\d{0,15}/,
                pattern: this.standardPattern,
                maxLength: 16,
                cvvLength: 3,
            },
            {
                name: 'mastercard',
                fullName: 'Mastercard',
                re: /^(5[1-5]\d{0,2}|22[2-9]\d{0,1}|2[3-7]\d{0,2})\d{0,12}/,
                pattern: this.standardPattern,
                maxLength: 16,
                cvvLength: 3,
            },
            {
                name: 'amex',
                fullName: 'American Express',
                re: /^3[47]\d{0,13}/,
                pattern: /(\d{1,4})(\d{1,6})?(\d{1,5})?/,
                maxLength: 15,
                cvvLength: 4,
            },
            {
                name: 'jcb',
                fullName: 'JCB',
                re: /^(?:35\d{0,2})\d{0,12}/,
                pattern: this.standardPattern,
                maxLength: 16,
                cvvLength: 3,
            },
            {
                name: 'discover',
                fullName: 'Discover',
                re: /^(?:6011|65\d{0,2}|64[4-9]\d?)\d{0,12}/,
                pattern: this.standardPattern,
                maxLength: 16,
                cvvLength: 3,
            },
            {
                name: 'diners-club',
                fullName: 'Diners Club',
                re: /^3(?:0([0-5]|9)|[689]\d?)\d{0,11}/,
                pattern: this.standardPattern,
                maxLength: 14,
                cvvLength: 3,
            },
        ];
        this._separator = ' ';
    }
    get additionalCards() {
        return this._additionalCards;
    }
    set additionalCards(cards) {
        this._additionalCards = cards;
        this.addCards(cards);
    }
    get separator() {
        return this._separator;
    }
    set separator(separator) {
        this._separator = separator;
    }
    onInput(event) {
        this.formatInput(event);
    }
    formatInput(event) {
        const input = event.target.value;
        const formattedInput = this.getFormattedInput(input);
        event.target.value = formattedInput;
    }
    getFormattedInput(value) {
        value = this.removeNonDigits(value);
        const card = this.findCardByNumber(value);
        this.updateCurrentCardNames(card.name, card.fullName);
        let cardNumMaxLength;
        if (this.hasStandardPattern(card)) {
            const matches = value.match(card.pattern);
            if (matches === null) {
                return value;
            }
            cardNumMaxLength = card.maxLength + matches.length - 1;
            this.maxLength = cardNumMaxLength.toString();
            return matches.join(this.separator);
        }
        else {
            const results = card.pattern.exec(value);
            if (results === null) {
                return value;
            }
            results.shift();
            cardNumMaxLength = card.maxLength + results.length - 1;
            this.maxLength = cardNumMaxLength.toString();
            return results.filter(this.isMatch).join(this.separator);
        }
    }
    removeNonDigits(value) {
        return value.replace(/\D/g, '');
    }
    hasStandardPattern(card) {
        return card.pattern.toString() === this.standardPattern.toString();
    }
    isMatch(match) {
        return match !== undefined;
    }
    updateCurrentCardNames(name, fullName) {
        this.cardName = name;
        this.cardFullName = fullName;
    }
    findCardByNumber(value) {
        const cardType = this.cards.find(card => {
            return card.re.test(value);
        });
        if (!cardType) {
            return this.defaultCard;
        }
        return cardType;
    }
    addCards(newCards) {
        newCards.forEach(card => {
            this.cards.push(card);
        });
    }
}
MdbCreditCardDirective.ɵfac = function MdbCreditCardDirective_Factory(t) { return new (t || MdbCreditCardDirective)(); };
MdbCreditCardDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MdbCreditCardDirective, selectors: [["", "mdbCreditCard", ""]], hostVars: 1, hostBindings: function MdbCreditCardDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("input", function MdbCreditCardDirective_input_HostBindingHandler($event) { return ctx.onInput($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("maxLength", ctx.maxLength);
    } }, inputs: { additionalCards: "additionalCards", separator: "separator" }, exportAs: ["mdbCreditCard"] });
MdbCreditCardDirective.ctorParameters = () => [];
MdbCreditCardDirective.propDecorators = {
    additionalCards: [{ type: Input }],
    separator: [{ type: Input }],
    maxLength: [{ type: HostBinding, args: ['attr.maxLength',] }],
    onInput: [{ type: HostListener, args: ['input', ['$event'],] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MdbCreditCardDirective, [{
        type: Directive,
        args: [{
                selector: '[mdbCreditCard]',
                exportAs: 'mdbCreditCard'
            }]
    }], function () { return []; }, { additionalCards: [{
            type: Input
        }], separator: [{
            type: Input
        }], onInput: [{
            type: HostListener,
            args: ['input', ['$event']]
        }], maxLength: [{
            type: HostBinding,
            args: ['attr.maxLength']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,