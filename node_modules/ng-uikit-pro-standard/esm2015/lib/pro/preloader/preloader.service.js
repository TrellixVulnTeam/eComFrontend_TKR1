import { Injectable, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { CONTAINER_QUERY, COMPLETE_CLASS_NAME, TYPE_ERROR_CONTAINER_WAS_NOT_FOUND_MESSAGE, EMULATE_ELEMENT_NAME, } from './preloader.constants';
import * as ɵngcc0 from '@angular/core';
export class MDBSpinningPreloader {
    constructor(document) {
        this.document = document;
        this.container = this.document.querySelector(CONTAINER_QUERY);
    }
    static errorHandler() {
        throw new TypeError(TYPE_ERROR_CONTAINER_WAS_NOT_FOUND_MESSAGE);
    }
    start() {
        this.container.classList.remove(COMPLETE_CLASS_NAME);
    }
    stop() {
        this.container.classList.add(COMPLETE_CLASS_NAME);
    }
    get container() {
        return this._container;
    }
    set container(element) {
        this._container = element || this.document.createElement(EMULATE_ELEMENT_NAME);
    }
}
MDBSpinningPreloader.ɵfac = function MDBSpinningPreloader_Factory(t) { return new (t || MDBSpinningPreloader)(ɵngcc0.ɵɵinject(DOCUMENT)); };
MDBSpinningPreloader.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MDBSpinningPreloader, factory: MDBSpinningPreloader.ɵfac });
MDBSpinningPreloader.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MDBSpinningPreloader, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlbG9hZGVyLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLXVpa2l0LXByby1zdGFuZGFyZC9zcmMvbGliL3Byby9wcmVsb2FkZXIvcHJlbG9hZGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFbkQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRTNDLE9BQU8sRUFDTCxlQUFlLEVBQ2YsbUJBQW1CLEVBQ25CLDBDQUEwQyxFQUMxQyxvQkFBb0IsR0FDckIsTUFBTSx1QkFBdUIsQ0FBQzs7QUFLL0IsTUFBTSxPQUFPLG9CQUFvQjtBQUNqQyxJQU1FLFlBQXFDLFFBQWE7QUFDcEQsUUFEdUMsYUFBUSxHQUFSLFFBQVEsQ0FBSztBQUFDLFFBQ2pELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDbEUsSUFBRSxDQUFDO0FBQ0gsSUFQUyxNQUFNLENBQUMsWUFBWTtBQUM1QixRQUFJLE1BQU0sSUFBSSxTQUFTLENBQUMsMENBQTBDLENBQUMsQ0FBQztBQUNwRSxJQUFFLENBQUM7QUFDSCxJQUtTLEtBQUs7QUFDZCxRQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBQ3pELElBQUUsQ0FBQztBQUNILElBQ1MsSUFBSTtBQUNiLFFBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFDdEQsSUFBRSxDQUFDO0FBQ0gsSUFDRSxJQUFXLFNBQVM7QUFBSyxRQUN2QixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7QUFDM0IsSUFBRSxDQUFDO0FBQ0gsSUFDRSxJQUFXLFNBQVMsQ0FBQyxPQUFPO0FBQzlCLFFBQUksSUFBSSxDQUFDLFVBQVUsR0FBRyxPQUFPLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUNuRixJQUFFLENBQUM7QUFDSDtnREEzQkMsVUFBVTs0SEFDVDtBQUFDO0FBQ1UsNENBTUUsTUFBTSxTQUFDLFFBQVE7QUFBUTs7Ozs7O2tDQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5pbXBvcnQge1xuICBDT05UQUlORVJfUVVFUlksXG4gIENPTVBMRVRFX0NMQVNTX05BTUUsXG4gIFRZUEVfRVJST1JfQ09OVEFJTkVSX1dBU19OT1RfRk9VTkRfTUVTU0FHRSxcbiAgRU1VTEFURV9FTEVNRU5UX05BTUUsXG59IGZyb20gJy4vcHJlbG9hZGVyLmNvbnN0YW50cyc7XG5cbmltcG9ydCB7IE1EQl9TUElOTklOR19QUkVMT0FERVJfVFlQRSB9IGZyb20gJy4vcHJlbG9hZGVyLnR5cGVzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE1EQlNwaW5uaW5nUHJlbG9hZGVyIHtcbiAgcHVibGljIF9jb250YWluZXI6IE1EQl9TUElOTklOR19QUkVMT0FERVJfVFlQRTtcblxuICBwdWJsaWMgc3RhdGljIGVycm9ySGFuZGxlcigpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFRZUEVfRVJST1JfQ09OVEFJTkVSX1dBU19OT1RfRk9VTkRfTUVTU0FHRSk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihASW5qZWN0KERPQ1VNRU5UKSBwdWJsaWMgZG9jdW1lbnQ6IGFueSkge1xuICAgIHRoaXMuY29udGFpbmVyID0gdGhpcy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKENPTlRBSU5FUl9RVUVSWSk7XG4gIH1cblxuICBwdWJsaWMgc3RhcnQoKSB7XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZShDT01QTEVURV9DTEFTU19OQU1FKTtcbiAgfVxuXG4gIHB1YmxpYyBzdG9wKCkge1xuICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoQ09NUExFVEVfQ0xBU1NfTkFNRSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGNvbnRhaW5lcigpOiBNREJfU1BJTk5JTkdfUFJFTE9BREVSX1RZUEUge1xuICAgIHJldHVybiB0aGlzLl9jb250YWluZXI7XG4gIH1cblxuICBwdWJsaWMgc2V0IGNvbnRhaW5lcihlbGVtZW50KSB7XG4gICAgdGhpcy5fY29udGFpbmVyID0gZWxlbWVudCB8fCB0aGlzLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoRU1VTEFURV9FTEVNRU5UX05BTUUpO1xuICB9XG59XG4iXX0=