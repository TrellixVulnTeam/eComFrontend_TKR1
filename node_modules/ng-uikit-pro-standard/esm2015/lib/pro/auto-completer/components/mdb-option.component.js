import { Component, ElementRef, Input, HostListener, InjectionToken, Optional, Inject, } from '@angular/core';
import { Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../directives/mdb-auto-completer-option.directive';
import * as ɵngcc2 from '@angular/common';

const _c0 = function (a0) { return { "height.px": a0 }; };
const _c1 = ["*"];
export const MDB_OPTION_PARENT = new InjectionToken('MDB_OPTION_PARENT');
export class MdbOptionComponent {
    constructor(el, _parent) {
        this.el = el;
        this._parent = _parent;
        this.clicked = false;
        this.clickSource = new Subject();
        this.click$ = this.clickSource.asObservable();
        this.clicked = false;
    }
    get optionHeight() {
        return this._optionHeight;
    }
    onClick() {
        this.clickSource.next(this);
    }
    get label() {
        return this.el.nativeElement.textContent;
    }
    ngOnInit() {
        if (this._parent.visibleOptions && this._parent.optionHeight) {
            this._optionHeight = this._parent.optionHeight;
        }
    }
}
MdbOptionComponent.ɵfac = function MdbOptionComponent_Factory(t) { return new (t || MdbOptionComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MDB_OPTION_PARENT, 8)); };
MdbOptionComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MdbOptionComponent, selectors: [["mdb-option"]], hostBindings: function MdbOptionComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function MdbOptionComponent_click_HostBindingHandler() { return ctx.onClick(); });
    } }, inputs: { value: "value", disabled: "disabled" }, ngContentSelectors: _c1, decls: 2, vars: 3, consts: [["tabindex", "0", "mdbAutoCompleterOption", "", 1, "completer-row", 3, "ngStyle"]], template: function MdbOptionComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction1(1, _c0, ctx._optionHeight ? ctx._optionHeight : "auto"));
    } }, directives: [ɵngcc1.MdbAutoCompleterOptionDirective, ɵngcc2.NgStyle], encapsulation: 2 });
MdbOptionComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MDB_OPTION_PARENT,] }] }
];
MdbOptionComponent.propDecorators = {
    value: [{ type: Input }],
    disabled: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MdbOptionComponent, [{
        type: Component,
        args: [{
                selector: 'mdb-option',
                template: "<div\n  tabindex=\"0\"\n  class=\"completer-row\"\n  [ngStyle]=\"{\n    'height.px': _optionHeight ? _optionHeight : 'auto'\n  }\"\n  mdbAutoCompleterOption\n>\n  <ng-content></ng-content>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [MDB_OPTION_PARENT]
            }] }]; }, { onClick: [{
            type: HostListener,
            args: ['click']
        }], value: [{
            type: Input
        }], disabled: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWRiLW9wdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLXVpa2l0LXByby1zdGFuZGFyZC9zcmMvbGliL3Byby9hdXRvLWNvbXBsZXRlci9jb21wb25lbnRzL21kYi1vcHRpb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsVUFBVSxFQUNWLEtBQUssRUFDTCxZQUFZLEVBQ1osY0FBYyxFQUNkLFFBQVEsRUFDUixNQUFNLEdBRVAsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLE9BQU8sRUFBYyxNQUFNLE1BQU0sQ0FBQzs7Ozs7OztBQU8zQyxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLGNBQWMsQ0FBa0IsbUJBQW1CLENBQUMsQ0FBQztBQU0xRixNQUFNLE9BQU8sa0JBQWtCO0FBQUcsSUFjaEMsWUFDUyxFQUFjLEVBQzBCLE9BQXdCO0FBQ3hFLFFBRlEsT0FBRSxHQUFGLEVBQUUsQ0FBWTtBQUFDLFFBQ3lCLFlBQU8sR0FBUCxPQUFPLENBQWlCO0FBQzNFLFFBVEUsWUFBTyxHQUFHLEtBQUssQ0FBQztBQUNsQixRQUVFLGdCQUFXLEdBQWdDLElBQUksT0FBTyxFQUFzQixDQUFDO0FBQy9FLFFBQUUsV0FBTSxHQUFtQyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQzNFLFFBS0ksSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFDekIsSUFBRSxDQUFDO0FBQ0gsSUFoQkUsSUFBSSxZQUFZO0FBQUssUUFDbkIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDO0FBQzlCLElBQUUsQ0FBQztBQUNILElBZUUsT0FBTztBQUNULFFBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDaEMsSUFBRSxDQUFDO0FBQ0gsSUFBRSxJQUFJLEtBQUs7QUFDWCxRQUFJLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDO0FBQzdDLElBQUUsQ0FBQztBQUNILElBQUUsUUFBUTtBQUNWLFFBQUksSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRTtBQUNsRSxZQUFNLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUM7QUFDckQsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNIOzhDQXJDQyxTQUFTLFNBQUMsa0JBQ1QsUUFBUSxFQUFFLFlBQVksa0JBQ3RCO21JQUF3QyxjQUN6Qzs7Ozs7Ozs7O21HQUNJO0FBQUM7QUFBNEMsWUF0QmhELFVBQVU7QUFDViw0Q0FxQ0csUUFBUSxZQUFJLE1BQU0sU0FBQyxpQkFBaUI7QUFBUTtBQUFHO0FBRTVDLG9CQWpCTCxLQUFLO0FBQUssdUJBQ1YsS0FBSztBQUFLLHNCQW1CVixZQUFZLFNBQUMsT0FBTztBQUNuQjs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBJbnB1dCxcbiAgSG9zdExpc3RlbmVyLFxuICBJbmplY3Rpb25Ub2tlbixcbiAgT3B0aW9uYWwsXG4gIEluamVjdCxcbiAgT25Jbml0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElTZWxlY3RlZE9wdGlvbiB9IGZyb20gJy4uL2ludGVyZmFjZXMvc2VsZWN0ZWQtb3B0aW9uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWRiT3B0aW9uUGFyZW50IHtcbiAgb3B0aW9uSGVpZ2h0OiBudW1iZXI7XG4gIHZpc2libGVPcHRpb25zOiBudW1iZXI7XG59XG5cbmV4cG9ydCBjb25zdCBNREJfT1BUSU9OX1BBUkVOVCA9IG5ldyBJbmplY3Rpb25Ub2tlbjxNZGJPcHRpb25QYXJlbnQ+KCdNREJfT1BUSU9OX1BBUkVOVCcpO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdtZGItb3B0aW9uJyxcbiAgdGVtcGxhdGVVcmw6ICdtZGItb3B0aW9uLmNvbXBvbmVudC5odG1sJyxcbn0pXG5leHBvcnQgY2xhc3MgTWRiT3B0aW9uQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCkgdmFsdWU6IHN0cmluZztcbiAgQElucHV0KCkgZGlzYWJsZWQ6IGJvb2xlYW47XG4gIF9vcHRpb25IZWlnaHQ6IGFueTtcbiAgZ2V0IG9wdGlvbkhlaWdodCgpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLl9vcHRpb25IZWlnaHQ7XG4gIH1cblxuICBjbGlja2VkID0gZmFsc2U7XG4gIHNlbGVjdGVkSXRlbTogSVNlbGVjdGVkT3B0aW9uO1xuXG4gIGNsaWNrU291cmNlOiBTdWJqZWN0PE1kYk9wdGlvbkNvbXBvbmVudD4gPSBuZXcgU3ViamVjdDxNZGJPcHRpb25Db21wb25lbnQ+KCk7XG4gIGNsaWNrJDogT2JzZXJ2YWJsZTxNZGJPcHRpb25Db21wb25lbnQ+ID0gdGhpcy5jbGlja1NvdXJjZS5hc09ic2VydmFibGUoKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgZWw6IEVsZW1lbnRSZWYsXG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChNREJfT1BUSU9OX1BBUkVOVCkgcHJpdmF0ZSBfcGFyZW50OiBNZGJPcHRpb25QYXJlbnRcbiAgKSB7XG4gICAgdGhpcy5jbGlja2VkID0gZmFsc2U7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdjbGljaycpXG4gIG9uQ2xpY2soKSB7XG4gICAgdGhpcy5jbGlja1NvdXJjZS5uZXh0KHRoaXMpO1xuICB9XG4gIGdldCBsYWJlbCgpIHtcbiAgICByZXR1cm4gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnRleHRDb250ZW50O1xuICB9XG4gIG5nT25Jbml0KCkge1xuICAgIGlmICh0aGlzLl9wYXJlbnQudmlzaWJsZU9wdGlvbnMgJiYgdGhpcy5fcGFyZW50Lm9wdGlvbkhlaWdodCkge1xuICAgICAgdGhpcy5fb3B0aW9uSGVpZ2h0ID0gdGhpcy5fcGFyZW50Lm9wdGlvbkhlaWdodDtcbiAgICB9XG4gIH1cbn1cbiJdfQ==