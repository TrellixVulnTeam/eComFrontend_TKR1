import { Component, ElementRef, ViewChild, Input, ContentChildren, QueryList, Output, EventEmitter, ChangeDetectionStrategy, ChangeDetectorRef, Optional, } from '@angular/core';
import { state, style, trigger, transition, animate } from '@angular/animations';
import { RouterLinkWithHref, Router, NavigationEnd } from '@angular/router';
import { filter, takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';

const _c0 = ["body"];
const _c1 = ["*"];
export class SBItemBodyComponent {
    constructor(el, _cdRef, router) {
        this.el = el;
        this._cdRef = _cdRef;
        this.router = router;
        this.animationStateChange = new EventEmitter();
        this.id = `mdb-accordion-`;
        this.height = '0';
        this._destroy$ = new Subject();
        this.expandAnimationState = 'collapsed';
        this.ariaLabelledBy = '';
    }
    toggle(collapsed) {
        setTimeout(() => {
            collapsed
                ? (this.expandAnimationState = 'collapsed')
                : (this.expandAnimationState = 'expanded');
            this._cdRef.markForCheck();
        }, 0);
    }
    animationCallback() {
        this.animationStateChange.emit({
            state: this.expandAnimationState,
            accordionEl: this.el.nativeElement.parentElement.parentElement,
        });
    }
    openSidenavOnActiveLink() {
        if (typeof window !== 'undefined' && window) {
            const pathStrategyUrl = window.location.pathname;
            const hashStrategyUrl = window.location.hash;
            const activeLink = this.routerLinks.find((link) => {
                const params = link.href.split('?')[1];
                if (params) {
                    return (link.href.split('?')[0] === pathStrategyUrl ||
                        link.href.split('?')[0] === hashStrategyUrl);
                }
                else {
                    return link.href === pathStrategyUrl || link.href === hashStrategyUrl;
                }
            });
            const sbItem = this.el.nativeElement.parentNode;
            if (activeLink) {
                setTimeout(() => {
                    this.expandAnimationState = 'expanded';
                    if (sbItem) {
                        sbItem.classList.add('active');
                        sbItem.classList.remove('is-collapsed');
                    }
                    this._cdRef.markForCheck();
                }, 10);
            }
            else if (this.expandAnimationState !== 'collapsed' && activeLink) {
                setTimeout(() => {
                    this.expandAnimationState = 'collapsed';
                    if (sbItem) {
                        sbItem.classList.remove('active');
                        sbItem.classList.add('is-collapsed');
                    }
                    this._cdRef.markForCheck();
                }, 10);
            }
        }
    }
    ngAfterContentInit() {
        setTimeout(() => {
            this.collapsed
                ? (this.expandAnimationState = 'collapsed')
                : (this.expandAnimationState = 'expanded');
            if (this.router && this.autoExpand) {
                this.router.events
                    .pipe(takeUntil(this._destroy$), filter(event => event instanceof NavigationEnd))
                    .subscribe(() => {
                    this.openSidenavOnActiveLink();
                });
            }
        }, 0);
    }
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.unsubscribe();
    }
}
SBItemBodyComponent.ɵfac = function SBItemBodyComponent_Factory(t) { return new (t || SBItemBodyComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Router, 8)); };
SBItemBodyComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SBItemBodyComponent, selectors: [["mdb-item-body"], ["mdb-accordion-item-body"]], contentQueries: function SBItemBodyComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, RouterLinkWithHref, 1);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.routerLinks = _t);
    } }, viewQuery: function SBItemBodyComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 3);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.bodyEl = _t.first);
    } }, inputs: { customClass: "customClass" }, outputs: { animationStateChange: "animationStateChange" }, exportAs: ["sbItemBody"], ngContentSelectors: _c1, decls: 4, vars: 8, consts: [["role", "region", 1, "sb-item-body", 3, "id"], ["body", ""]], template: function SBItemBodyComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0, 1);
        ɵngcc0.ɵɵlistener("@expandBody.done", function SBItemBodyComponent_Template_div_animation_expandBody_done_0_listener() { return ctx.animationCallback(); });
        ɵngcc0.ɵɵelementStart(2, "div");
        ɵngcc0.ɵɵprojection(3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("height", ctx.height);
        ɵngcc0.ɵɵproperty("@expandBody", ctx.expandAnimationState)("id", ctx.id);
        ɵngcc0.ɵɵattribute("aria-labelledby", ctx.ariaLabelledBy);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵclassMapInterpolate1("card-body ", ctx.customClass, "");
    } }, encapsulation: 2, data: { animation: [
            trigger('expandBody', [
                state('collapsed', style({ height: '0px', visibility: 'hidden' })),
                state('expanded', style({ height: '*', visibility: 'visible' })),
                transition('expanded <=> collapsed', animate('500ms ease')),
            ]),
        ] }, changeDetection: 0 });
SBItemBodyComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: Router, decorators: [{ type: Optional }] }
];
SBItemBodyComponent.propDecorators = {
    customClass: [{ type: Input }],
    animationStateChange: [{ type: Output }],
    routerLinks: [{ type: ContentChildren, args: [RouterLinkWithHref, { descendants: true },] }],
    bodyEl: [{ type: ViewChild, args: ['body', { static: true },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SBItemBodyComponent, [{
        type: Component,
        args: [{
                exportAs: 'sbItemBody',
                selector: 'mdb-item-body, mdb-accordion-item-body',
                template: "<div #body class=\"sb-item-body\"\n     [style.height]=\"height\"\n     (@expandBody.done)=\"animationCallback()\"\n     [@expandBody]=\"expandAnimationState\"\n     [id]=\"id\"\n     role=\"region\"\n     [attr.aria-labelledby]=\"ariaLabelledBy\">\n    <div class=\"card-body {{ customClass }}\">\n    \t<ng-content></ng-content>\n    </div>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                animations: [
                    trigger('expandBody', [
                        state('collapsed', style({ height: '0px', visibility: 'hidden' })),
                        state('expanded', style({ height: '*', visibility: 'visible' })),
                        transition('expanded <=> collapsed', animate('500ms ease')),
                    ]),
                ]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.Router, decorators: [{
                type: Optional
            }] }]; }, { animationStateChange: [{
            type: Output
        }], customClass: [{
            type: Input
        }], routerLinks: [{
            type: ContentChildren,
            args: [RouterLinkWithHref, { descendants: true }]
        }], bodyEl: [{
            type: ViewChild,
            args: ['body', { static: true }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,