import { Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export class MdbAccordionService {
    constructor() {
        this._items = [];
        this._multiple = false;
    }
    addItem(item) {
        this._items.push(item);
    }
    updateItemsArray(items) {
        this._items = [...items];
    }
    updateMultipleState(value) {
        this._multiple = value;
    }
    didItemToggled(item) {
        // on not multiple, it will collpase the rest of items
        if (!this._multiple) {
            this._items.forEach((el) => {
                if (el !== item) {
                    el.applyToggle(true);
                }
                if (el === item) {
                    const collapsed = el.collapsed ? true : false;
                    setTimeout(() => {
                        el.applyToggle(collapsed);
                    }, 0);
                }
            });
        }
    }
}
MdbAccordionService.ɵfac = function MdbAccordionService_Factory(t) { return new (t || MdbAccordionService)(); };
MdbAccordionService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MdbAccordionService, factory: MdbAccordionService.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MdbAccordionService, [{
        type: Injectable
    }], function () { return []; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWRiLWFjY29yZGlvbi5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy11aWtpdC1wcm8tc3RhbmRhcmQvc3JjL2xpYi9wcm8vYWNjb3JkaW9uL21kYi1hY2NvcmRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDOztBQUl6QyxNQUFNLE9BQU8sbUJBQW1CO0FBQ2hDLElBRkE7QUFDRSxRQUNRLFdBQU0sR0FBc0IsRUFBRSxDQUFDO0FBQ3pDLFFBQVUsY0FBUyxHQUFHLEtBQUssQ0FBQztBQUM1QixJQThCQSxDQUFDO0FBQ0QsSUE5QkUsT0FBTyxDQUFDLElBQXFCO0FBQy9CLFFBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDM0IsSUFBRSxDQUFDO0FBQ0gsSUFDRSxnQkFBZ0IsQ0FBQyxLQUF3QjtBQUMzQyxRQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO0FBQzdCLElBQUUsQ0FBQztBQUNILElBQ0UsbUJBQW1CLENBQUMsS0FBYztBQUNwQyxRQUFJLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO0FBQzNCLElBQUUsQ0FBQztBQUNILElBQ0UsY0FBYyxDQUFDLElBQXFCO0FBQ3RDLFFBQUksc0RBQXNEO0FBQzFELFFBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7QUFDekIsWUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQU8sRUFBRSxFQUFFO0FBQ3RDLGdCQUFRLElBQUksRUFBRSxLQUFLLElBQUksRUFBRTtBQUN6QixvQkFBVSxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQy9CLGlCQUFTO0FBQ1QsZ0JBQVEsSUFBSSxFQUFFLEtBQUssSUFBSSxFQUFFO0FBQ3pCLG9CQUFVLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0FBQ3hELG9CQUFVLFVBQVUsQ0FBQyxHQUFHLEVBQUU7QUFDMUIsd0JBQVksRUFBRSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUN0QyxvQkFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDaEIsaUJBQVM7QUFDVCxZQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ1QsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNIOytDQWpDQyxVQUFVOzs7O2dEQUNUO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU0JJdGVtQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL3NiLWl0ZW0nO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTWRiQWNjb3JkaW9uU2VydmljZSB7XG4gIHByaXZhdGUgX2l0ZW1zOiBTQkl0ZW1Db21wb25lbnRbXSA9IFtdO1xuICBwcml2YXRlIF9tdWx0aXBsZSA9IGZhbHNlO1xuXG4gIGFkZEl0ZW0oaXRlbTogU0JJdGVtQ29tcG9uZW50KSB7XG4gICAgdGhpcy5faXRlbXMucHVzaChpdGVtKTtcbiAgfVxuXG4gIHVwZGF0ZUl0ZW1zQXJyYXkoaXRlbXM6IFNCSXRlbUNvbXBvbmVudFtdKSB7XG4gICAgdGhpcy5faXRlbXMgPSBbLi4uaXRlbXNdO1xuICB9XG5cbiAgdXBkYXRlTXVsdGlwbGVTdGF0ZSh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX211bHRpcGxlID0gdmFsdWU7XG4gIH1cblxuICBkaWRJdGVtVG9nZ2xlZChpdGVtOiBTQkl0ZW1Db21wb25lbnQpIHtcbiAgICAvLyBvbiBub3QgbXVsdGlwbGUsIGl0IHdpbGwgY29sbHBhc2UgdGhlIHJlc3Qgb2YgaXRlbXNcbiAgICBpZiAoIXRoaXMuX211bHRpcGxlKSB7XG4gICAgICB0aGlzLl9pdGVtcy5mb3JFYWNoKChlbDogYW55KSA9PiB7XG4gICAgICAgIGlmIChlbCAhPT0gaXRlbSkge1xuICAgICAgICAgIGVsLmFwcGx5VG9nZ2xlKHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbCA9PT0gaXRlbSkge1xuICAgICAgICAgIGNvbnN0IGNvbGxhcHNlZCA9IGVsLmNvbGxhcHNlZCA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGVsLmFwcGx5VG9nZ2xlKGNvbGxhcHNlZCk7XG4gICAgICAgICAgfSwgMCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG59XG4iXX0=