import { Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export class LocaleService {
    constructor() {
        this.locales = {
            'en': {
                dayLabelsFull: { su: 'Sunday', mo: 'Monday', tu: 'Tuesday', we: 'Wednesday', th: 'Thursday', fr: 'Friday', sa: 'Saturday' },
                dayLabels: { su: 'Sun', mo: 'Mon', tu: 'Tue', we: 'Wed', th: 'Thu', fr: 'Fri', sa: 'Sat' },
                monthLabelsFull: {
                    1: 'January',
                    2: 'February',
                    3: 'March',
                    4: 'April',
                    5: 'May',
                    6: 'June',
                    7: 'July',
                    8: 'August',
                    9: 'September',
                    10: 'October',
                    11: 'November',
                    12: 'December'
                },
                monthLabels: {
                    1: 'Jan',
                    2: 'Feb',
                    3: 'Mar',
                    4: 'Apr',
                    5: 'May',
                    6: 'Jun',
                    7: 'Jul',
                    8: 'Aug',
                    9: 'Sep',
                    10: 'Oct',
                    11: 'Nov',
                    12: 'Dec'
                },
                dateFormat: 'yyyy-mm-dd',
                todayBtnTxt: 'Today',
                clearBtnTxt: 'Clear',
                closeBtnTxt: 'Close',
                firstDayOfWeek: 'mo',
                sunHighlight: false,
            }
        };
    }
    setLocaleOptions(locale) {
        Object.entries(locale).forEach((loc) => {
            const localeIdentifier = loc[0];
            this.locales[localeIdentifier] = loc[1];
        });
    }
    getLocaleOptions(locale) {
        if (locale && this.locales.hasOwnProperty(locale)) {
            // User given locale
            return this.locales[locale];
        }
        // Default: en
        return this.locales['en'];
    }
}
LocaleService.ɵfac = function LocaleService_Factory(t) { return new (t || LocaleService)(); };
LocaleService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: LocaleService, factory: LocaleService.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LocaleService, [{
        type: Injectable
    }], function () { return []; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXBpY2tlckxvY2FsZS5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy11aWtpdC1wcm8tc3RhbmRhcmQvc3JjL2xpYi9wcm8vZGF0ZS1waWNrZXIvc2VydmljZXMvZGF0ZXBpY2tlckxvY2FsZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSTNDLE1BQU0sT0FBTyxhQUFhO0FBQUcsSUFEN0I7QUFDQyxRQUNRLFlBQU8sR0FBZTtBQUFFLFlBQzdCLElBQUksRUFBRTtBQUFFLGdCQUNOLGFBQWEsRUFBRSxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUUsRUFBRSxFQUFFLFVBQVUsRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQUU7QUFBRSxnQkFDN0gsU0FBUyxFQUFFLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRTtBQUFFLGdCQUM1RixlQUFlLEVBQUU7QUFBRSxvQkFDakIsQ0FBQyxFQUFFLFNBQVM7QUFBRSxvQkFDZCxDQUFDLEVBQUUsVUFBVTtBQUFFLG9CQUNmLENBQUMsRUFBRSxPQUFPO0FBQUUsb0JBQ1osQ0FBQyxFQUFFLE9BQU87QUFBRSxvQkFDWixDQUFDLEVBQUUsS0FBSztBQUFFLG9CQUNWLENBQUMsRUFBRSxNQUFNO0FBQUUsb0JBQ1gsQ0FBQyxFQUFFLE1BQU07QUFBRSxvQkFDWCxDQUFDLEVBQUUsUUFBUTtBQUFFLG9CQUNiLENBQUMsRUFBRSxXQUFXO0FBQUUsb0JBQ2hCLEVBQUUsRUFBRSxTQUFTO0FBQUUsb0JBQ2YsRUFBRSxFQUFFLFVBQVU7QUFBRSxvQkFDaEIsRUFBRSxFQUFFLFVBQVU7QUFBQyxpQkFBQztBQUFFLGdCQUNwQixXQUFXLEVBQUU7QUFBRSxvQkFDYixDQUFDLEVBQUUsS0FBSztBQUFFLG9CQUNWLENBQUMsRUFBRSxLQUFLO0FBQUUsb0JBQ1YsQ0FBQyxFQUFFLEtBQUs7QUFBRSxvQkFDVixDQUFDLEVBQUUsS0FBSztBQUFFLG9CQUNWLENBQUMsRUFBRSxLQUFLO0FBQUUsb0JBQ1YsQ0FBQyxFQUFFLEtBQUs7QUFBRSxvQkFDVixDQUFDLEVBQUUsS0FBSztBQUFFLG9CQUNWLENBQUMsRUFBRSxLQUFLO0FBQUUsb0JBQ1YsQ0FBQyxFQUFFLEtBQUs7QUFBRSxvQkFDVixFQUFFLEVBQUUsS0FBSztBQUFFLG9CQUNYLEVBQUUsRUFBRSxLQUFLO0FBQUUsb0JBQ1gsRUFBRSxFQUFFLEtBQUs7QUFBQyxpQkFBQztBQUFFLGdCQUNmLFVBQVUsRUFBRSxZQUFZO0FBQUUsZ0JBQzFCLFdBQVcsRUFBRSxPQUFPO0FBQUUsZ0JBQ3RCLFdBQVcsRUFBRSxPQUFPO0FBQUUsZ0JBQ3RCLFdBQVcsRUFBRSxPQUFPO0FBQUUsZ0JBQ3RCLGNBQWMsRUFBRSxJQUFJO0FBQUUsZ0JBQ3RCLFlBQVksRUFBRSxLQUFLO0FBQUUsYUFDdEI7QUFBQyxTQUNILENBQUM7QUFBQyxJQWlCTCxDQUFDO0FBQUMsSUFmQSxnQkFBZ0IsQ0FBQyxNQUFrQjtBQUFJLFFBQ3JDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBUSxFQUFFLEVBQUU7QUFBRyxZQUM3QyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUFDLFlBQ2pDLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFBQyxRQUMzQyxDQUFDLENBQUMsQ0FBQztBQUFDLElBQ04sQ0FBQztBQUFDLElBRUYsZ0JBQWdCLENBQUMsTUFBYztBQUFJLFFBQ2pDLElBQUksTUFBTSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxFQUFFO0FBQUUsWUFDbkQsb0JBQW9CO0FBQUMsWUFDckIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQUMsU0FDOUI7QUFBQyxRQUNGLGNBQWM7QUFBQyxRQUNmLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUFDLElBQzdCLENBQUM7QUFBQzt5Q0F2REgsVUFBVTs7OztnREFDVjtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBJTXlMb2NhbGVzLCBJTXlPcHRpb25zIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9pbmRleCc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBMb2NhbGVTZXJ2aWNlIHtcclxuICBwdWJsaWMgbG9jYWxlczogSU15TG9jYWxlcyA9IHtcclxuICAgICdlbic6IHtcclxuICAgICAgZGF5TGFiZWxzRnVsbDogeyBzdTogJ1N1bmRheScsIG1vOiAnTW9uZGF5JywgdHU6ICdUdWVzZGF5Jywgd2U6ICdXZWRuZXNkYXknLCB0aDogJ1RodXJzZGF5JywgZnI6ICdGcmlkYXknLCBzYTogJ1NhdHVyZGF5JyB9LFxyXG4gICAgICBkYXlMYWJlbHM6IHsgc3U6ICdTdW4nLCBtbzogJ01vbicsIHR1OiAnVHVlJywgd2U6ICdXZWQnLCB0aDogJ1RodScsIGZyOiAnRnJpJywgc2E6ICdTYXQnIH0sXHJcbiAgICAgIG1vbnRoTGFiZWxzRnVsbDoge1xyXG4gICAgICAgIDE6ICdKYW51YXJ5JyxcclxuICAgICAgICAyOiAnRmVicnVhcnknLFxyXG4gICAgICAgIDM6ICdNYXJjaCcsXHJcbiAgICAgICAgNDogJ0FwcmlsJyxcclxuICAgICAgICA1OiAnTWF5JyxcclxuICAgICAgICA2OiAnSnVuZScsXHJcbiAgICAgICAgNzogJ0p1bHknLFxyXG4gICAgICAgIDg6ICdBdWd1c3QnLFxyXG4gICAgICAgIDk6ICdTZXB0ZW1iZXInLFxyXG4gICAgICAgIDEwOiAnT2N0b2JlcicsXHJcbiAgICAgICAgMTE6ICdOb3ZlbWJlcicsXHJcbiAgICAgICAgMTI6ICdEZWNlbWJlcicgfSxcclxuICAgICAgbW9udGhMYWJlbHM6IHtcclxuICAgICAgICAxOiAnSmFuJyxcclxuICAgICAgICAyOiAnRmViJyxcclxuICAgICAgICAzOiAnTWFyJyxcclxuICAgICAgICA0OiAnQXByJyxcclxuICAgICAgICA1OiAnTWF5JyxcclxuICAgICAgICA2OiAnSnVuJyxcclxuICAgICAgICA3OiAnSnVsJyxcclxuICAgICAgICA4OiAnQXVnJyxcclxuICAgICAgICA5OiAnU2VwJyxcclxuICAgICAgICAxMDogJ09jdCcsXHJcbiAgICAgICAgMTE6ICdOb3YnLFxyXG4gICAgICAgIDEyOiAnRGVjJyB9LFxyXG4gICAgICBkYXRlRm9ybWF0OiAneXl5eS1tbS1kZCcsXHJcbiAgICAgIHRvZGF5QnRuVHh0OiAnVG9kYXknLFxyXG4gICAgICBjbGVhckJ0blR4dDogJ0NsZWFyJyxcclxuICAgICAgY2xvc2VCdG5UeHQ6ICdDbG9zZScsXHJcbiAgICAgIGZpcnN0RGF5T2ZXZWVrOiAnbW8nLFxyXG4gICAgICBzdW5IaWdobGlnaHQ6IGZhbHNlLFxyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHNldExvY2FsZU9wdGlvbnMobG9jYWxlOiBJTXlMb2NhbGVzKSB7XHJcbiAgICBPYmplY3QuZW50cmllcyhsb2NhbGUpLmZvckVhY2goKGxvYzogYW55KSA9PiB7XHJcbiAgICAgIGNvbnN0IGxvY2FsZUlkZW50aWZpZXIgPSBsb2NbMF07XHJcbiAgICAgIHRoaXMubG9jYWxlc1tsb2NhbGVJZGVudGlmaWVyXSA9IGxvY1sxXTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZ2V0TG9jYWxlT3B0aW9ucyhsb2NhbGU6IHN0cmluZyk6IElNeU9wdGlvbnMge1xyXG4gICAgaWYgKGxvY2FsZSAmJiB0aGlzLmxvY2FsZXMuaGFzT3duUHJvcGVydHkobG9jYWxlKSkge1xyXG4gICAgICAvLyBVc2VyIGdpdmVuIGxvY2FsZVxyXG4gICAgICByZXR1cm4gdGhpcy5sb2NhbGVzW2xvY2FsZV07XHJcbiAgICB9XHJcbiAgICAvLyBEZWZhdWx0OiBlblxyXG4gICAgcmV0dXJuIHRoaXMubG9jYWxlc1snZW4nXTtcclxuICB9XHJcbn1cclxuIl19