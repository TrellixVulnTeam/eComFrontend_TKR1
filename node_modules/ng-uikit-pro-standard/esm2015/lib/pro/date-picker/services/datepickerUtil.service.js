import { Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
const M = 'm';
const D = 'd';
export class UtilService {
    isDateValid(dateStr, dateFormat, minYear, maxYear, disableUntil, disableSince, disableWeekends, disableDays, disableDateRanges, monthLabels, enableDays) {
        const returnDate = { day: 0, month: 0, year: 0 };
        const daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        if (monthLabels === undefined) {
        }
        const delimeters = this.getDateFormatDelimeters(dateFormat);
        const dateValue = this.getDateValue(dateStr, dateFormat, delimeters);
        const year = this.getNumberByValue(dateValue[0]);
        const month = this.getNumberByValue(dateValue[1]);
        const day = this.getNumberByValue(dateValue[2]);
        if (day !== -1 && month !== -1 && year !== -1) {
            if (year < minYear || year > maxYear || month < 1 || month > 12) {
                return returnDate;
            }
            const date = { year: year, month: month, day: day };
            if (this.isDisabledDay(date, disableUntil, disableSince, disableWeekends, disableDays, disableDateRanges, enableDays)) {
                return returnDate;
            }
            if (year % 400 === 0 || (year % 100 !== 0 && year % 4 === 0)) {
                daysInMonth[1] = 29;
            }
            if (day < 1 || day > daysInMonth[month - 1]) {
                return returnDate;
            }
            // Valid date
            return date;
        }
        return returnDate;
    }
    getDateValue(dateStr, dateFormat, delimeters) {
        let del = delimeters[0];
        if (delimeters[0] !== delimeters[1]) {
            del = delimeters[0] + delimeters[1];
        }
        const re = new RegExp('[' + del + ']');
        const ds = dateStr.split(re);
        const df = dateFormat.split(re);
        const da = [];
        for (let i = 0; i < df.length; i++) {
            if (df[i].indexOf('yy') !== -1) {
                da[0] = { value: ds[i], format: df[i] };
            }
            if (df[i].indexOf(M) !== -1) {
                da[1] = { value: ds[i], format: df[i] };
            }
            if (df[i].indexOf(D) !== -1) {
                da[2] = { value: ds[i], format: df[i] };
            }
        }
        return da;
    }
    getMonthNumberByMonthName(df, monthLabels) {
        if (df.value) {
            for (let key = 1; key <= 12; key++) {
                if (df.value.toLowerCase() === monthLabels[key].toLowerCase()) {
                    return key;
                }
            }
        }
        return -1;
    }
    getNumberByValue(df) {
        if (!/^\d+$/.test(df.value)) {
            return -1;
        }
        let nbr = Number(df.value);
        if ((df.format.length === 1 && df.value.length !== 1 && nbr < 10) ||
            (df.format.length === 1 && df.value.length !== 2 && nbr >= 10)) {
            nbr = -1;
        }
        else if (df.format.length === 2 && df.value.length > 2) {
            nbr = -1;
        }
        return nbr;
    }
    getDateFormatSeparator(dateFormat) {
        return dateFormat.replace(/[dmy]/g, '')[0];
    }
    getDateFormatDelimeters(dateFormat) {
        return dateFormat.match(/[^(dmy)]{1,}/g);
    }
    isMonthLabelValid(monthLabel, monthLabels) {
        for (let key = 1; key <= 12; key++) {
            if (monthLabel.toLowerCase() === monthLabels[key].toLowerCase()) {
                return key;
            }
        }
        return -1;
    }
    isYearLabelValid(yearLabel, minYear, maxYear) {
        if (yearLabel >= minYear && yearLabel <= maxYear) {
            return yearLabel;
        }
        return -1;
    }
    parseDatePartNumber(dateFormat, dateString, datePart) {
        const pos = this.getDatePartIndex(dateFormat, datePart);
        if (pos !== -1) {
            const value = dateString.substring(pos, pos + datePart.length);
            if (!/^\d+$/.test(value)) {
                return -1;
            }
            return parseInt(value, 0);
        }
        return -1;
    }
    parseDatePartMonthName(dateFormat, dateString, datePart, monthLabels) {
        const pos = this.getDatePartIndex(dateFormat, datePart);
        if (pos !== -1) {
            return this.isMonthLabelValid(dateString.substring(pos, pos + datePart.length), monthLabels);
        }
        return -1;
    }
    getDatePartIndex(dateFormat, datePart) {
        return dateFormat.indexOf(datePart);
    }
    parseDefaultMonth(monthString) {
        const month = { monthTxt: '', monthNbr: 0, year: 0 };
        if (monthString !== '') {
            const split = monthString.split(monthString.match(/[^0-9]/)[0]);
            month.monthNbr = split[0].length === 2 ? parseInt(split[0], 0) : parseInt(split[1], 0);
            month.year = split[0].length === 2 ? parseInt(split[1], 0) : parseInt(split[0], 0);
        }
        return month;
    }
    isDisabledDay(date, disableUntil, disableSince, disableWeekends, disableDays, disableDateRanges, enableDays) {
        for (const e of enableDays) {
            if (typeof e === 'number') {
                if (e === this.getDayNumber(date)) {
                    return false;
                }
            }
            else if (e.year === date.year && e.month === date.month && e.day === date.day) {
                return false;
            }
        }
        const dateMs = this.getTimeInMilliseconds(date);
        if (this.isInitializedDate(disableUntil) &&
            dateMs <= this.getTimeInMilliseconds(disableUntil)) {
            return true;
        }
        if (this.isInitializedDate(disableSince) &&
            dateMs >= this.getTimeInMilliseconds(disableSince)) {
            return true;
        }
        if (disableWeekends) {
            const dn = this.getDayNumber(date);
            if (dn === 0 || dn === 6) {
                return true;
            }
        }
        for (const d of disableDays) {
            if (typeof d === 'number') {
                if (this.getDayNumber(date) === d) {
                    return true;
                }
            }
            else if (d.year === date.year && d.month === date.month && d.day === date.day) {
                return true;
            }
        }
        for (const d of disableDateRanges) {
            if (this.isInitializedDate(d.begin) &&
                this.isInitializedDate(d.end) &&
                dateMs >= this.getTimeInMilliseconds(d.begin) &&
                dateMs <= this.getTimeInMilliseconds(d.end)) {
                return true;
            }
        }
        return false;
    }
    isMarkedDate(date, markedDates, markWeekends) {
        for (const md of markedDates) {
            for (const d of md.dates) {
                if (d.year === date.year && d.month === date.month && d.day === date.day) {
                    return { marked: true, color: md.color };
                }
            }
        }
        if (markWeekends && markWeekends.marked) {
            const dayNbr = this.getDayNumber(date);
            if (dayNbr === 0 || dayNbr === 6) {
                return { marked: true, color: markWeekends.color };
            }
        }
        return { marked: false, color: '' };
    }
    getWeekNumber(date) {
        const d = new Date(date.year, date.month - 1, date.day, 0, 0, 0, 0);
        d.setDate(d.getDate() + (d.getDay() === 0 ? -3 : 4 - d.getDay()));
        return Math.round((d.getTime() - new Date(d.getFullYear(), 0, 4).getTime()) / 86400000 / 7) + 1;
    }
    isMonthDisabledByDisableUntil(date, disableUntil) {
        return (this.isInitializedDate(disableUntil) &&
            this.getTimeInMilliseconds(date) <= this.getTimeInMilliseconds(disableUntil));
    }
    isMonthDisabledByDisableSince(date, disableSince) {
        return (this.isInitializedDate(disableSince) &&
            this.getTimeInMilliseconds(date) >= this.getTimeInMilliseconds(disableSince));
    }
    isInitializedDate(date) {
        return date.year !== 0 && date.month !== 0 && date.day !== 0;
    }
    getTimeInMilliseconds(date) {
        return new Date(date.year, date.month - 1, date.day, 0, 0, 0, 0).getTime();
    }
    getDayNumber(date) {
        const d = new Date(date.year, date.month - 1, date.day, 0, 0, 0, 0);
        return d.getDay();
    }
}
UtilService.ɵfac = function UtilService_Factory(t) { return new (t || UtilService)(); };
UtilService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: UtilService, factory: UtilService.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(UtilService, [{
        type: Injectable
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,