import { Directive, Input, forwardRef, ElementRef, EventEmitter, HostListener, } from '@angular/core';
import { MdbTimePickerComponent } from './timepicker.component';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
export const MDB_TIMEPICKER_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => MdbTimePickerDirective),
    multi: true,
};
export class MdbTimePickerDirective {
    constructor(el) {
        this.el = el;
        this._valueChange = new EventEmitter();
        this.onChange = () => { };
        this.onTouched = () => { };
    }
    set value(value) {
        this._value = value;
        this._valueChange.emit(this._value);
        this.el.nativeElement.value = value;
    }
    get value() {
        return this._value;
    }
    handleInput(event) {
        this.onChange(event.target.value);
        this._valueChange.emit(event.target.value);
    }
    ngOnInit() {
        this.mdbTimePicker.setInput(this);
        this.mdbTimePicker._selectionChange$.subscribe(selectedValue => {
            this.value = selectedValue;
            this.onChange(selectedValue);
            this.onTouched();
        });
    }
    writeValue(value) {
        if (value || value === '') {
            this.el.nativeElement.value = value;
            this.mdbTimePicker._selectionChange$.next(this._value);
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
}
MdbTimePickerDirective.ɵfac = function MdbTimePickerDirective_Factory(t) { return new (t || MdbTimePickerDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
MdbTimePickerDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MdbTimePickerDirective, selectors: [["", "mdbTimePicker", ""]], hostBindings: function MdbTimePickerDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("blur", function MdbTimePickerDirective_blur_HostBindingHandler($event) { return ctx.onTouched($event); })("change", function MdbTimePickerDirective_change_HostBindingHandler($event) { return ctx.onChange($event.target.value); })("input", function MdbTimePickerDirective_input_HostBindingHandler($event) { return ctx.handleInput($event); });
    } }, inputs: { value: "value", mdbTimePicker: "mdbTimePicker" }, features: [ɵngcc0.ɵɵProvidersFeature([MDB_TIMEPICKER_VALUE_ACCESSOR])] });
MdbTimePickerDirective.ctorParameters = () => [
    { type: ElementRef }
];
MdbTimePickerDirective.propDecorators = {
    mdbTimePicker: [{ type: Input }],
    value: [{ type: Input }],
    handleInput: [{ type: HostListener, args: ['input', ['$event'],] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MdbTimePickerDirective, [{
        type: Directive,
        args: [{
                selector: '[mdbTimePicker]',
                // tslint:disable-next-line: no-host-metadata-property
                host: { '(blur)': 'onTouched($event)', '(change)': 'onChange($event.target.value)' },
                providers: [MDB_TIMEPICKER_VALUE_ACCESSOR]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { value: [{
            type: Input
        }], handleInput: [{
            type: HostListener,
            args: ['input', ['$event']]
        }], mdbTimePicker: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZXBpY2tlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLXVpa2l0LXByby1zdGFuZGFyZC9zcmMvbGliL3Byby90aW1lcGlja2VyL3RpbWVwaWNrZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsS0FBSyxFQUNMLFVBQVUsRUFDVixVQUFVLEVBQ1YsWUFBWSxFQUNaLFlBQVksR0FFYixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNoRSxPQUFPLEVBQXdCLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBRXpFLE1BQU0sQ0FBQyxNQUFNLDZCQUE2QixHQUFRO0FBQ2xELElBQUUsT0FBTyxFQUFFLGlCQUFpQjtBQUM1QixJQUFFLGtEQUFrRDtBQUNwRCxJQUFFLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsc0JBQXNCLENBQUM7QUFDdkQsSUFBRSxLQUFLLEVBQUUsSUFBSTtBQUNiLENBQUMsQ0FBQztBQVFGLE1BQU0sT0FBTyxzQkFBc0I7QUFBRyxJQWdCcEMsWUFBb0IsRUFBYztBQUFJLFFBQWxCLE9BQUUsR0FBRixFQUFFLENBQVk7QUFBQyxRQUZuQyxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7QUFDNUMsUUFrQkUsYUFBUSxHQUF5QixHQUFHLEVBQUUsR0FBRSxDQUFDLENBQUM7QUFDNUMsUUFDRSxjQUFTLEdBQUcsR0FBRyxFQUFFLEdBQUUsQ0FBQyxDQUFDO0FBQ3ZCLElBcEJ1QyxDQUFDO0FBQ3hDLElBZEUsSUFDSSxLQUFLLENBQUMsS0FBYTtBQUN6QixRQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0FBQ3hCLFFBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3hDLFFBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztBQUN4QyxJQUFFLENBQUM7QUFDSCxJQUNFLElBQUksS0FBSztBQUFLLFFBQ1osT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQ3ZCLElBQUUsQ0FBQztBQUNILElBTUUsV0FBVyxDQUFDLEtBQVU7QUFDeEIsUUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDdEMsUUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQy9DLElBQUUsQ0FBQztBQUNILElBQ0UsUUFBUTtBQUNWLFFBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDdEMsUUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsRUFBRTtBQUNuRSxZQUFNLElBQUksQ0FBQyxLQUFLLEdBQUcsYUFBYSxDQUFDO0FBQ2pDLFlBQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNuQyxZQUFNLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUN2QixRQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ1AsSUFBRSxDQUFDO0FBQ0gsSUFLRSxVQUFVLENBQUMsS0FBVTtBQUFJLFFBQ3ZCLElBQUksS0FBSyxJQUFJLEtBQUssS0FBSyxFQUFFLEVBQUU7QUFDL0IsWUFBTSxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQzFDLFlBQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzdELFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxJQUNFLGdCQUFnQixDQUFDLEVBQU87QUFBSSxRQUMxQixJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztBQUN2QixJQUFFLENBQUM7QUFDSCxJQUNFLGlCQUFpQixDQUFDLEVBQU87QUFBSSxRQUMzQixJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztBQUN4QixJQUFFLENBQUM7QUFDSDtrREF6REMsU0FBUyxTQUFDLGtCQUNULFFBQVEsRUFBRSxpQkFBaUIsa0JBQzNCO29CQUFzRCxpQkFDdEQsSUFBSSxFQUFFLEVBQUUsUUFBUSxFQUFFLG1CQUFtQixFQUFFLFVBQVUsRUFBRSwrQkFBK0IsRUFBRSxrQkFDcEYsU0FBUyxFQUFFLENBQUMsNkJBQTZCLENBQUMsZUFDM0M7OytJQUNJO0FBQUM7QUFBZ0QsWUFyQnBELFVBQVU7QUFDWDtBQUFHO0FBR0EsNEJBa0JELEtBQUs7QUFBSyxvQkFFVixLQUFLO0FBQ04sMEJBY0MsWUFBWSxTQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQztBQUMvQjs7Ozs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBJbnB1dCxcbiAgZm9yd2FyZFJlZixcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBIb3N0TGlzdGVuZXIsXG4gIE9uSW5pdCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNZGJUaW1lUGlja2VyQ29tcG9uZW50IH0gZnJvbSAnLi90aW1lcGlja2VyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmV4cG9ydCBjb25zdCBNREJfVElNRVBJQ0tFUl9WQUxVRV9BQ0NFU1NPUjogYW55ID0ge1xuICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby11c2UtYmVmb3JlLWRlY2xhcmVcbiAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTWRiVGltZVBpY2tlckRpcmVjdGl2ZSksXG4gIG11bHRpOiB0cnVlLFxufTtcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW21kYlRpbWVQaWNrZXJdJyxcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1ob3N0LW1ldGFkYXRhLXByb3BlcnR5XG4gIGhvc3Q6IHsgJyhibHVyKSc6ICdvblRvdWNoZWQoJGV2ZW50KScsICcoY2hhbmdlKSc6ICdvbkNoYW5nZSgkZXZlbnQudGFyZ2V0LnZhbHVlKScgfSxcbiAgcHJvdmlkZXJzOiBbTURCX1RJTUVQSUNLRVJfVkFMVUVfQUNDRVNTT1JdLFxufSlcbmV4cG9ydCBjbGFzcyBNZGJUaW1lUGlja2VyRGlyZWN0aXZlIGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE9uSW5pdCB7XG4gIEBJbnB1dCgpIG1kYlRpbWVQaWNrZXI6IE1kYlRpbWVQaWNrZXJDb21wb25lbnQ7XG5cbiAgQElucHV0KClcbiAgc2V0IHZhbHVlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMuX3ZhbHVlQ2hhbmdlLmVtaXQodGhpcy5fdmFsdWUpO1xuICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC52YWx1ZSA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0IHZhbHVlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG4gIHByaXZhdGUgX3ZhbHVlOiBzdHJpbmc7XG4gIF92YWx1ZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYpIHt9XG5cbiAgQEhvc3RMaXN0ZW5lcignaW5wdXQnLCBbJyRldmVudCddKVxuICBoYW5kbGVJbnB1dChldmVudDogYW55KSB7XG4gICAgdGhpcy5vbkNoYW5nZShldmVudC50YXJnZXQudmFsdWUpO1xuICAgIHRoaXMuX3ZhbHVlQ2hhbmdlLmVtaXQoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMubWRiVGltZVBpY2tlci5zZXRJbnB1dCh0aGlzKTtcbiAgICB0aGlzLm1kYlRpbWVQaWNrZXIuX3NlbGVjdGlvbkNoYW5nZSQuc3Vic2NyaWJlKHNlbGVjdGVkVmFsdWUgPT4ge1xuICAgICAgdGhpcy52YWx1ZSA9IHNlbGVjdGVkVmFsdWU7XG4gICAgICB0aGlzLm9uQ2hhbmdlKHNlbGVjdGVkVmFsdWUpO1xuICAgICAgdGhpcy5vblRvdWNoZWQoKTtcbiAgICB9KTtcbiAgfVxuXG4gIG9uQ2hhbmdlOiAodmFsdWU6IGFueSkgPT4gdm9pZCA9ICgpID0+IHt9O1xuXG4gIG9uVG91Y2hlZCA9ICgpID0+IHt9O1xuXG4gIHdyaXRlVmFsdWUodmFsdWU6IGFueSk6IHZvaWQge1xuICAgIGlmICh2YWx1ZSB8fCB2YWx1ZSA9PT0gJycpIHtcbiAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC52YWx1ZSA9IHZhbHVlO1xuICAgICAgdGhpcy5tZGJUaW1lUGlja2VyLl9zZWxlY3Rpb25DaGFuZ2UkLm5leHQodGhpcy5fdmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSk6IHZvaWQge1xuICAgIHRoaXMub25DaGFuZ2UgPSBmbjtcbiAgfVxuXG4gIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLm9uVG91Y2hlZCA9IGZuO1xuICB9XG59XG4iXX0=