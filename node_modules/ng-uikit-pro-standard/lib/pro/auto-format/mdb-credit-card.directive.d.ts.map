{"version":3,"file":"mdb-credit-card.directive.d.ts","sources":["../../../../../projects/ng-uikit-pro-standard/src/lib/pro/auto-format/mdb-credit-card.directive.ts"],"names":[],"mappings":";AAEA,MAAM,WAAW,UAAU;AAC3B,IAAE,IAAI,EAAE,MAAM,CAAC;AACf,IAAE,QAAQ,EAAE,MAAM,CAAC;AACnB,IAAE,EAAE,EAAE,MAAM,CAAC;AACb,IAAE,OAAO,EAAE,MAAM,CAAC;AAClB,IAAE,SAAS,EAAE,MAAM,CAAC;AACpB,IAAE,SAAS,EAAE,MAAM,CAAC;AACpB,CAAC;AAED,qBAIa,sBAAsB;AACnC,IAAE,OAAO,CAAC,eAAe,CAAgB;AACzC,IAAE,QAAQ,EAAE,MAAM,CAAC;AACnB,IAAE,YAAY,EAAE,MAAM,CAAC;AACvB,IACE,OAAO,CAAC,WAAW,CAOjB;AACJ,IACE,OAAO,CAAC,KAAK,CAiDX;AACJ,IACE,IACI,eAAe,IAGQ,UAAU,EAAE,CADtC;AACH,IAAE,IAAI,eAAe,CAAC,KAAK,EAAE,UAAU,EAAE,EAGtC;AACH,IAAE,OAAO,CAAC,gBAAgB,CAAe;AACzC,IACE,IACI,SAAS,IAGY,MAAM,CAD9B;AACH,IAAE,IAAI,SAAS,CAAC,SAAS,EAAE,MAAM,EAE9B;AACH,IAAE,OAAO,CAAC,UAAU,CAAO;AAC3B;AACkB,IAEe,SAAS,EAAE,MAAM,CAAC;AACnD,IAEE,OAAO,CAAC,KAAK,EAAE,GAAG;AACf,IAGH,OAAO,CAAC,WAAW;AAAE,IAMrB,OAAO,CAAC,iBAAiB;AAAE,IA+B3B,OAAO,CAAC,eAAe;AAAE,IAIzB,OAAO,CAAC,kBAAkB;AAAE,IAI5B,OAAO,CAAC,OAAO;AAAE,IAIjB,OAAO,CAAC,sBAAsB;AAAE,IAKhC,OAAO,CAAC,gBAAgB;AAAE,IAYnB,QAAQ,CAAC,QAAQ,EAAE,UAAU,EAAE;;;AACnC,CAIJ;AACD","sourcesContent":["import { Directive, HostListener, Input, HostBinding } from '@angular/core';\n\nexport interface CreditCard {\n  name: string;\n  fullName: string;\n  re: RegExp;\n  pattern: RegExp;\n  maxLength: number;\n  cvvLength: number;\n}\n\n@Directive({\n  selector: '[mdbCreditCard]',\n  exportAs: 'mdbCreditCard',\n})\nexport class MdbCreditCardDirective {\n  private standardPattern = /(\\d{1,4})/g;\n  cardName: string;\n  cardFullName: string;\n\n  private defaultCard: CreditCard = {\n    name: '',\n    fullName: '',\n    re: /\\d{0,16}/,\n    pattern: this.standardPattern,\n    maxLength: 19,\n    cvvLength: 3,\n  };\n\n  private cards: CreditCard[] = [\n    {\n      name: 'visa',\n      fullName: 'Visa',\n      re: /^4\\d{0,15}/,\n      pattern: this.standardPattern,\n      maxLength: 16,\n      cvvLength: 3,\n    },\n    {\n      name: 'mastercard',\n      fullName: 'Mastercard',\n      re: /^(5[1-5]\\d{0,2}|22[2-9]\\d{0,1}|2[3-7]\\d{0,2})\\d{0,12}/,\n      pattern: this.standardPattern,\n      maxLength: 16,\n      cvvLength: 3,\n    },\n    {\n      name: 'amex',\n      fullName: 'American Express',\n      re: /^3[47]\\d{0,13}/,\n      pattern: /(\\d{1,4})(\\d{1,6})?(\\d{1,5})?/,\n      maxLength: 15,\n      cvvLength: 4,\n    },\n    {\n      name: 'jcb',\n      fullName: 'JCB',\n      re: /^(?:35\\d{0,2})\\d{0,12}/,\n      pattern: this.standardPattern,\n      maxLength: 16,\n      cvvLength: 3,\n    },\n    {\n      name: 'discover',\n      fullName: 'Discover',\n      re: /^(?:6011|65\\d{0,2}|64[4-9]\\d?)\\d{0,12}/,\n      pattern: this.standardPattern,\n      maxLength: 16,\n      cvvLength: 3,\n    },\n    {\n      name: 'diners-club',\n      fullName: 'Diners Club',\n      re: /^3(?:0([0-5]|9)|[689]\\d?)\\d{0,11}/,\n      pattern: this.standardPattern,\n      maxLength: 14,\n      cvvLength: 3,\n    },\n  ];\n\n  @Input()\n  get additionalCards() {\n    return this._additionalCards;\n  }\n  set additionalCards(cards: CreditCard[]) {\n    this._additionalCards = cards;\n    this.addCards(cards);\n  }\n  private _additionalCards: CreditCard[];\n\n  @Input()\n  get separator() {\n    return this._separator;\n  }\n  set separator(separator: string) {\n    this._separator = separator;\n  }\n  private _separator = ' ';\n\n  constructor() {}\n\n  @HostBinding('attr.maxLength') maxLength: string;\n\n  @HostListener('input', ['$event'])\n  onInput(event: any) {\n    this.formatInput(event);\n  }\n\n  private formatInput(event: any) {\n    const input = event.target.value;\n    const formattedInput = this.getFormattedInput(input);\n    event.target.value = formattedInput;\n  }\n\n  private getFormattedInput(value: string) {\n    value = this.removeNonDigits(value);\n    const card = this.findCardByNumber(value);\n\n    this.updateCurrentCardNames(card.name, card.fullName);\n\n    let cardNumMaxLength: number;\n\n    if (this.hasStandardPattern(card)) {\n      const matches: RegExpMatchArray | null = value.match(card.pattern);\n\n      if (matches === null) {\n        return value;\n      }\n\n      cardNumMaxLength = card.maxLength + matches.length - 1;\n      this.maxLength = cardNumMaxLength.toString();\n      return matches.join(this.separator);\n    } else {\n      const results: RegExpExecArray | null = card.pattern.exec(value);\n\n      if (results === null) {\n        return value;\n      }\n      results.shift();\n      cardNumMaxLength = card.maxLength + results.length - 1;\n      this.maxLength = cardNumMaxLength.toString();\n      return results.filter(this.isMatch).join(this.separator);\n    }\n  }\n\n  private removeNonDigits(value: string) {\n    return value.replace(/\\D/g, '');\n  }\n\n  private hasStandardPattern(card: CreditCard) {\n    return card.pattern.toString() === this.standardPattern.toString();\n  }\n\n  private isMatch(match: string) {\n    return match !== undefined;\n  }\n\n  private updateCurrentCardNames(name: string, fullName: string) {\n    this.cardName = name;\n    this.cardFullName = fullName;\n  }\n\n  private findCardByNumber(value: string) {\n    const cardType = this.cards.find(card => {\n      return card.re.test(value);\n    });\n\n    if (!cardType) {\n      return this.defaultCard;\n    }\n\n    return cardType;\n  }\n\n  public addCards(newCards: CreditCard[]) {\n    newCards.forEach(card => {\n      this.cards.push(card);\n    });\n  }\n}\n"]}