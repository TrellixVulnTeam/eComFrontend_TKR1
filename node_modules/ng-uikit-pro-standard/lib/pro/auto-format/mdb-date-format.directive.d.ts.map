{"version":3,"file":"mdb-date-format.directive.d.ts","sources":["../../../../../projects/ng-uikit-pro-standard/src/lib/pro/auto-format/mdb-date-format.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EAAkC,MAAM,EAAE,MAAM,eAAe,CAAC;;AAEvE,qBAGa,sBAAuB,YAAW,MAAM;AACrD,IAAE,YAAY,EAAE,MAAM,CAAC;AACvB,IAAE,gBAAgB,EAAE,MAAM,CAAC;AAC3B,IACW,SAAS,SAAO;AAC3B,IAAW,MAAM,WAAwB;AACzC,IAGE,OAAO,CAAC,KAAK,EAAE,GAAG;AACf,IAKH,QAAQ;AACL,IAIH,mBAAmB;AAChB,IAGH,eAAe;AACZ,IAOH,gBAAgB,CAAC,IAAI,EAAE,MAAM;AACxB,IASL,YAAY,CAAC,IAAI,EAAE,MAAM,GAAG,MAAM,EAAE;AAAE,IAsBtC,SAAS,CAAC,KAAK,EAAE,MAAM;AAClB,IAGL,eAAe,CAAC,QAAQ,EAAE,GAAG,EAAE,KAAK,EAAE,MAAM;AAC1C,IAaF,eAAe,CAAC,KAAK,EAAE,MAAM;AACxB,IAUL,iBAAiB,CAAC,KAAK,EAAE,MAAM;;;AAC1B,CAaN;AACD","sourcesContent":["import { Directive, HostListener, Input, OnInit } from '@angular/core';\n\n@Directive({\n  selector: '[mdbDateFormat]',\n})\nexport class MdbDateFormatDirective implements OnInit {\n  resultLength: number;\n  separatorsNumber: number;\n\n  @Input() separator = '/';\n  @Input() format = ['dd', 'mm', 'yyyy'];\n\n  @HostListener('input', ['$event'])\n  @HostListener('paste', ['$event'])\n  onInput(event: any) {\n    const currentValue = event.target.value;\n    const newValue = this.getFormattedDate(currentValue);\n    event.target.value = newValue;\n  }\n\n  ngOnInit() {\n    this.setSeparatorsNumber();\n    this.setResultLength();\n  }\n\n  setSeparatorsNumber() {\n    this.separatorsNumber = this.format.length - 1;\n  }\n\n  setResultLength() {\n    let resLength = 0;\n    this.format.forEach(value => {\n      resLength += value.length;\n    });\n    this.resultLength = resLength + this.separatorsNumber;\n  }\n\n  getFormattedDate(date: string) {\n    const dateParts = this.getDateParts(date);\n\n    const result = dateParts.map((part, index) => {\n      return this.formatDateParts(part, index);\n    });\n\n    return result.join(this.separator).slice(0, this.resultLength);\n  }\n\n  getDateParts(date: string): string[] {\n    date = this.getDigits(date).slice(0, this.resultLength - this.separatorsNumber);\n    const parts: string[] = [];\n    const partsIndex = {\n      first: this.format[0].length,\n      mid: this.format[0].length + this.format[1].length,\n      last: this.resultLength,\n    };\n\n    parts[0] = date.slice(0, partsIndex.first);\n\n    if (date.length > partsIndex.first) {\n      parts[1] = date.slice(partsIndex.first, partsIndex.mid);\n    }\n\n    if (date.length > partsIndex.mid) {\n      parts[2] = date.slice(partsIndex.mid, partsIndex.last);\n    }\n\n    return parts;\n  }\n\n  getDigits(value: string) {\n    return value.replace(/\\D/g, '');\n  }\n\n  formatDateParts(datePart: any, index: number) {\n    switch (this.format[index]) {\n      case 'dd':\n        datePart = this.getFormattedDay(datePart);\n        break;\n\n      case 'mm':\n        datePart = this.getFormattedMonth(datePart);\n        break;\n    }\n\n    return datePart;\n  }\n\n  getFormattedDay(value: string) {\n    const dayFirstNum = parseInt(value.charAt(0), 10);\n    if (value) {\n      if (dayFirstNum > 3 && dayFirstNum !== 0) {\n        return '0' + value.charAt(0);\n      } else {\n        return value;\n      }\n    }\n  }\n\n  getFormattedMonth(value: string) {\n    const monthFirstNum = parseInt(value.charAt(0), 10);\n    const monthNum = parseInt(value, 10);\n\n    if (value) {\n      if (monthFirstNum > 1 && monthFirstNum !== 0) {\n        return '0' + value.charAt(0);\n      } else if (monthNum > 12) {\n        return '12';\n      } else {\n        return value;\n      }\n    }\n  }\n}\n"]}