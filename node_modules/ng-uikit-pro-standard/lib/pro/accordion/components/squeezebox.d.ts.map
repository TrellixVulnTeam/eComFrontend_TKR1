{"version":3,"file":"squeezebox.d.ts","sources":["../../../../../../projects/ng-uikit-pro-standard/src/lib/pro/accordion/components/squeezebox.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,gBAAgB,EAIhB,SAAS,EACT,MAAM,EACN,SAAS,EAGV,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,eAAe,EAAE,MAAM,WAAW,CAAC;AAC5C,OAAO,EAAE,mBAAmB,EAAE,MAAM,0BAA0B,CAAC;;AAG/D,qBASa,mBAAoB,YAAW,MAAM,EAAE,gBAAgB,EAAE,SAAS;AAC/E,IAgBc,OAAO,CAAC,gBAAgB;AAAE,IAhBtC,OAAO,CAAC,YAAY,CAAe;AACrC,IACE,IACI,QAAQ,IAGQ,OAAO,CAD1B;AACH,IAAE,IAAI,QAAQ,CAAC,KAAK,EAAE,OAAO,EAG1B;AACH,IACW,UAAU,UAAQ;AAC7B,IAAE,OAAO,CAAC,SAAS,CAAQ;AAC3B,IACoC,KAAK,EAAE,SAAS,CAAC,eAAe,CAAC,CAAC;AACtE,gBACsB,gBAAgB,EAAE,mBAAmB;AAAG,IAE5D,QAAQ;AACL,IAGH,kBAAkB,IAAI,IAAI;AAAE,IAkB5B,WAAW;;;AACR,CAIJ;AACD","sourcesContent":["import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  Input,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { SBItemComponent } from './sb-item';\nimport { MdbAccordionService } from '../mdb-accordion.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  exportAs: 'squeezebox',\n  selector: 'mdb-squeezebox, mdb-accordion',\n  templateUrl: 'squeezebox.html',\n  styleUrls: ['./../accordion-module.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [MdbAccordionService],\n})\nexport class SqueezeBoxComponent implements OnInit, AfterContentInit, OnDestroy {\n  private itemsChanges: Subscription;\n\n  @Input()\n  get multiple() {\n    return this._multiple;\n  }\n  set multiple(value: boolean) {\n    this._multiple = value;\n    this.accordionService.updateMultipleState(value);\n  }\n\n  @Input() autoExpand = true;\n  private _multiple = true;\n\n  @ContentChildren(SBItemComponent) items: QueryList<SBItemComponent>;\n\n  constructor(private accordionService: MdbAccordionService) {}\n\n  ngOnInit() {\n    this.accordionService.updateMultipleState(this.multiple);\n  }\n\n  ngAfterContentInit(): void {\n    if (!this.multiple) {\n      this.items.forEach((el: any) => {\n        const collapsed = el.collapsed ? true : false;\n        el.applyToggle(collapsed);\n        el.autoExpand = this.autoExpand;\n      });\n    }\n\n    this.itemsChanges = this.items.changes.subscribe((accordionItems: any) => {\n      this.items = accordionItems;\n      const accordionItemsArray = accordionItems.toArray();\n      this.accordionService.updateItemsArray(accordionItemsArray);\n    });\n\n    this.items.forEach((item: any) => this.accordionService.addItem(item));\n  }\n\n  ngOnDestroy() {\n    if (this.itemsChanges) {\n      this.itemsChanges.unsubscribe();\n    }\n  }\n}\n"]}