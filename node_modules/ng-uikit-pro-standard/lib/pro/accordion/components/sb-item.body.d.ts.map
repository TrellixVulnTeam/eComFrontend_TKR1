{"version":3,"file":"sb-item.body.d.ts","sources":["../../../../../../projects/ng-uikit-pro-standard/src/lib/pro/accordion/components/sb-item.body.ts"],"names":[],"mappings":"AAAA,OAAO,EAEL,UAAU,EAIV,SAAS,EAET,YAAY,EAEZ,iBAAiB,EACjB,gBAAgB,EAEhB,SAAS,EACV,MAAM,eAAe,CAAC;AAEvB,OAAO,EAAE,kBAAkB,EAAE,MAAM,EAAiB,MAAM,iBAAiB,CAAC;;AAI5E,MAAM,WAAW,wBAAwB;AACzC,IAAE,KAAK,EAAE,MAAM,CAAC;AAChB,IAAE,WAAW,EAAE,UAAU,CAAC;AAC1B,CAAC;AAED,qBAaa,mBAAoB,YAAW,gBAAgB,EAAE,SAAS;AACvE,IAsBW,EAAE,EAAE,UAAU;AACzB,IAAI,OAAO,CAAC,MAAM;AAAE,IACJ,OAAO,CAAC,MAAM;AAAE,IAxBrB,WAAW,EAAE,MAAM,CAAC;AAC/B,IACY,oBAAoB,EAAE,YAAY,CAAC,wBAAwB,CAAC,CAElE;AACN,IAA8D,WAAW,EAAE,SAAS,CAChF,kBAAkB,CACnB,CAAC;AACJ,IACuC,MAAM,EAAE,UAAU,CAAC;AAC1D,IACS,UAAU,EAAE,OAAO,CAAC;AAC7B,IAAS,SAAS,EAAE,OAAO,CAAC;AAC5B,IAAS,EAAE,SAAoB;AAC/B,IAAS,MAAM,SAAO;AACtB,IACE,OAAO,CAAC,SAAS,CAAgC;AACnD,IACE,oBAAoB,SAAe;AACrC,IAAE,cAAc,SAAM;AACtB,gBAEW,EAAE,EAAE,UAAU,EACb,MAAM,EAAE,iBAAiB,EACb,MAAM,EAAE,MAAM;AACpC,IAEA,MAAM,CAAC,SAAS,EAAE,OAAO;AACtB,IASH,iBAAiB;AACd,IAMH,uBAAuB;AACpB,IAsCH,kBAAkB;AACf,IAkBH,WAAW;;;AACR,CAGJ;AACD","sourcesContent":["import {\n  Component,\n  ElementRef,\n  ViewChild,\n  Input,\n  ContentChildren,\n  QueryList,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  AfterContentInit,\n  Optional,\n  OnDestroy,\n} from '@angular/core';\nimport { state, style, trigger, transition, animate } from '@angular/animations';\nimport { RouterLinkWithHref, Router, NavigationEnd } from '@angular/router';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\nexport interface IAccordionAnimationState {\n  state: string;\n  accordionEl: ElementRef;\n}\n\n@Component({\n  exportAs: 'sbItemBody',\n  selector: 'mdb-item-body, mdb-accordion-item-body',\n  templateUrl: 'sb-item.body.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('expandBody', [\n      state('collapsed', style({ height: '0px', visibility: 'hidden' })),\n      state('expanded', style({ height: '*', visibility: 'visible' })),\n      transition('expanded <=> collapsed', animate('500ms ease')),\n    ]),\n  ],\n})\nexport class SBItemBodyComponent implements AfterContentInit, OnDestroy {\n  @Input() customClass: string;\n\n  @Output() animationStateChange: EventEmitter<IAccordionAnimationState> = new EventEmitter<\n    IAccordionAnimationState\n  >();\n  @ContentChildren(RouterLinkWithHref, { descendants: true }) routerLinks: QueryList<\n    RouterLinkWithHref\n  >;\n\n  @ViewChild('body', { static: true }) bodyEl: ElementRef;\n\n  public autoExpand: boolean;\n  public collapsed: boolean;\n  public id = `mdb-accordion-`;\n  public height = '0';\n\n  private _destroy$: Subject<void> = new Subject();\n\n  expandAnimationState = 'collapsed';\n  ariaLabelledBy = '';\n\n  constructor(\n    public el: ElementRef,\n    private _cdRef: ChangeDetectorRef,\n    @Optional() private router: Router\n  ) {}\n\n  toggle(collapsed: boolean) {\n    setTimeout(() => {\n      collapsed\n        ? (this.expandAnimationState = 'collapsed')\n        : (this.expandAnimationState = 'expanded');\n\n      this._cdRef.markForCheck();\n    }, 0);\n  }\n\n  animationCallback() {\n    this.animationStateChange.emit({\n      state: this.expandAnimationState,\n      accordionEl: this.el.nativeElement.parentElement.parentElement,\n    });\n  }\n\n  openSidenavOnActiveLink() {\n    if (typeof window !== 'undefined' && window) {\n      const pathStrategyUrl = window.location.pathname;\n      const hashStrategyUrl = window.location.hash;\n      const activeLink = this.routerLinks.find((link: any) => {\n        const params = link.href.split('?')[1];\n\n        if (params) {\n          return (\n            link.href.split('?')[0] === pathStrategyUrl ||\n            link.href.split('?')[0] === hashStrategyUrl\n          );\n        } else {\n          return link.href === pathStrategyUrl || link.href === hashStrategyUrl;\n        }\n      });\n      const sbItem = this.el.nativeElement.parentNode;\n      if (activeLink) {\n        setTimeout(() => {\n          this.expandAnimationState = 'expanded';\n          if (sbItem) {\n            sbItem.classList.add('active');\n            sbItem.classList.remove('is-collapsed');\n          }\n          this._cdRef.markForCheck();\n        }, 10);\n      } else if (this.expandAnimationState !== 'collapsed' && activeLink) {\n        setTimeout(() => {\n          this.expandAnimationState = 'collapsed';\n          if (sbItem) {\n            sbItem.classList.remove('active');\n            sbItem.classList.add('is-collapsed');\n          }\n          this._cdRef.markForCheck();\n        }, 10);\n      }\n    }\n  }\n\n  ngAfterContentInit() {\n    setTimeout(() => {\n      this.collapsed\n        ? (this.expandAnimationState = 'collapsed')\n        : (this.expandAnimationState = 'expanded');\n\n      if (this.router && this.autoExpand) {\n        this.router.events\n          .pipe(\n            takeUntil(this._destroy$),\n            filter(event => event instanceof NavigationEnd)\n          )\n          .subscribe(() => {\n            this.openSidenavOnActiveLink();\n          });\n      }\n    }, 0);\n  }\n\n  ngOnDestroy() {\n    this._destroy$.next();\n    this._destroy$.unsubscribe();\n  }\n}\n"]}