{"version":3,"file":"timepicker.directive.d.ts","sources":["../../../../../projects/ng-uikit-pro-standard/src/lib/pro/timepicker/timepicker.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EAIL,UAAU,EACV,YAAY,EAEZ,MAAM,EACP,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,sBAAsB,EAAE,MAAM,wBAAwB,CAAC;AAChE,OAAO,EAAE,oBAAoB,EAAqB,MAAM,gBAAgB,CAAC;;AAEzE,eAAO,MAAM,6BAA6B,EAAE,GAK3C,CAAC;AAEF,qBAMa,sBAAuB,YAAW,oBAAoB,EAAE,MAAM;AAC3E,IAec,OAAO,CAAC,EAAE;AAAE,IAff,aAAa,EAAE,sBAAsB,CAAC;AACjD,IACE,IACI,KAAK,CAAC,KAAK,EAAE,MAAM,EAItB;AACH,IACE,IAAI,KAAK,IAAI,MAAM,CAElB;AACH,IAAE,OAAO,CAAC,MAAM,CAAS;AACzB,IAAE,YAAY,uBAA8B;AAC5C,gBACsB,EAAE,EAAE,UAAU;AAAG,IAGrC,WAAW,CAAC,KAAK,EAAE,GAAG;AACnB,IAIH,QAAQ;AACL,IAQH,QAAQ,EAAE,CAAC,KAAK,EAAE,GAAG,KAAK,IAAI,CAAY;AAC5C,IACE,SAAS,aAAY;AACvB,IACE,UAAU,CAAC,KAAK,EAAE,GAAG,GAAG,IAAI;AAAE,IAO9B,gBAAgB,CAAC,EAAE,EAAE,GAAG,GAAG,IAAI;AAAE,IAIjC,iBAAiB,CAAC,EAAE,EAAE,GAAG,GAAG,IAAI;;;AAAE,CAGnC;AACD","sourcesContent":["import {\n  Directive,\n  Input,\n  forwardRef,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  OnInit,\n} from '@angular/core';\nimport { MdbTimePickerComponent } from './timepicker.component';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const MDB_TIMEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => MdbTimePickerDirective),\n  multi: true,\n};\n\n@Directive({\n  selector: '[mdbTimePicker]',\n  // tslint:disable-next-line: no-host-metadata-property\n  host: { '(blur)': 'onTouched($event)', '(change)': 'onChange($event.target.value)' },\n  providers: [MDB_TIMEPICKER_VALUE_ACCESSOR],\n})\nexport class MdbTimePickerDirective implements ControlValueAccessor, OnInit {\n  @Input() mdbTimePicker: MdbTimePickerComponent;\n\n  @Input()\n  set value(value: string) {\n    this._value = value;\n    this._valueChange.emit(this._value);\n    this.el.nativeElement.value = value;\n  }\n\n  get value(): string {\n    return this._value;\n  }\n  private _value: string;\n  _valueChange = new EventEmitter<string>();\n\n  constructor(private el: ElementRef) {}\n\n  @HostListener('input', ['$event'])\n  handleInput(event: any) {\n    this.onChange(event.target.value);\n    this._valueChange.emit(event.target.value);\n  }\n\n  ngOnInit() {\n    this.mdbTimePicker.setInput(this);\n    this.mdbTimePicker._selectionChange$.subscribe(selectedValue => {\n      this.value = selectedValue;\n      this.onChange(selectedValue);\n      this.onTouched();\n    });\n  }\n\n  onChange: (value: any) => void = () => {};\n\n  onTouched = () => {};\n\n  writeValue(value: any): void {\n    if (value || value === '') {\n      this.el.nativeElement.value = value;\n      this.mdbTimePicker._selectionChange$.next(this._value);\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n}\n"]}