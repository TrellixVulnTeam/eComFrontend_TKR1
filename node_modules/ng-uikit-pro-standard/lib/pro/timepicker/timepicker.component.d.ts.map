{"version":3,"file":"timepicker.component.d.ts","sources":["../../../../../projects/ng-uikit-pro-standard/src/lib/pro/timepicker/timepicker.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAIL,gBAAgB,EAIhB,YAAY,EACZ,SAAS,EACV,MAAM,eAAe,CAAC;AACvB,OAAO,EAAc,OAAO,EAAiB,MAAM,sBAAsB,CAAC;AAM1E,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,YAAY,EAAE,WAAW,EAAE,MAAM,wBAAwB,CAAC;AAC1F,OAAO,EAAE,OAAO,EAAE,MAAM,MAAM,CAAC;;AAE/B,qBAOa,sBAAuB,YAAW,SAAS;AAAG,IAwBvD,OAAO,CAAC,QAAQ;AAAE,IAClB,OAAO,CAAC,IAAI;AAAE,IAxBP,SAAS,UAAS;AAAC,IACnB,WAAW,EAAE,WAAW,CAAW;AAAC,IACpC,WAAW,EAAE,WAAW,CAAW;AAAC,IACpC,GAAG,EAAE,MAAM,CAAC;AAAC,IACb,GAAG,EAAE,MAAM,CAAC;AAAC,IACb,QAAQ,SAAQ;AAAC,IACjB,QAAQ,EAAE,QAAQ,CAAK;AAAC,IACxB,UAAU,UAAQ;AAAC,IAElB,UAAU,EAAE,YAAY,CAAC,MAAM,CAAC,CAA8B;AAAC,IAC/D,MAAM,EAAE,YAAY,CAAC,MAAM,CAAC,CAA8B;AAAC,IAC3D,IAAI,EAAE,YAAY,CAAC,MAAM,CAAC,CAA8B;AAAC,IACzD,IAAI,EAAE,YAAY,CAAC,MAAM,CAAC,CAA8B;AAAC,IAEnE,OAAO,CAAC,MAAM,CAAa;AAAC,IAC5B,OAAO,CAAC,WAAW,CAA8C;AAAC,IAClE,OAAO,CAAC,WAAW,CAAoB;AAAC,IACxC,OAAO,CAAC,OAAO,CAAiD;AAAC,IAC1D,KAAK,EAAE,GAAG,CAAC;AAAC,IAEZ,iBAAiB,kBAAyB;AAAC,gBAGxC,QAAQ,EAAE,OAAO,EACjB,IAAI,EAAE,gBAAgB;AAAG,IAGnC,SAAS,CAAC,iBAAiB;AACzB,IAiBF,SAAS,CAAC,UAAU,CAAC,IAAI,EAAE,GAAG,GAAG,YAAY;AAAE,IA4B/C,IAAI,IAAI,IAAI;AAAE,IAkBd,KAAK,CAAC,WAAW,CAAC,EAAE,OAAO,EAAE,KAAK,CAAC,EAAE,YAAY;AAC/C,IAQF,oBAAoB,CAAC,KAAK,EAAE,YAAY;AACtC,IAGF,oBAAoB,CAAC,KAAK,EAAE,YAAY;AACtC,IAGF,kBAAkB,CAAC,KAAK,EAAE,YAAY;AACpC,IAKF,kBAAkB,CAAC,KAAK,EAAE,YAAY;AACpC,IAGF,SAAS,CAAC,KAAK,EAAE,MAAM;AACrB,IAOF,QAAQ,CAAC,KAAK,EAAE,GAAG;AACjB,IAWF,UAAU,EAAE,CAAC,CAAC,EAAE,GAAG,KAAK,IAAI,CAAY;AAAC,IACzC,WAAW,EAAE,MAAM,IAAI,CAAY;AAAC,IAEpC,gBAAgB,CAAC,EAAE,EAAE,GAAG,GAAG,IAAI;AAAE,IAIjC,iBAAiB,CAAC,EAAE,EAAE,GAAG,GAAG,IAAI;AAAE,IAIlC,OAAO,CAAC,iBAAiB;AAAE,IAc3B,OAAO,CAAC,eAAe;AAAE,IAOzB,OAAO,CAAC,qBAAqB;AAAE,IAsB/B,WAAW;;;AACT,CAEH;AAAC","sourcesContent":["import {\r\n  Component,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ViewContainerRef,\r\n  ComponentRef,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport { OverlayRef, Overlay, OverlayConfig } from '@angular/cdk/overlay';\r\nimport { ComponentPortal } from '@angular/cdk/portal';\r\nimport { merge } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\nimport { ESCAPE } from '../../free/utils/keyboard-navigation';\r\nimport { MdbTimePickerContentComponent } from './timepicker.content';\r\nimport { ClearButton, Rounding, SelectedTime, CloseButton } from './timepicker.interface';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Component({\r\n  template: '',\r\n  selector: 'mdb-timepicker',\r\n  exportAs: 'mdbTimePicker',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MdbTimePickerComponent implements OnDestroy {\r\n  @Input() autoClose = false;\r\n  @Input() clearButton: ClearButton = 'clear';\r\n  @Input() closeButton: CloseButton = 'close';\r\n  @Input() max: string;\r\n  @Input() min: string;\r\n  @Input() okButton = 'ok';\r\n  @Input() rounding: Rounding = 1;\r\n  @Input() twelveHour = true;\r\n\r\n  @Output() timeChange: EventEmitter<object> = new EventEmitter<object>();\r\n  @Output() cancel: EventEmitter<object> = new EventEmitter<object>();\r\n  @Output() done: EventEmitter<object> = new EventEmitter<object>();\r\n  @Output() show: EventEmitter<object> = new EventEmitter<object>();\r\n\r\n  private _value = '12:00AM';\r\n  private _contentRef: ComponentRef<MdbTimePickerContentComponent>;\r\n  private _overlayRef: OverlayRef | null;\r\n  private _portal: ComponentPortal<MdbTimePickerContentComponent>;\r\n  public input: any;\r\n\r\n  public _selectionChange$ = new Subject<string>();\r\n\r\n  constructor(\r\n    private _overlay: Overlay,\r\n    private _vcr: ViewContainerRef // private _cdRef: ChangeDetectorRef\r\n  ) {}\r\n\r\n  protected _patchInputValues() {\r\n    this._contentRef.instance.picker = this;\r\n    this._contentRef.instance.autoClose = this.autoClose;\r\n    this._contentRef.instance.clearButton = this.clearButton;\r\n    this._contentRef.instance.closeButton = this.closeButton;\r\n    this._contentRef.instance.okButton = this.okButton;\r\n    this._contentRef.instance.rounding = this.rounding;\r\n    this._contentRef.instance.twelveHour = this.twelveHour;\r\n    this._contentRef.instance.value = this._timeToObj(this._value);\r\n\r\n    if (this.max) {\r\n      this._contentRef.instance.max = this._timeToObj(this.max);\r\n    }\r\n    if (this.min) {\r\n      this._contentRef.instance.min = this._timeToObj(this.min);\r\n    }\r\n  }\r\n\r\n  protected _timeToObj(time: any): SelectedTime {\r\n    const round = (x: number, roundBy: number) => {\r\n      return x % roundBy < Math.round(roundBy / 2)\r\n        ? x % roundBy === 0\r\n          ? x\r\n          : Math.ceil(x / roundBy) * roundBy\r\n        : Math.floor(x / roundBy) * roundBy;\r\n    };\r\n\r\n    function toString(val: number) {\r\n      return val < 10 ? `0${val}` : `${val}`;\r\n    }\r\n\r\n    const hour = Number(time.split(':')[0]);\r\n    let minute = Number(time.split(':')[1].match(/\\d+/g));\r\n    const ampm = time.match(/AM|PM/) || [''];\r\n\r\n    if (this.rounding) {\r\n      minute = round(minute, this.rounding);\r\n    }\r\n\r\n    return {\r\n      h: toString(hour),\r\n      m: toString(minute),\r\n      ampm: ampm[0],\r\n    };\r\n  }\r\n\r\n  open(): void {\r\n    let overlayRef = this._overlayRef;\r\n    if (!overlayRef) {\r\n      this._portal = new ComponentPortal(MdbTimePickerContentComponent, this._vcr);\r\n      overlayRef = this._overlay.create(this._getOverlayConfig());\r\n\r\n      this._overlayRef = overlayRef;\r\n    }\r\n\r\n    if (overlayRef && this._overlayRef && !overlayRef.hasAttached()) {\r\n      this._contentRef = this._overlayRef.attach(this._portal);\r\n      this._patchInputValues();\r\n      this._listenToOutsideClick();\r\n    }\r\n\r\n    this._emitTimeShowEvent(this._timeToObj(this._value));\r\n  }\r\n\r\n  close(doneClicked?: boolean, value?: SelectedTime) {\r\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\r\n      if (!doneClicked) {\r\n        this._emitTimeCancelEvent(value || this._timeToObj(this._value));\r\n      }\r\n    }\r\n    this._destroyOverlay();\r\n  }\r\n\r\n  _emitTimeChangeEvent(value: SelectedTime) {\r\n    this.timeChange.emit({ status: 'change', value });\r\n  }\r\n\r\n  _emitTimeCancelEvent(value: SelectedTime) {\r\n    this.cancel.emit({ status: 'cancel', value });\r\n  }\r\n\r\n  _emitTimeDoneEvent(value: SelectedTime) {\r\n    const { h, m, ampm } = value;\r\n    this.done.emit({ status: 'done', value });\r\n    this._selectionChange$.next(this.twelveHour ? `${h}:${m}${ampm}` : `${h}:${m}`);\r\n  }\r\n\r\n  _emitTimeShowEvent(value: SelectedTime) {\r\n    this.show.emit({ status: 'open', value });\r\n  }\r\n\r\n  _setValue(value: string) {\r\n    if (value) {\r\n      this._value = value;\r\n    } else {\r\n      this._value = '12:00AM';\r\n    }\r\n  }\r\n\r\n  setInput(input: any) {\r\n    this.input = input;\r\n    input._valueChange.subscribe((val: any) => {\r\n      const match = val.match(/\\d\\d:\\d\\d(AM|PM)?/gi);\r\n      if (match) {\r\n        this._value = match[0];\r\n      } else {\r\n        this._value = '12:00AM';\r\n      }\r\n    });\r\n  }\r\n\r\n  onChangeCb: (_: any) => void = () => {};\r\n  onTouchedCb: () => void = () => {};\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onChangeCb = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouchedCb = fn;\r\n  }\r\n\r\n  private _getOverlayConfig(): OverlayConfig {\r\n    const positionStrategy = this._overlay\r\n      .position()\r\n      .global()\r\n      .centerHorizontally()\r\n      .centerVertically();\r\n    const overlayConfig = new OverlayConfig({\r\n      hasBackdrop: true,\r\n      scrollStrategy: this._overlay.scrollStrategies.block(),\r\n      positionStrategy,\r\n    });\r\n    return overlayConfig;\r\n  }\r\n\r\n  private _destroyOverlay() {\r\n    if (this._overlayRef) {\r\n      this._overlayRef.dispose();\r\n      this._overlayRef = null;\r\n    }\r\n  }\r\n\r\n  private _listenToOutsideClick() {\r\n    if (this._overlayRef) {\r\n      merge(\r\n        this._overlayRef.backdropClick(),\r\n        this._overlayRef.detachments(),\r\n        this._overlayRef.keydownEvents().pipe(\r\n          filter((event: KeyboardEvent) => {\r\n            // Closing on alt + up is only valid when there's an input associated with the datepicker.\r\n            // tslint:disable-next-line: deprecation\r\n            return event.keyCode === ESCAPE;\r\n          })\r\n        )\r\n      ).subscribe(event => {\r\n        if (event) {\r\n          event.preventDefault();\r\n        }\r\n        this.close();\r\n        this._destroyOverlay();\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroyOverlay();\r\n  }\r\n}\r\n"]}