{"version":3,"file":"mdb-range.component.d.ts","sources":["../../../../../projects/ng-uikit-pro-standard/src/lib/pro/range/mdb-range.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAoB,EAAqB,MAAM,gBAAgB,CAAC;AACzE,OAAO,EAGL,UAAU,EACV,SAAS,EAIT,aAAa,EAEb,YAAY,EACZ,iBAAiB,EAGlB,MAAM,eAAe,CAAC;;AAEvB,eAAO,MAAM,mBAAmB,EAAE,GAKjC,CAAC;AAEF,qBAQa,sBAAuB,YAAW,oBAAoB,EAAE,aAAa;AAClF,IAgDc,OAAO,CAAC,QAAQ;AAAE,IAAW,OAAO,CAAC,KAAK;AAAE,IAhDpC,KAAK,EAAE,UAAU,CAAC;AACxC,IAA2B,UAAU,EAAE,UAAU,CAAC;AAClD,IAA2B,UAAU,EAAE,UAAU,CAAC;AAClD,IACW,EAAE,EAAE,MAAM,CAAC;AACtB,IAAW,QAAQ,EAAE,OAAO,CAAC;AAC7B,IAAW,IAAI,EAAE,MAAM,CAAC;AACxB,IAAW,KAAK,EAAE,MAAM,CAAC;AACzB,IAAW,QAAQ,EAAE,OAAO,CAAC;AAC7B,IAAW,GAAG,SAAK;AACnB,IAAW,GAAG,SAAO;AACrB,IAAW,IAAI,EAAE,MAAM,CAAC;AACxB,IAAW,OAAO,EAAE,OAAO,CAAC;AAC5B,IAAW,wBAAwB,EAAE,MAAM,CAAC;AAC5C,IACY,gBAAgB,oBAA2B;AACvD,IACE,KAAK,EAAE,GAAG,CAAK;AACjB,IAAE,UAAU,EAAE,MAAM,CAAC;AACrB,IAAE,KAAK,EAAE,MAAM,CAAC;AAChB,IAAE,UAAU,SAAK;AACjB,IAAE,UAAU,UAAS;AACrB,IACsC,QAAQ,CAAC,KAAK,EAAE,GAAG;AACpD,IAGgC,OAAO,CAAC,KAAK,EAAE,GAAG;AAClD,gBAoBiB,QAAQ,EAAE,SAAS,EAAU,KAAK,EAAE,iBAAiB;AAAG,IAE5E,eAAe;AACZ,IAIH,cAAc;AACX,IAIH,QAAQ,CAAC,KAAK,EAAE,GAAG,EAAE,KAAK,CAAC,EAAE,GAAG;AAC3B,IAwBL,aAAa;AACP,IAYN,eAAe;AACZ,IAcH,QAAQ,MAAO,GAAG,UAAQ;AAC5B,IAAE,SAAS,aAAY;AACvB,IACE,UAAU,CAAC,KAAK,EAAE,GAAG,GAAG,IAAI;AAAE,IAY9B,gBAAgB,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,KAAK,IAAI,GAAG,IAAI;AAAE,IAI9C,iBAAiB,CAAC,EAAE,EAAE,MAAM,IAAI,GAAG,IAAI;AAAE,IAIzC,gBAAgB,CAAC,UAAU,EAAE,OAAO;;;AACjC,CAEJ;AACD","sourcesContent":["import { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n  Component,\n  ViewChild,\n  ElementRef,\n  Renderer2,\n  Input,\n  HostListener,\n  forwardRef,\n  AfterViewInit,\n  Output,\n  EventEmitter,\n  ChangeDetectorRef,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\n\nexport const RANGE_VALUE_ACCESOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => MdbRangeInputComponent),\n  multi: true,\n};\n\n@Component({\n  selector: 'mdb-range-input',\n  templateUrl: './mdb-range.component.html',\n  styleUrls: ['./range-module.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [RANGE_VALUE_ACCESOR],\n})\nexport class MdbRangeInputComponent implements ControlValueAccessor, AfterViewInit {\n  @ViewChild('input') input: ElementRef;\n  @ViewChild('rangeCloud') rangeCloud: ElementRef;\n  @ViewChild('rangeField') rangeField: ElementRef;\n\n  @Input() id: string;\n  @Input() required: boolean;\n  @Input() name: string;\n  @Input() value: string;\n  @Input() disabled: boolean;\n  @Input() min = 0;\n  @Input() max = 100;\n  @Input() step: number;\n  @Input() default: boolean;\n  @Input() defaultRangeCounterClass: string;\n\n  @Output() rangeValueChange = new EventEmitter<any>();\n\n  range: any = 0;\n  stepLength: number;\n  steps: number;\n  cloudRange = 0;\n  visibility = false;\n\n  @HostListener('change', ['$event']) onchange(event: any) {\n    this.onChange(event.target.value);\n  }\n\n  @HostListener('input', ['$event']) oninput(event: any) {\n    const value: number = +event.target.value;\n    this.rangeValueChange.emit({ value: value });\n    this.focusRangeInput();\n    if (this.checkIfSafari()) {\n      this.focusRangeInput();\n    }\n  }\n\n  // @HostListener('mousedown') onclick() {\n  //   this.focusRangeInput();\n  // }\n\n  // @HostListener('touchstart') onTouchStart() {\n  //   this.focusRangeInput();\n  // }\n\n  // @HostListener('mouseup') onmouseup() {\n  //   this.blurRangeInput();\n  // }\n\n  constructor(private renderer: Renderer2, private cdRef: ChangeDetectorRef) {}\n\n  focusRangeInput() {\n    // this.input.nativeElement.focus();\n    this.visibility = true;\n  }\n\n  blurRangeInput() {\n    this.input.nativeElement.blur();\n    this.visibility = false;\n  }\n\n  coverage(event: any, value?: any) {\n    if (typeof this.range === 'string' && this.range.length !== 0) {\n      return this.range;\n    }\n\n    if (!this.default) {\n      // if `coverage()` is called by (input) event take value as event.target.value. If it's called manually, take value from parameter.\n      // This is needed in situation, when slider value is set by default or ReactiveForms, and value clound is not moved to proper position\n      const newValue = event.target ? event.target.value : value;\n      const newRelativeGain = newValue - this.min;\n      const inputWidth = this.input.nativeElement.offsetWidth;\n\n      let thumbOffset: number;\n      const offsetAmmount = 15;\n      const distanceFromMiddle = newRelativeGain - this.steps / 2;\n\n      this.stepLength = inputWidth / this.steps;\n\n      thumbOffset = (distanceFromMiddle / this.steps) * offsetAmmount;\n      this.cloudRange = this.stepLength * newRelativeGain - thumbOffset;\n\n      this.renderer.setStyle(this.rangeCloud.nativeElement, 'left', this.cloudRange + 'px');\n    }\n  }\n\n  checkIfSafari() {\n    const isSafari = navigator.userAgent.indexOf('Safari') > -1;\n    const isChrome = navigator.userAgent.indexOf('Chrome') > -1;\n    const isFirefox = navigator.userAgent.indexOf('Firefox') > -1;\n    const isOpera = navigator.userAgent.indexOf('Opera') > -1;\n\n    if (isSafari && !isChrome && !isFirefox && !isOpera) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  ngAfterViewInit() {\n    this.steps = this.max - this.min;\n\n    if (this.value) {\n      this.range = Number(this.value);\n\n      // fix(slider): resolve problem with not moving slider cloud when setting value with [value] or reactive forms\n      // Manual call the coverage method to move range value cloud to proper position based on the `value` variable\n      this.coverage(new Event('input'), this.value);\n\n      this.cdRef.detectChanges();\n    }\n  }\n\n  // Control Value Accessor Methods\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  writeValue(value: any): void {\n    this.value = value;\n    this.range = Number(this.value);\n    this.cdRef.markForCheck();\n\n    // fix(slider): resolve problem with not moving slider cloud when setting value with [value] or reactive forms\n    // Manual call the coverage method to move range value cloud to proper position based on the `value` variable\n    setTimeout(() => {\n      this.coverage(new Event('input'), value);\n    }, 0);\n  }\n\n  registerOnChange(fn: (_: any) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n"]}