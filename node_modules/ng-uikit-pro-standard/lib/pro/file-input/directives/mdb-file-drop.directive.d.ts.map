{"version":3,"file":"mdb-file-drop.directive.d.ts","sources":["../../../../../../projects/ng-uikit-pro-standard/src/lib/pro/file-input/directives/mdb-file-drop.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EAEL,UAAU,EACV,YAAY,EAIZ,SAAS,EACT,MAAM,EAIP,MAAM,eAAe,CAAC;AAEvB,OAAO,EACL,kBAAkB,EAClB,eAAe,EACf,WAAW,EACX,YAAY,EACb,MAAM,+BAA+B,CAAC;;AAIvC,qBAQa,oBAAqB,YAAW,MAAM,EAAE,SAAS;AAC9D,IAUmC,OAAO,CAAC,WAAW;AAAE,IAAK,OAAO,CAAC,UAAU;AAAE,IAVtE,WAAW,EAAE,YAAY,CAAC,WAAW,CAAC,CAAC;AAClD,IAAW,OAAO,EAAE,eAAe,CAAC;AACpC,IAAY,YAAY,EAAE,YAAY,CAAC,YAAY,CAAC,CAAC;AACrD,IACE,OAAO,CAAC,SAAS,CAAgC;AACnD,IACE,MAAM,EAAE,kBAAkB,CAAC;AAC7B,IAAE,QAAQ,EAAE,OAAO,CAAsC;AACzD,IAAE,EAAE,EAAE,gBAAgB,CAAC;AACvB,gBAC2C,WAAW,EAAE,GAAG,EAAU,UAAU,EAAE,UAAU;AAAG,IAI5F,QAAQ;AACL,IAyBH,WAAW;AACR,IAYH,SAAS,MAAO,KAAK,UAGnB;AACJ,IAES,MAAM,CAAC,CAAC,EAAE,GAAG;AACjB,IASI,UAAU,CAAC,CAAC,EAAE,GAAG;AACrB,IASI,WAAW,CAAC,CAAC,EAAE,GAAG;;;AACtB,CAOJ;AACD","sourcesContent":["import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  PLATFORM_ID,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\nimport {\n  MDBUploaderService,\n  UploaderOptions,\n  UploadInput,\n  UploadOutput,\n} from '../classes/mdb-uploader.class';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: '[mdbFileDrop]',\n  template: '<ng-content></ng-content>',\n  styleUrls: ['./../file-input-module.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\n// tslint:disable-next-line:component-class-suffix\nexport class MDBFileDropDirective implements OnInit, OnDestroy {\n  @Input() uploadInput: EventEmitter<UploadInput>;\n  @Input() options: UploaderOptions;\n  @Output() uploadOutput: EventEmitter<UploadOutput>;\n\n  private _destroy$: Subject<void> = new Subject();\n\n  upload: MDBUploaderService;\n  isServer: boolean = isPlatformServer(this.platform_id);\n  el: HTMLInputElement;\n\n  constructor(@Inject(PLATFORM_ID) private platform_id: any, private elementRef: ElementRef) {\n    this.uploadOutput = new EventEmitter<UploadOutput>();\n  }\n\n  ngOnInit() {\n    if (this.isServer) {\n      return;\n    }\n\n    const concurrency = (this.options && this.options.concurrency) || Number.POSITIVE_INFINITY;\n    const allowedContentTypes = (this.options && this.options.allowedContentTypes) || ['*'];\n    const maxUploads = (this.options && this.options.maxUploads) || Number.POSITIVE_INFINITY;\n    this.upload = new MDBUploaderService(concurrency, allowedContentTypes, maxUploads);\n\n    this.el = this.elementRef.nativeElement;\n\n    this.upload.serviceEvents.pipe(takeUntil(this._destroy$)).subscribe((event: UploadOutput) => {\n      this.uploadOutput.emit(event);\n    });\n\n    if (this.uploadInput instanceof EventEmitter) {\n      this.upload.initInputEvents(this.uploadInput);\n    }\n\n    this.el.addEventListener('drop', this.stopEvent, false);\n    this.el.addEventListener('dragenter', this.stopEvent, false);\n    this.el.addEventListener('dragover', this.stopEvent, false);\n    this.el.addEventListener('dragover', this.stopEvent, false);\n  }\n\n  ngOnDestroy() {\n    if (this.isServer) {\n      return;\n    }\n\n    if (this.uploadInput) {\n      this.uploadInput.unsubscribe();\n    }\n\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n\n  stopEvent = (e: Event) => {\n    e.stopPropagation();\n    e.preventDefault();\n  };\n\n  @HostListener('drop', ['$event'])\n  public onDrop(e: any) {\n    e.stopPropagation();\n    e.preventDefault();\n\n    const event: UploadOutput = { type: 'drop' };\n    this.uploadOutput.emit(event);\n    this.upload.handleFiles(e.dataTransfer.files);\n  }\n\n  @HostListener('dragover', ['$event'])\n  public onDragOver(e: any) {\n    if (!e) {\n      return;\n    }\n\n    const event: UploadOutput = { type: 'dragOver' };\n    this.uploadOutput.emit(event);\n  }\n\n  @HostListener('dragleave', ['$event'])\n  public onDragLeave(e: any) {\n    if (!e) {\n      return;\n    }\n\n    const event: UploadOutput = { type: 'dragOut' };\n    this.uploadOutput.emit(event);\n  }\n}\n"]}