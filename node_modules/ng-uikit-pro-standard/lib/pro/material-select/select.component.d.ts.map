{"version":3,"file":"select.component.d.ts","sources":["../../../../../projects/ng-uikit-pro-standard/src/lib/pro/material-select/select.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  EventEmitter,\n  ExistingProvider,\n  ViewChild,\n  ViewEncapsulation,\n  forwardRef,\n  ElementRef,\n  Renderer2,\n  AfterViewInit,\n  SimpleChanges,\n  Inject,\n  PLATFORM_ID,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { SelectDropdownComponent } from './select-dropdown.component';\nimport { IOption } from './option-interface';\nimport { Option } from './option';\nimport { OptionList } from './option-list';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport {\n  BACKSPACE,\n  DOWN_ARROW,\n  ENTER,\n  ESCAPE,\n  SPACE,\n  TAB,\n  UP_ARROW,\n} from '../../free/utils/keyboard-navigation';\n\nexport const SELECT_VALUE_ACCESSOR: ExistingProvider = {\n  provide: NG_VALUE_ACCESSOR,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => SelectComponent),\n  multi: true,\n};\n\n@Component({\n  selector: 'mdb-select',\n  templateUrl: 'select.component.html',\n  styleUrls: ['./material-select-module.scss'],\n  providers: [SELECT_VALUE_ACCESSOR],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SelectComponent implements ControlValueAccessor, OnChanges, OnInit, AfterViewInit {\n  @Input() options: Array<IOption>;\n  @Input() public customClass = '';\n  @Input() allowClear = false;\n  @Input() disabled = false;\n  @Input() highlightColor: string;\n  @Input() highlightTextColor: string;\n  @Input() highlightFirst = true;\n  @Input() multiple = false;\n  @Input() noFilter = 0;\n  @Input() notFoundMsg = 'No results found';\n  @Input() placeholder = '';\n  @Input() filterPlaceholder = '';\n  @Input() label = '';\n  @Input() filterEnabled = false;\n  @Input() filterAutocomplete = true;\n  @Input() visibleOptions: number;\n  @Input() optionHeight = 37;\n  @Input() tabindex = 0;\n  @Input() enableSelectAll = true;\n  @Input() appendToBody: boolean;\n  @Input() selectAllLabel = 'Select all';\n  @Input() outline = false;\n\n  @Input()\n  get required() {\n    return this._required;\n  }\n  set required(value: boolean) {\n    this._required = value;\n  }\n  private _required = false;\n\n  @Input()\n  get compareWith() {\n    return this._compareWith;\n  }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw Error('compareWith must be a function');\n    }\n    this._compareWith = fn;\n  }\n\n  @Output() opened: EventEmitter<any> = new EventEmitter<any>();\n  @Output() closed: EventEmitter<any> = new EventEmitter<any>();\n  @Output() selected: EventEmitter<IOption> = new EventEmitter<IOption>();\n  @Output() deselected: EventEmitter<IOption | IOption[]> = new EventEmitter<IOption | IOption[]>();\n  @Output() noOptionsFound: EventEmitter<string> = new EventEmitter<string>();\n  @Output() changed = new EventEmitter();\n\n  @ViewChild('selection', { static: true }) selectionSpan: ElementRef;\n  @ViewChild('dropdown') dropdown: SelectDropdownComponent;\n  @ViewChild('filterInput') filterInput: ElementRef;\n  @ViewChild('clear') clearButton: ElementRef;\n  @ViewChild('singleContainer') singleContainer: ElementRef;\n  @ViewChild('multipleContainer') multipleContainer: ElementRef;\n\n  _value: Array<any> = [];\n  optionList: OptionList;\n  optionsLength: number;\n  visibleOptionsDefault = 4;\n  // Selection state variables.\n  hasSelected = false;\n  isBrowser: boolean;\n\n  // View state variables.\n  canOpenOnFocus = true;\n  hasFocus = false;\n  isOpen = false;\n  isBelow = true;\n  filterInputWidth = 1;\n  isDisabled = false;\n  placeholderView = '';\n  labelActive = false;\n  labelRef: HTMLElement;\n  prefixRef: HTMLElement;\n  labelRefActive = false;\n  dropdownAnimationDone = false;\n\n  clearClicked = false;\n  selectContainerClicked = false;\n\n  filterHeight = 0;\n  dropdownHeight: number;\n  dropdownMaxHeight: number;\n\n  OUTLINE_DROPDOWN_BOTTOM_OFFSET = 5;\n  OUTLINE_DROPDOWN_TOP_OFFSET = -20;\n\n  // Width and position for the dropdown container.\n  width: number;\n  top: number;\n  left: number;\n\n  documentClickFun: Function;\n\n  itemsBefore: Array<any> = [];\n\n  get focused() {\n    return this._focused;\n  }\n  private _focused = false;\n\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  constructor(\n    public el: ElementRef,\n    public renderer: Renderer2,\n    @Inject(DOCUMENT) private document: any,\n    @Inject(PLATFORM_ID) platformId: string,\n    private cdRef: ChangeDetectorRef\n  ) {\n    this.isBrowser = isPlatformBrowser(platformId);\n  }\n\n  ngOnInit() {\n    this.placeholderView = this.placeholder;\n    this.updateFilterHeight();\n    this.updateDropdownHeight();\n    if (this.label) {\n      this.updateLabelState();\n    }\n\n    this.labelRef = this._getLabelRef();\n    this.prefixRef = this._getPrefixRef();\n\n    if (this.labelRef) {\n      this.updateLabelRefState();\n    }\n\n    if (this.highlightFirst) {\n      this.optionList.highlightFirst = true;\n    }\n  }\n\n  private _getLabelRef(): HTMLElement {\n    const selectParentEl = this.el.nativeElement.parentNode;\n    const labelRef = selectParentEl.querySelector('label');\n    return labelRef;\n  }\n\n  private _getPrefixRef(): HTMLElement {\n    const selectParentEl = this.el.nativeElement.parentNode;\n    const prefixRef = selectParentEl.querySelector('.prefix');\n    return prefixRef;\n  }\n\n  updateFilterHeight() {\n    this.filterEnabled ? (this.filterHeight = 50) : (this.filterHeight = 0);\n  }\n\n  updateDropdownHeight() {\n    if (this.multiple && this.enableSelectAll) {\n      this.dropdownMaxHeight = this.visibleOptions\n        ? this.optionHeight * (this.visibleOptions + 1)\n        : this.optionHeight * (this.visibleOptionsDefault + 1);\n\n      this.dropdownHeight = this.optionHeight * (this.optionList.options.length + 1);\n    } else {\n      this.dropdownMaxHeight = this.visibleOptions\n        ? this.optionHeight * this.visibleOptions\n        : this.optionHeight * this.visibleOptionsDefault;\n\n      this.dropdownHeight = this.optionHeight * this.optionList.options.length;\n    }\n  }\n\n  onDropdownAnimationDone() {\n    this.dropdownAnimationDone = true;\n  }\n\n  onDropdownAnimationStart() {\n    this.dropdownAnimationDone = false;\n  }\n\n  ngAfterViewInit() {\n    this.updateState();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.hasOwnProperty('outline')) {\n      if (changes['outline'].currentValue) {\n        this.renderer.addClass(this.el.nativeElement, 'mdb-select-outline');\n      } else {\n        this.renderer.removeClass(this.el.nativeElement, 'mdb-select-outline');\n      }\n    }\n    if (changes.hasOwnProperty('options')) {\n      this.updateOptionsList(changes.options.currentValue);\n      this.updateState();\n      this.updateDropdownHeight();\n      this.appendToBody ? this._updateAppendedPosition() : this.updatePosition();\n      this.changed.emit({\n        previousValue: changes.options.previousValue,\n        selectionValue: changes.options.currentValue,\n      });\n    }\n    if (changes.hasOwnProperty('noFilter')) {\n      const numOptions: number = this.optionList.options.length;\n      const minNumOptions: number = changes['noFilter'].currentValue;\n      this.filterEnabled = numOptions >= minNumOptions;\n    }\n\n    if (changes.hasOwnProperty('placeholder')) {\n      this.updateState();\n    }\n  }\n\n  isChild(elemnt: any) {\n    let node = elemnt.parentNode;\n    while (node != null) {\n      if (node === this.el.nativeElement) {\n        return true;\n      }\n      node = node.parentNode;\n    }\n    return false;\n  }\n\n  onWindowResize() {\n    this.updateWidth();\n  }\n\n  // Select container.\n\n  onSelectContainerClick(event: any) {\n    // prevent from opening on mouse right click\n    if (event.which === 2 || event.which === 3) {\n      return false;\n    }\n\n    if (this.isChild(event.target)) {\n      this.selectContainerClicked = true;\n      this.openDropdown();\n\n      if (this.label) {\n        this.updateLabelState();\n      }\n\n      if (this.labelRef) {\n        this.updateLabelRefState();\n      }\n    }\n  }\n\n  onSelectContainerFocus() {\n    this._focused = true;\n\n    if (this.label) {\n      this.labelActive = true;\n    }\n\n    if (this.labelRef) {\n      this.renderer.addClass(this.labelRef, 'active');\n      this.renderer.addClass(this.labelRef, 'focused');\n    }\n\n    if (this.prefixRef) {\n      this.renderer.addClass(this.prefixRef, 'focused');\n    }\n\n    if (this.canOpenOnFocus) {\n      this.openDropdown();\n    }\n    this.canOpenOnFocus = true;\n  }\n\n  onSelectContainerBlur() {\n    this._focused = false;\n    this.canOpenOnFocus = true;\n\n    if (this.label) {\n      this.updateLabelState();\n    }\n\n    if (this.labelRef) {\n      this.updateLabelRefState();\n      this.renderer.removeClass(this.labelRef, 'focused');\n    }\n\n    if (this.prefixRef) {\n      this.renderer.removeClass(this.prefixRef, 'focused');\n    }\n\n    if (!this.isOpen && !this.disabled) {\n      this.onTouched();\n    }\n  }\n\n  onSelectContainerKeydown(event: any) {\n    this.handleSelectContainerKeydown(event);\n  }\n\n  // Dropdown container.\n\n  onDropdownOptionClicked(option: Option) {\n    this.multiple ? this.toggleSelectOption(option) : this.selectOption(option);\n  }\n\n  onDropdownClose(focus: any) {\n    this.closeDropdown(focus);\n  }\n\n  // Single filter input.\n  onSingleFilterClick() {\n    this.selectContainerClicked = true;\n  }\n\n  onSingleFilterInput(term: string) {\n    const hasShown: boolean = this.optionList.filter(term);\n    if (this.multiple && this.enableSelectAll) {\n      this.dropdownHeight = (this.optionList.filtered.length + 1) * this.optionHeight;\n    } else {\n      this.dropdownHeight = this.optionList.filtered.length * this.optionHeight;\n    }\n    if (!hasShown) {\n      this.noOptionsFound.emit(term);\n      this.dropdownHeight = this.optionHeight;\n    }\n  }\n\n  onSingleFilterKeydown(event: any) {\n    this.handleSingleFilterKeydown(event);\n  }\n\n  // Multiple filter input.\n\n  onMultipleFilterInput(event: any) {\n    if (!this.isOpen) {\n      this.openDropdown();\n    }\n    this.updateFilterWidth();\n    const term: string = event.target.value;\n    const hasShown: boolean = this.optionList.filter(term);\n    if (!hasShown) {\n      this.noOptionsFound.emit(term);\n    }\n  }\n\n  onMultipleFilterKeydown(event: any) {\n    this.handleMultipleFilterKeydown(event);\n  }\n\n  // Single clear select.\n\n  onClearSelectionClick(event: any) {\n    event.preventDefault();\n    this.clearClicked = true;\n    this.clearSelection();\n    this.placeholderView = this.placeholder;\n    this.onTouched();\n\n    if (this.label) {\n      this.updateLabelState();\n    }\n\n    if (this.labelRef) {\n      this.updateLabelRefState();\n    }\n  }\n\n  // Multiple deselect option.\n\n  onDeselectOptionClick(option: Option) {\n    this.clearClicked = true;\n    this.deselectOption(option);\n  }\n\n  /** API. **/\n\n  open() {\n    Promise.resolve().then(() => {\n      this.openDropdown();\n    });\n  }\n\n  close() {\n    this.closeDropdown();\n  }\n\n  get value(): any | any[] {\n    return this.multiple ? this._value : this._value[0];\n  }\n\n  set value(v: any | any[]) {\n    if (typeof v === 'undefined' || v === null || v === '') {\n      v = [];\n    } else if (!Array.isArray(v)) {\n      v = [v];\n    }\n\n    this._setSelection(v);\n    this._value = v;\n    this.updateState();\n  }\n\n  private _setSelection(value: any) {\n    this.optionList.clearSelection();\n\n    if (this.multiple && value) {\n      value.forEach((selectionValue: any) => {\n        this._selectByValue(selectionValue);\n      });\n    } else {\n      this._selectByValue(value[0]);\n    }\n  }\n\n  private _selectByValue(value: any) {\n    const matchingOption = this.optionList.options.find((option: Option) => {\n      return !option.selected && option.value !== null && this._compareWith(option.value, value);\n    });\n\n    if (matchingOption) {\n      this.optionList.select(matchingOption);\n    }\n  }\n\n  clear() {\n    this.clearSelection();\n  }\n\n  select(value: string) {\n    this.optionList.getOptionsByValue(value).forEach(option => {\n      this.selectOption(option);\n    });\n  }\n\n  /** ControlValueAccessor interface methods. **/\n\n  writeValue(value: any) {\n    this.value = value;\n    this.hasSelected = true;\n\n    if (!value && value !== 0) {\n      this.clearSelection();\n      this.hasSelected = false;\n    }\n\n    if (this.label) {\n      this.updateLabelState();\n    }\n\n    if (this.labelRef) {\n      this.updateLabelRefState();\n    }\n  }\n\n  registerOnChange(fn: (_: any) => void) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void) {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this.cdRef.markForCheck();\n  }\n\n  valueChanged() {\n    this._value = this.optionList.value;\n    this.updateState();\n    this.onChange(this.value);\n  }\n\n  updateState() {\n    this.placeholderView = this.placeholder;\n    this.updateFilterWidth();\n    this.cdRef.markForCheck();\n  }\n\n  /** Initialization. **/\n\n  updateOptionsList(options: Array<IOption>) {\n    this.optionList = new OptionList(options, this.multiple);\n    this._setSelection(this._value);\n    this.cdRef.markForCheck();\n  }\n\n  updateLabelState() {\n    if (!this.placeholder && !this.hasSelected && !this.isOpen) {\n      this.labelActive = false;\n    } else {\n      this.labelActive = true;\n    }\n  }\n\n  updateLabelRefState() {\n    if (!this.placeholder && !this.hasSelected && !this.isOpen) {\n      this.renderer.removeClass(this.labelRef, 'active');\n    } else {\n      this.renderer.addClass(this.labelRef, 'active');\n    }\n  }\n\n  /** Dropdown. **/\n  toggleDropdown() {\n    if (!this.isDisabled) {\n      this.isOpen ? this.closeDropdown(true) : this.openDropdown();\n    }\n  }\n\n  openDropdown() {\n    // we should not set higher z-index value here\n    // because dropdown added with appendToBody will be overlaped by select input\n    this.renderer.setStyle(this.el.nativeElement, 'z-index', '1000');\n    if (!this.isOpen) {\n      this.isOpen = true;\n\n      if (this.appendToBody) {\n        setTimeout(() => {\n          this._appendDropdown();\n        }, 0);\n      }\n\n      this.updateWidth();\n      this.appendToBody ? this._updateAppendedPosition() : this.updatePosition();\n      ['click', 'touchstart'].forEach((ev: string) => {\n        this.documentClickFun = this.renderer.listen('document', ev, (event: any) => {\n          if (\n            !this.isChild(event.target) &&\n            this.isOpen &&\n            this.dropdownAnimationDone &&\n            event.target !== this.el.nativeElement\n          ) {\n            this.closeDropdown();\n            this.clearFilterInput();\n\n            if (this.label) {\n              this.updateLabelState();\n            }\n\n            if (this.labelRef) {\n              this.updateLabelRefState();\n            }\n          }\n        });\n      });\n\n      this.opened.emit(this);\n    }\n\n    this.cdRef.markForCheck();\n  }\n\n  closeDropdown(focus: boolean = false) {\n    if (this.appendToBody && this.isOpen) {\n      this.renderer.removeChild('body', this.dropdown._elementRef.nativeElement);\n    }\n\n    const container = this.el.nativeElement.lastElementChild.classList;\n    this.renderer.removeStyle(this.el.nativeElement, 'z-index');\n    container.remove('fadeInSelect');\n\n    if (this.isOpen) {\n      this.clearFilterInput();\n      this.isOpen = false;\n      if (focus) {\n        this.focus();\n      }\n      this.closed.emit(this);\n    }\n\n    this.documentClickFun();\n\n    this.onTouched();\n    this.cdRef.markForCheck();\n  }\n\n  /** Select. **/\n\n  selectOption(option: Option) {\n    if (!option.disabled) {\n      this.optionList.select(option);\n      this.valueChanged();\n      this.selected.emit(option.wrappedOption);\n      this.hasSelected = true;\n\n      if (this.label) {\n        this.updateLabelState();\n      }\n\n      if (this.labelRef) {\n        this.updateLabelRefState();\n      }\n    }\n    if (!this.multiple && !option.disabled) {\n      this.closeDropdown();\n    }\n    this.cdRef.markForCheck();\n  }\n\n  deselectOption(option: Option) {\n    if (option.selected) {\n      this.optionList.deselect(option);\n      this.valueChanged();\n      this.placeholderView = this.placeholder;\n\n      if (this.optionList.selection.length === 0) {\n        this.hasSelected = false;\n\n        if (this.label) {\n          this.updateLabelState();\n        }\n\n        if (this.labelRef) {\n          this.updateLabelRefState();\n        }\n      }\n      this.deselected.emit(option.wrappedOption);\n    }\n  }\n\n  clearSelection() {\n    const selection: Array<Option> = this.optionList.selection;\n    if (selection.length > 0) {\n      this.optionList.clearSelection();\n      this.valueChanged();\n      this.hasSelected = false;\n\n      if (selection.length === 1) {\n        this.deselected.emit(selection[0].wrappedOption);\n      } else {\n        this.deselected.emit(\n          selection.map(option => {\n            return option.wrappedOption;\n          })\n        );\n      }\n    }\n  }\n\n  toggleSelectOption(option: Option) {\n    option.selected ? this.deselectOption(option) : this.selectOption(option);\n  }\n\n  selectHighlightedOption() {\n    const option: Option = this.optionList.highlightedOption;\n    if (this.multiple && option !== null) {\n      this.toggleSelectOption(option);\n    }\n    if (!this.multiple && option !== null) {\n      this.selectOption(option);\n      this.closeDropdown(true);\n\n      this.canOpenOnFocus = false;\n      this.selectionSpan.nativeElement.focus();\n    }\n  }\n\n  deselectLast() {\n    const sel: Array<Option> = this.optionList.selection;\n\n    if (sel.length > 0) {\n      const option: Option = sel[sel.length - 1];\n      this.deselectOption(option);\n      this.setMultipleFilterInput(option.label + ' ');\n    }\n  }\n\n  onSelectAll(isSelected: boolean) {\n    if (isSelected) {\n      this.optionList.filtered\n        .filter(option => !option.disabled)\n        .forEach(option => {\n          this.selectOption(option);\n        });\n    } else {\n      this.optionList.filtered\n        .filter(option => !option.disabled)\n        .forEach(option => {\n          this.deselectOption(option);\n        });\n    }\n  }\n\n  /** Filter. **/\n\n  clearFilterInput() {\n    this.dropdown.clearFilterInput();\n    this.updateDropdownHeight();\n  }\n\n  setMultipleFilterInput(value: string) {\n    if (this.filterEnabled) {\n      this.filterInput.nativeElement.value = value;\n    }\n  }\n\n  handleSelectContainerKeydown(event: any) {\n    const key = event.keyCode;\n\n    if (this.isOpen) {\n      if (key === ESCAPE || (key === UP_ARROW && event.altKey)) {\n        event.preventDefault();\n        this.closeDropdown();\n        this.canOpenOnFocus = false;\n        this.selectionSpan.nativeElement.focus();\n\n        if (this.label) {\n          this.updateLabelState();\n        }\n\n        if (this.labelRef) {\n          this.updateLabelRefState();\n        }\n      } else if (key === TAB) {\n        // Restore focus from search input to select input. Ensures that the next\n        // or previous element will be focused corretly on tab or shift-tab\n        this.selectionSpan.nativeElement.focus();\n        this.closeDropdown();\n      } else if (key === ENTER) {\n        this.selectHighlightedOption();\n        if (this.multiple && this.enableSelectAll) {\n          this.dropdown.updateSelectAllState();\n        }\n      } else if (key === UP_ARROW) {\n        event.preventDefault();\n        this.optionList.highlightPreviousOption();\n        this.dropdown.moveHighlightedIntoView();\n      } else if (key === DOWN_ARROW) {\n        event.preventDefault();\n        this.optionList.highlightNextOption();\n        this.dropdown.moveHighlightedIntoView();\n      }\n    } else {\n      if (key === ENTER || key === SPACE || (key === DOWN_ARROW && event.altKey)) {\n        event.preventDefault();\n        this.openDropdown();\n      }\n    }\n  }\n\n  handleMultipleFilterKeydown(event: any) {\n    const key = event.which;\n\n    if (key === BACKSPACE) {\n      if (this.hasSelected && this.filterEnabled && this.filterInput.nativeElement.value === '') {\n        this.deselectLast();\n      }\n    }\n  }\n\n  handleSingleFilterKeydown(event: any) {\n    const key = event.which;\n\n    if (key === ESCAPE || key === TAB || key === UP_ARROW || key === DOWN_ARROW || key === ENTER) {\n      this.handleSelectContainerKeydown(event);\n    }\n  }\n\n  /** View. **/\n\n  focus() {\n    this.hasFocus = true;\n    try {\n      if (this.filterEnabled) {\n        this.filterInput.nativeElement.focus();\n      } else {\n        this.selectionSpan.nativeElement.focus();\n      }\n    } catch (error) {}\n  }\n\n  blur() {\n    this.hasFocus = false;\n    this.selectionSpan.nativeElement.blur();\n  }\n\n  updateWidth() {\n    if (!this.multiple) {\n      this.width = this.singleContainer.nativeElement.offsetWidth;\n    } else {\n      this.width = this.multipleContainer.nativeElement.offsetWidth;\n    }\n  }\n\n  updatePosition() {\n    setTimeout(() => {\n      const docEl: any = this.document.documentElement;\n      let elPosition = 0;\n      if (this.isBrowser) {\n        elPosition =\n          this.el.nativeElement.getBoundingClientRect().bottom +\n          this.document.documentElement.scrollTop;\n      }\n      const selectSpan = this.selectionSpan.nativeElement;\n      const originHeight = this.outline\n        ? this.OUTLINE_DROPDOWN_TOP_OFFSET\n        : selectSpan.offsetHeight;\n      this.left = selectSpan.offsetLeft;\n      const bottom: any = docEl.scrollTop + docEl.clientHeight;\n      const dropdownHeight =\n        this.dropdownMaxHeight > this.dropdownHeight ? this.dropdownHeight : this.dropdownMaxHeight;\n      this.updateDropdownHeight();\n      if (elPosition + dropdownHeight >= bottom) {\n        this.top = originHeight - dropdownHeight - this.filterHeight;\n      } else {\n        this.top = this.outline ? selectSpan.offsetHeight + this.OUTLINE_DROPDOWN_BOTTOM_OFFSET : 0;\n      }\n      this.cdRef.markForCheck();\n    }, 0);\n  }\n\n  private _updateAppendedPosition() {\n    if (this.isBrowser) {\n      const selectRect: ClientRect = this.el.nativeElement.getBoundingClientRect();\n      const scrollTop = this.document.documentElement.scrollTop || this.document.body.scrollTop;\n      const offsetTop = selectRect.top + scrollTop;\n      const height = selectRect.height;\n      const dropdownHeight =\n        this.dropdownMaxHeight > this.dropdownHeight ? this.dropdownHeight : this.dropdownMaxHeight;\n\n      this.left = selectRect.left;\n      if (\n        offsetTop + dropdownHeight + this.filterHeight >\n        scrollTop + this.document.documentElement.clientHeight\n      ) {\n        if (this.outline) {\n          this.top =\n            offsetTop - dropdownHeight + this.OUTLINE_DROPDOWN_TOP_OFFSET - this.filterHeight;\n        } else {\n          this.top = offsetTop - dropdownHeight + height - this.filterHeight;\n        }\n      } else {\n        this.top = this.outline\n          ? offsetTop + height + this.OUTLINE_DROPDOWN_BOTTOM_OFFSET\n          : offsetTop;\n      }\n    }\n  }\n\n  private _appendDropdown() {\n    if (this.isBrowser) {\n      const body = this.document.querySelector('body');\n      const dropdown = this.dropdown._elementRef.nativeElement;\n\n      if (body) {\n        this.renderer.appendChild(body, dropdown);\n      }\n    }\n  }\n\n  updateFilterWidth() {\n    if (typeof this.filterInput !== 'undefined') {\n      const value: string = this.filterInput.nativeElement.value;\n      this.filterInputWidth =\n        value.length === 0 ? 1 + this.placeholderView.length * 10 : 1 + value.length * 10;\n    }\n  }\n}\n"]}