{"version":3,"file":"select-dropdown.component.d.ts","sources":["../../../../../projects/ng-uikit-pro-standard/src/lib/pro/material-select/select-dropdown.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AfterViewInit,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  ElementRef,\n  HostListener,\n  Renderer2,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  SimpleChanges,\n  OnDestroy,\n} from '@angular/core';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { Option } from './option';\nimport { OptionList } from './option-list';\nimport { Subject } from 'rxjs';\nimport { debounceTime, takeUntil, tap, map } from 'rxjs/operators';\nimport { A, NINE, Z, ZERO } from '../../free/utils/keyboard-navigation';\n\n@Component({\n  selector: 'mdb-select-dropdown',\n  templateUrl: 'select-dropdown.component.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('dropdownAnimation', [\n      state('invisible', style({ opacity: 0, height: '0px' })),\n      state('visible', style({ opacity: 1, height: '*' })),\n      transition('invisible => visible', animate('300ms ease')),\n      transition('visible => invisible', animate('300ms ease')),\n    ]),\n  ],\n})\nexport class SelectDropdownComponent implements AfterViewInit, OnChanges, OnInit, OnDestroy {\n  @Input() filterEnabled: boolean;\n  @Input() filterAutocomplete: boolean;\n  @Input() highlightColor: string;\n  @Input() highlightTextColor: string;\n  @Input() left: number;\n  @Input() multiple: boolean;\n  @Input() notFoundMsg: string;\n  @Input() optionList: OptionList;\n  @Input() top: number;\n  @Input() width: number;\n  @Input() placeholder: string;\n  @Input() customClass = '';\n  @Input() visibleOptions = 4;\n  @Input() dropdownHeight: number;\n  @Input() dropdownMaxHeight: number;\n  @Input() optionHeight: number;\n  @Input() enableSelectAll: boolean;\n  @Input() selectAllLabel = 'Select all';\n  @Input() outline = false;\n\n  @Output() close = new EventEmitter<boolean>();\n  @Output() optionClicked = new EventEmitter<Option>();\n  @Output() singleFilterClick = new EventEmitter<null>();\n  @Output() singleFilterInput = new EventEmitter<string>();\n  @Output() singleFilterKeydown = new EventEmitter<any>();\n  @Output() animationDone = new EventEmitter<any>();\n  @Output() animationStart = new EventEmitter<any>();\n  @Output() selectAll = new EventEmitter<boolean>();\n\n  @ViewChild('filterInput') filterInput: any;\n  @ViewChild('optionsList', { static: true }) optionsList: any;\n  @ViewChild('dropdownContent', { static: true }) dropdownContent: ElementRef;\n  @ViewChild('customContent', { static: true }) customContent: ElementRef;\n\n  disabledColor = '#fff';\n  disabledTextColor = '9e9e9e';\n\n  // Used in sliding-down animation\n  state = 'invisible';\n  startHeight: any = 0;\n  endHeight: any = 45;\n\n  public hasOptionsItems = true;\n\n  private _destroy = new Subject<void>();\n  private _pressedKeysStream = new Subject<string>();\n  private _pressedKeys: string[] = [];\n\n  selectAllSelected = false;\n\n  constructor(\n    public _elementRef: ElementRef,\n    public _renderer: Renderer2,\n    private cdRef: ChangeDetectorRef\n  ) {}\n\n  highlightedItem: any;\n  searchIndex = 0;\n  previousKey = '';\n\n  @HostListener('window: keydown', ['$event'])\n  onWindowKeydown(event: any) {\n    if (\n      (event.keyCode >= A && event.keyCode <= Z) ||\n      (event.keyCode >= ZERO && event.keyCode <= NINE)\n    ) {\n      this._pressedKeysStream.next(String.fromCharCode(event.keyCode));\n    }\n  }\n\n  highlightOptionByTyping() {\n    this._pressedKeysStream\n      .pipe(\n        tap((key: string) => this._pressedKeys.push(key)),\n        map(() => this._pressedKeys.join('').toLocaleLowerCase()),\n        debounceTime(200),\n        takeUntil(this._destroy)\n      )\n      .subscribe((searchKey: string) => {\n        const items = Array.from(this.optionList['_options'])\n          .filter((elem: any) => !elem.group)\n          .filter((elem: any) => !elem.disabled)\n          .map((el: any) => el.wrappedOption.label || el.wrappedOption.value);\n\n        this.navigateThroughArray(searchKey, items);\n        this.previousKey = searchKey;\n      });\n  }\n\n  navigateThroughArray(key: string, itemSource: any) {\n    const items = itemSource.filter((el: any) =>\n      el\n        .toString()\n        .toLowerCase()\n        .startsWith(key.toString().toLowerCase())\n    );\n    if (this.searchIndex > items.length - 1 || key !== this.previousKey) {\n      this.searchIndex = 0;\n    }\n    this.highlightedItem = this.optionList.filtered.find(\n      (el: any) => el.wrappedOption.label === items[this.searchIndex]\n    );\n\n    this.searchIndex++;\n\n    if (this.highlightedItem) {\n      this.optionList.highlightOption(this.highlightedItem);\n      this.cdRef.markForCheck();\n    }\n\n    this.moveHighlightedIntoView();\n    this._pressedKeys = [];\n  }\n\n  /** Event handlers. **/\n\n  @HostListener('keyup') onkeyup() {\n    this.hasOptionsItems = this.optionList.filtered.length > 0;\n    this.updateSelectAllState();\n  }\n\n  @HostListener('input') onkeydown() {\n    this.setOptionHeight();\n  }\n\n  ngOnInit() {\n    this.updateSelectAllState();\n    this.optionsReset();\n    this.setDropdownHeight();\n    this.setVisibleOptionsNumber();\n    this.highlightOptionByTyping();\n  }\n\n  setDropdownHeight() {\n    this.optionList.options.filter(el => () => {\n      if (el.icon) {\n        this._renderer.setStyle(\n          this.optionsList.nativeElement,\n          'height',\n          this.dropdownHeight + 8 + 'px'\n        );\n      } else {\n        this._renderer.setStyle(\n          this.optionsList.nativeElement,\n          'height',\n          this.dropdownHeight + 'px'\n        );\n      }\n    });\n  }\n\n  setVisibleOptionsNumber() {\n    this._renderer.setStyle(\n      this.optionsList.nativeElement,\n      'max-height',\n      this.dropdownMaxHeight + 'px'\n    );\n  }\n\n  setOptionHeight() {\n    const optionsItems = Array.from(this.optionsList.nativeElement.firstElementChild.children);\n    optionsItems.forEach((el: any) => {\n      const isCustomElement = el.classList.contains('custom-select-content');\n      if (el.firstElementChild) {\n        if (this.optionHeight && el.firstElementChild.tagName !== 'IMG' && !isCustomElement) {\n          this._renderer.setStyle(el.firstElementChild, 'height', `${this.optionHeight}px`);\n        }\n        if (el.firstElementChild.tagName !== 'IMG' && !isCustomElement) {\n          this._renderer.setStyle(el.firstElementChild, 'line-height', `${this.optionHeight}px`);\n        }\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.hasOwnProperty('optionList')) {\n      this.optionsReset();\n    }\n\n    if (changes.hasOwnProperty('dropdownHeight')) {\n      this.setDropdownHeight();\n    }\n\n    const container = this._elementRef.nativeElement.classList;\n    setTimeout(() => {\n      container.add('fadeInSelect');\n    }, 200);\n  }\n\n  ngAfterViewInit() {\n    // Sliding-down animation\n    this.endHeight = this.dropdownContent.nativeElement.clientHeight;\n    this.state = this.state === 'invisible' ? 'visible' : 'invisible';\n    this.cdRef.detectChanges();\n\n    if (this.multiple) {\n      const disabledElements = this._elementRef.nativeElement.querySelectorAll(\n        '.disabled.optgroup'\n      );\n\n      for (let i = 0; i < disabledElements.length; i++) {\n        this._renderer.setStyle(\n          disabledElements[i].firstElementChild.lastElementChild,\n          'display',\n          'none'\n        );\n      }\n    }\n\n    this.setOptionHeight();\n\n    this.moveHighlightedIntoView();\n    if (this.filterEnabled) {\n      setTimeout(() => {\n        this.filterInput.nativeElement.focus();\n      }, 0);\n    }\n  }\n\n  // Filter input (single select).\n\n  onSingleFilterClick() {\n    this.singleFilterClick.emit(null);\n  }\n\n  onSingleFilterInput(event: any) {\n    this.singleFilterInput.emit(event.target.value);\n  }\n\n  onSingleFilterKeydown(event: any) {\n    this.singleFilterKeydown.emit(event);\n  }\n\n  // Options list.\n\n  onOptionsWheel(event: any) {\n    this.handleOptionsWheel(event);\n  }\n\n  onOptionClick(option: Option) {\n    this.optionClicked.emit(option);\n    this.updateSelectAllState();\n  }\n\n  /** Initialization. **/\n\n  private optionsReset() {\n    this.optionList.filter('');\n    this.optionList.highlight();\n  }\n\n  /** View. **/\n\n  getOptionStyle(option: Option): any {\n    if (option.highlighted || option.hovered) {\n      const optionStyle: any = {};\n      optionStyle['height.px'] = this.optionHeight;\n      if (typeof this.highlightColor !== 'undefined') {\n        optionStyle['background-color'] = this.highlightColor;\n      }\n      if (typeof this.highlightTextColor !== 'undefined') {\n        optionStyle['color'] = this.highlightTextColor;\n      }\n      return optionStyle;\n    } else {\n      return {};\n    }\n  }\n\n  onSelectAllClick() {\n    this.selectAllSelected = !this.selectAllSelected;\n    this.selectAll.emit(this.selectAllSelected);\n  }\n\n  updateSelectAllState() {\n    const areAllSelected = this.optionList.filtered\n      .filter((option: Option) => !option.disabled)\n      .every((option: Option) => {\n        return option.selected ? true : false;\n      });\n\n    areAllSelected ? (this.selectAllSelected = true) : (this.selectAllSelected = false);\n    this.cdRef.detectChanges();\n  }\n\n  clearFilterInput() {\n    if (this.filterEnabled) {\n      this.filterInput.nativeElement.value = '';\n    }\n  }\n\n  onAnimationDone() {\n    this.animationDone.emit();\n  }\n\n  onAnimationStart() {\n    this.animationStart.emit();\n  }\n\n  moveHighlightedIntoView() {\n    let listHeight: number;\n    const list = this.optionsList.nativeElement;\n    listHeight =\n      this.multiple && this.enableSelectAll\n        ? list.offsetHeight - this.optionHeight\n        : list.offsetHeight;\n\n    const itemIndex = this.optionList.getHighlightedIndex();\n\n    if (itemIndex > -1) {\n      const item = list.children[0].children[itemIndex];\n      const itemHeight = item.offsetHeight;\n\n      const itemTop = itemIndex * itemHeight;\n      const itemBottom = itemTop + itemHeight;\n\n      const viewTop = list.scrollTop;\n      const viewBottom = viewTop + listHeight;\n\n      if (itemBottom > viewBottom) {\n        list.scrollTop = itemBottom - listHeight;\n      } else if (itemTop < viewTop) {\n        list.scrollTop = itemTop;\n      }\n    }\n  }\n\n  private handleOptionsWheel(e: any) {\n    const div = this.optionsList.nativeElement;\n    const atTop = div.scrollTop === 0;\n    const atBottom = div.offsetHeight + div.scrollTop === div.scrollHeight;\n\n    if (atTop && e.deltaY < 0) {\n      e.preventDefault();\n    } else if (atBottom && e.deltaY > 0) {\n      e.preventDefault();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n  }\n}\n"]}