{"version":3,"file":"overlay.d.ts","sources":["../../../../../../projects/ng-uikit-pro-standard/src/lib/pro/alerts/overlay/overlay.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,wBAAwB,EAAc,cAAc,EAAE,MAAM,eAAe,CAAC;AAErF,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C,OAAO,EAAE,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AACvD,OAAO,EAAE,uBAAuB,EAAE,MAAM,0BAA0B,CAAC;AAGnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AACF,qBACc,OAAO;AACtB,IACgB,OAAO,CAAC,iBAAiB;AAAE,IAC3B,OAAO,CAAC,yBAAyB;AAAE,IACnC,OAAO,CAAC,OAAO;AAAE,IAH7B,OAAO,CAAC,aAAa,CAAW;AACpC,gBAAwB,iBAAiB,EAAE,gBAAgB,EACnC,yBAAyB,EAAE,wBAAwB,EACnD,OAAO,EAAE,cAAc;AAAG,IAChD;AACF;AACE;AACE,OAAC;AACL,IAAE,MAAM,CAAC,aAAa,EAAE,MAAM,EAAE,gBAAgB,CAAC,EAAE,uBAAuB,GAAG,UAAU;AAAE,IAKvF,cAAc,CAAC,aAAa,EAAE,MAAM,EAAE,gBAAgB,CAAC,EAAE,uBAAuB,GAAG,WAAW;AAAE,IAOhG;AACF;AACE;AACE,OAAC;AACL,IAAE,OAAO,CAAC,kBAAkB;AAAE,IAa5B;AACF;AACE;AACE;AAEJ,OADK;AACL,IAAE,OAAO,CAAC,iBAAiB;AAAE,IAI3B;AACF;AACE;AACE,OAAC;AACL,IAAE,OAAO,CAAC,iBAAiB;;;AAAE,CAG5B;AAGD,yDAAyD;AACzD,eAAO,MAAM,iBAAiB,8CAG7B,CAAC;AACF","sourcesContent":["import { ComponentFactoryResolver, Injectable, ApplicationRef } from '@angular/core';\nimport { DomPortalHost } from '../portal/dom-portal-host';\nimport { OverlayRef } from './overlay-ref';\n\nimport { OverlayContainer } from './overlay-container';\nimport { ToastContainerDirective } from '../toast/toast.directive';\n\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\n @Injectable()\n  export class Overlay {\n    private _paneElements: any = {};\n    constructor(private _overlayContainer: OverlayContainer,\n                private _componentFactoryResolver: ComponentFactoryResolver,\n                private _appRef: ApplicationRef) {}\n  /**\n   * Creates an overlay.\n   * @returns A reference to the created overlay.\n   */\n  create(positionClass: string, overlayContainer?: ToastContainerDirective): OverlayRef {\n    // get existing pane if possible\n    return this._createOverlayRef(this.getPaneElement(positionClass, overlayContainer));\n  }\n\n  getPaneElement(positionClass: string, overlayContainer?: ToastContainerDirective): HTMLElement {\n    if (!this._paneElements[positionClass]) {\n      this._paneElements[positionClass] = this._createPaneElement(positionClass, overlayContainer);\n    }\n    return this._paneElements[positionClass];\n  }\n\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n  private _createPaneElement(positionClass: string, overlayContainer?: ToastContainerDirective): HTMLElement {\n    const pane = document.createElement('div');\n    pane.id = 'toast-container';\n    pane.classList.add(positionClass);\n\n    if (!overlayContainer) {\n      this._overlayContainer.getContainerElement().appendChild(pane);\n    } else {\n      overlayContainer.getContainerElement().appendChild(pane);\n    }\n    return pane;\n  }\n\n  /**\n   * Create a DomPortalHost into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal host.\n   * @returns A portal host for the given DOM element.\n   */\n  private _createPortalHost(pane: HTMLElement): DomPortalHost {\n    return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef);\n  }\n\n  /**\n   * Creates an OverlayRef for an overlay in the given DOM element.\n   * @param pane DOM element for the overlay\n   */\n  private _createOverlayRef(pane: HTMLElement): OverlayRef {\n    return new OverlayRef(this._createPortalHost(pane));\n  }\n}\n\n\n/** Providers for Overlay and its related injectables. */\nexport const OVERLAY_PROVIDERS = [\n  Overlay,\n  OverlayContainer,\n];\n"]}