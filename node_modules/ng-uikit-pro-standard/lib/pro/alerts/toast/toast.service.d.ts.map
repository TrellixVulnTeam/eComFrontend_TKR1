{"version":3,"file":"toast.service.d.ts","sources":["../../../../../../projects/ng-uikit-pro-standard/src/lib/pro/alerts/toast/toast.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Injector, ComponentRef, Inject, SecurityContext } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Overlay } from '../overlay/overlay';\nimport { ComponentPortal } from '../portal/portal';\nimport { GlobalConfig, IndividualConfig, ToastPackage, tsConfig } from './toast.config';\nimport { ToastInjector } from './toast.injector';\nimport { ToastContainerDirective } from './toast.directive';\nimport { TOAST_CONFIG } from './toast.token';\nimport { ToastComponent } from './toast.component';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { ToastRef } from './toast-ref';\n\nexport interface ActiveToast {\n  toastId?: number;\n  message?: string;\n  portal?: ComponentRef<any>;\n  toastRef?: ToastRef<any>;\n  onShown?: Observable<any>;\n  onHidden?: Observable<any>;\n  onTap?: Observable<any>;\n  onAction?: Observable<any>;\n}\n\n@Injectable()\nexport class ToastService {\n  index = 0;\n  previousToastMessage = '';\n  currentlyActive = 0;\n  toasts: ActiveToast[] = [];\n  overlayContainer: ToastContainerDirective;\n\n  constructor(\n    @Inject(TOAST_CONFIG) public toastConfig: GlobalConfig | any,\n    private overlay: Overlay,\n    private _injector: Injector,\n    private sanitizer: DomSanitizer\n  ) {\n    tsConfig.serviceInstance = this;\n\n    function use<T>(source: T, defaultValue: T): T {\n      return toastConfig && source !== undefined ? source : defaultValue;\n    }\n\n    this.toastConfig = this.applyConfig(toastConfig);\n    // Global\n    this.toastConfig.maxOpened = use(this.toastConfig.maxOpened, 0);\n    this.toastConfig.autoDismiss = use(this.toastConfig.autoDismiss, false);\n    this.toastConfig.newestOnTop = use(this.toastConfig.newestOnTop, true);\n    this.toastConfig.preventDuplicates = use(this.toastConfig.preventDuplicates, false);\n    this.toastConfig.opacity = use(this.toastConfig.opacity, 0.5);\n    if (!this.toastConfig.iconClasses) {\n      this.toastConfig.iconClasses = {};\n    }\n    this.toastConfig.iconClasses.error = this.toastConfig.iconClasses.error || 'md-toast-error';\n    this.toastConfig.iconClasses.info = this.toastConfig.iconClasses.info || 'md-toast-info';\n    this.toastConfig.iconClasses.success =\n      this.toastConfig.iconClasses.success || 'md-toast-success';\n    this.toastConfig.iconClasses.warning =\n      this.toastConfig.iconClasses.warning || 'md-toast-warning';\n\n    // Individual\n    this.toastConfig.timeOut = use(this.toastConfig.timeOut, 5000);\n    this.toastConfig.closeButton = use(this.toastConfig.closeButton, false);\n    this.toastConfig.extendedTimeOut = use(this.toastConfig.extendedTimeOut, 1000);\n    this.toastConfig.progressBar = use(this.toastConfig.progressBar, false);\n    this.toastConfig.enableHtml = use(this.toastConfig.enableHtml, false);\n    this.toastConfig.toastClass = use(this.toastConfig.toastClass, 'md-toast');\n    this.toastConfig.positionClass = use(this.toastConfig.positionClass, 'md-toast-top-right');\n    this.toastConfig.titleClass = use(this.toastConfig.titleClass, 'md-toast-title');\n    this.toastConfig.messageClass = use(this.toastConfig.messageClass, 'md-toast-message');\n    this.toastConfig.tapToDismiss = use(this.toastConfig.tapToDismiss, true);\n    this.toastConfig.toastComponent = use(this.toastConfig.toastComponent, ToastComponent);\n    this.toastConfig.onActivateTick = use(this.toastConfig.onActivateTick, false);\n    this.toastConfig.actionButton = use(this.toastConfig.actionButton, '');\n    this.toastConfig.actionButtonClass = use(this.toastConfig.actionButtonClass, '');\n    this.toastConfig.opacity = use(this.toastConfig.opacity, 0.5);\n  }\n\n  /** show successful toast */\n  show(message: string, title?: string | any, override?: IndividualConfig | any, type = '') {\n    const config = override ? this.applyConfig(override) : this.applyConfig({});\n    const toastType = type.includes('md-toast') ? type : `md-toast-${type}`;\n    return this._buildNotification(toastType, message, title, config);\n  }\n\n  /** show successful toast */\n  success(message: string, title?: string | any, override?: IndividualConfig) {\n    const type: any = this.toastConfig.iconClasses.success;\n    return this._buildNotification(type, message, title, this.applyConfig(override));\n  }\n\n  /** show error toast */\n  error(message: string, title?: string | any, override?: IndividualConfig) {\n    const type: any = this.toastConfig.iconClasses.error;\n    return this._buildNotification(type, message, title, this.applyConfig(override));\n  }\n\n  /** show info toast */\n  info(message: string, title?: string | any, override?: IndividualConfig) {\n    const type: any = this.toastConfig.iconClasses.info;\n    return this._buildNotification(type, message, title, this.applyConfig(override));\n  }\n\n  /** show warning toast */\n  warning(message: string, title?: string | any, override?: IndividualConfig) {\n    const type: any = this.toastConfig.iconClasses.warning;\n    return this._buildNotification(type, message, title, this.applyConfig(override));\n  }\n\n  /**\n   * Remove all or a single toast by id\n   */\n  clear(toastId?: number) {\n    let toast: any;\n    for (toast of this.toasts) {\n      if (toastId !== undefined) {\n        if (toast.toastId === toastId) {\n          toast.toastRef.manualClose();\n          return;\n        }\n      } else {\n        toast.toastRef.manualClose();\n      }\n    }\n  }\n\n  /**\n   * Remove and destroy a single toast by id\n   */\n  remove(toastId: number) {\n    const found: any = this._findToast(toastId);\n    if (!found) {\n      return false;\n    }\n    found.activeToast.toastRef.close();\n    this.toasts.splice(found.index, 1);\n    this.currentlyActive = this.currentlyActive - 1;\n    if (!this.toastConfig.maxOpened || !this.toasts.length) {\n      return false;\n    }\n    if (this.currentlyActive <= +this.toastConfig.maxOpened && this.toasts[this.currentlyActive]) {\n      const p: any = this.toasts[this.currentlyActive].toastRef;\n      if (!p.isInactive()) {\n        this.currentlyActive = this.currentlyActive + 1;\n        p.activate();\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determines if toast message is already shown\n   */\n  isDuplicate(message: string) {\n    for (let i = 0; i < this.toasts.length; i++) {\n      if (this.toasts[i].message === message) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** create a clone of global config and apply individual settings */\n  private applyConfig(override: IndividualConfig = {}): GlobalConfig {\n    function use<T>(source: T, defaultValue: T): T {\n      return override && source !== undefined ? source : defaultValue;\n    }\n\n    const current: GlobalConfig = { ...this.toastConfig };\n    current.closeButton = use(override.closeButton, current.closeButton);\n    current.extendedTimeOut = use(override.extendedTimeOut, current.extendedTimeOut);\n    current.progressBar = use(override.progressBar, current.progressBar);\n    current.timeOut = use(override.timeOut, current.timeOut);\n    current.enableHtml = use(override.enableHtml, current.enableHtml);\n    current.toastClass = use(override.toastClass, current.toastClass);\n    current.positionClass = use(override.positionClass, current.positionClass);\n    current.titleClass = use(override.titleClass, current.titleClass);\n    current.messageClass = use(override.messageClass, current.messageClass);\n    current.tapToDismiss = use(override.tapToDismiss, current.tapToDismiss);\n    current.toastComponent = use(override.toastComponent, current.toastComponent);\n    current.onActivateTick = use(override.onActivateTick, current.onActivateTick);\n    current.actionButton = use(override.actionButton, current.actionButton);\n    current.actionButtonClass = use(override.actionButtonClass, current.actionButtonClass);\n    current.opacity = use(override.opacity, current.opacity);\n    return current;\n  }\n\n  /**\n   * Find toast object by id\n   */\n  private _findToast(toastId: number): { index: number; activeToast: ActiveToast } | null {\n    for (let i = 0; i < this.toasts.length; i++) {\n      if (this.toasts[i].toastId === toastId) {\n        return { index: i, activeToast: this.toasts[i] };\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Creates and attaches toast data to component\n   * returns null if toast is duplicate and preventDuplicates == True\n   */\n  private _buildNotification(\n    toastType: string,\n    message: string,\n    title: string,\n    config: GlobalConfig\n  ): ActiveToast | null | any {\n    // max opened and auto dismiss = true\n    if (this.toastConfig.preventDuplicates && this.isDuplicate(message)) {\n      return null;\n    }\n    this.previousToastMessage = message;\n    let keepInactive = false;\n    if (this.toastConfig.maxOpened && this.currentlyActive >= this.toastConfig.maxOpened) {\n      keepInactive = true;\n      if (this.toastConfig.autoDismiss) {\n        this.clear(this.toasts[this.toasts.length - this.toastConfig.maxOpened].toastId);\n      }\n    }\n    if (keepInactive) {\n      return;\n    }\n    const overlayRef = this.overlay.create(config.positionClass, this.overlayContainer);\n    this.index = this.index + 1;\n    let sanitizedMessage: any = message;\n    if (message && config.enableHtml) {\n      sanitizedMessage = this.sanitizer.sanitize(SecurityContext.HTML, message);\n    }\n    const toastRef = new ToastRef(overlayRef);\n    const toastPackage = new ToastPackage(\n      this.index,\n      config,\n      sanitizedMessage,\n      title,\n      toastType,\n      toastRef\n    );\n    const ins: ActiveToast | any = {\n      toastId: this.index,\n      message,\n      toastRef,\n      onShown: toastRef.afterActivate(),\n      onHidden: toastRef.afterClosed(),\n      onTap: toastPackage.onTap(),\n      onAction: toastPackage.onAction(),\n    };\n    const toastInjector = new ToastInjector(toastPackage, this._injector);\n    const component = new ComponentPortal(config.toastComponent, toastInjector);\n    ins.portal = overlayRef.attach(component, this.toastConfig.newestOnTop);\n    if (!keepInactive) {\n      setTimeout(() => {\n        ins.toastRef.activate();\n        this.currentlyActive = this.currentlyActive + 1;\n      });\n    }\n    this.toasts.push(ins);\n    return ins;\n  }\n}\n"]}