{"version":3,"file":"toast.component.d.ts","sources":["../../../../../../projects/ng-uikit-pro-standard/src/lib/pro/alerts/toast/toast.component.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,cAAc,EAId,SAAS,EAEV,MAAM,eAAe,CAAC;AAGvB,OAAO,EAAE,QAAQ,EAAE,MAAM,2BAA2B,CAAC;AAErD,OAAO,EAAE,YAAY,EAAE,MAAM,MAAM,CAAC;AAEpC,OAAO,EAAE,YAAY,EAAE,YAAY,EAAY,MAAM,gBAAgB,CAAC;;AAEtE,qBAea,cAAe,YAAW,SAAS;AAChD,IA0BqB,YAAY,EAAE,YAAY;AAAE,IAAA,SAAS,CAAC,MAAM,EAAE,cAAc;AAAE,IA1BjF,OAAO,EAAE,MAAM,GAAG,QAAQ,CAAC;AAC7B,IAAE,KAAK,EAAE,MAAM,CAAC;AAChB,IAAE,OAAO,EAAE,YAAY,CAAC;AACxB,IAAE,4BAA4B;AAC9B,IAAE,KAAK,SAAM;AACb,IAAE,KAAK,SAAc;AACrB,IAAE,yDAAyD;AAC3D,IAAwB,YAAY,SAAM;AAC1C,IAAE,yBAAyB;AAC3B,IAAE,IACI,eAAe;AACpB;AACU;AACP;AACa;AAAW,MAGzB;AACH,IAAE,OAAO,EAAE,MAAM,GAAG,SAAS,CAAC;AAC9B,IAAE,OAAO,EAAE,GAAG,CAAC;AACf,IAAE,UAAU,EAAE,GAAG,CAAC;AAClB,IAAE,QAAQ,EAAE,MAAM,CAAC;AACnB,IAAE,GAAG,EAAE,YAAY,CAAC;AACpB,IAAE,IAAI,EAAE,YAAY,CAAC;AACrB,IAAE,SAAS,CAAC,YAAY,EAAE,GAAG,CAAC;AAC9B,gBACqB,YAAY,EAAE,YAAY,EAAY,MAAM,EAAE,cAAc;AAAG,IAiBlF,WAAW;AACR,IAKH;AACF;AACE,OAAG;AACL,IAAE,aAAa;AACV,IAcH;AACF;AACE,OAAG;AACL,IAAE,cAAc;AACX,IAWH;AACF;AACE,OAAG;AACL,IAAE,MAAM;AACH,IAQH,aAAa;AACV,IAKH,QAAQ;AACL,IASH,WAAW;AACR,IAYH,gBAAgB;;;AACb,CAWJ;AACD","sourcesContent":["import {\n  ApplicationRef,\n  Component,\n  HostBinding,\n  HostListener,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\n\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { SafeHtml } from '@angular/platform-browser';\n\nimport { Subscription } from 'rxjs';\n\nimport { GlobalConfig, ToastPackage, tsConfig } from './toast.config';\n\n@Component({\n  selector: 'mdb-toast-component',\n  templateUrl: './toast.component.html',\n  styleUrls: ['./../alerts-module.scss'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('flyInOut', [\n      state('inactive', style({ opacity: 0 })),\n      state('active', style({ opacity: '{{ opacity }}' }), { params: { opacity: 0.5 } }),\n      state('removed', style({ opacity: 0 })),\n      transition('inactive => active', animate('300ms ease-in')),\n      transition('active => removed', animate('300ms ease-in')),\n    ]),\n  ],\n})\nexport class ToastComponent implements OnDestroy {\n  message: string | SafeHtml;\n  title: string;\n  options: GlobalConfig;\n  /** width of progress bar */\n  width = -1;\n  state = 'inactive';\n  /** a combination of toast type and options.toastClass */\n  @HostBinding('class') toastClasses = '';\n  /** controls animation */\n  @HostBinding('@flyInOut')\n  get animationParams() {\n    return {\n      value: this.state,\n      params: {\n        opacity: this.opacity,\n      },\n    };\n  }\n  opacity: number | undefined;\n  timeout: any;\n  intervalId: any;\n  hideTime: number;\n  sub: Subscription;\n  sub1: Subscription;\n  protected toastService: any;\n\n  constructor(public toastPackage: ToastPackage, protected appRef: ApplicationRef) {\n    this.toastService = tsConfig.serviceInstance;\n\n    this.message = toastPackage.message;\n    this.title = toastPackage.title;\n    this.options = toastPackage.config;\n    this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n    this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n      this.activateToast();\n    });\n    this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n      this.remove();\n    });\n\n    this.opacity = this.options.opacity;\n  }\n\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n    this.sub1.unsubscribe();\n    clearInterval(this.intervalId);\n    clearTimeout(this.timeout);\n  }\n  /**\n   * activates toast and sets timeout\n   */\n  activateToast() {\n    this.state = 'active';\n    if (this.options.timeOut !== 0) {\n      this.timeout = setTimeout(() => {\n        this.remove();\n      }, this.options.timeOut);\n      this.hideTime = new Date().getTime() + this.options.timeOut;\n      if (this.options.progressBar) {\n        this.intervalId = setInterval(() => this.updateProgress(), 10);\n      }\n    }\n    if (this.options.onActivateTick) {\n      this.appRef.tick();\n    }\n  }\n  /**\n   * updates progress bar width\n   */\n  updateProgress() {\n    if (this.width === 0) {\n      return;\n    }\n    const now = new Date().getTime();\n    const remaining = this.hideTime - now;\n    this.width = (remaining / this.options.timeOut) * 100;\n    if (this.width <= 0) {\n      this.width = 0;\n    }\n  }\n\n  /**\n   * tells toastrService to remove this toast after animation time\n   */\n  remove() {\n    if (this.state === 'removed') {\n      return;\n    }\n    clearTimeout(this.timeout);\n    this.state = 'removed';\n    this.timeout = setTimeout(() => this.toastService.remove(this.toastPackage.toastId), 250);\n  }\n\n  onActionClick() {\n    this.toastPackage.triggerAction();\n    this.remove();\n  }\n\n  @HostListener('click')\n  tapToast() {\n    if (this.state === 'removed') {\n      return;\n    }\n    this.toastPackage.triggerTap();\n    if (this.options.tapToDismiss) {\n      this.remove();\n    }\n  }\n  @HostListener('mouseenter')\n  stickAround() {\n    if (this.state === 'removed') {\n      return;\n    }\n    clearTimeout(this.timeout);\n    this.options.timeOut = 0;\n    this.hideTime = 0;\n\n    // disable progressBar\n    clearInterval(this.intervalId);\n    this.width = 0;\n  }\n  @HostListener('mouseleave')\n  delayedHideToast() {\n    if (+this.options.extendedTimeOut === 0 || this.state === 'removed') {\n      return;\n    }\n    this.timeout = setTimeout(() => this.remove(), this.options.extendedTimeOut);\n    this.options.timeOut = +this.options.extendedTimeOut;\n    this.hideTime = new Date().getTime() + this.options.timeOut;\n    this.width = 100;\n    if (this.options.progressBar) {\n      this.intervalId = setInterval(() => this.updateProgress(), 10);\n    }\n  }\n}\n"]}