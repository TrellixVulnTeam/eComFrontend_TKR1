{"version":3,"file":"select-filter.component.d.ts","sources":["../../../../../projects/ng-uikit-pro-standard/src/lib/pro/select/select-filter.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAEL,MAAM,EACN,UAAU,EAIV,YAAY,EAGb,MAAM,eAAe,CAAC;;AAGvB,eAAO,MAAM,gCAAgC,EAAE,GAK9C,CAAC;AAEF,qBAKa,wBAAyB,YAAW,MAAM;AACvD,IAmBc,OAAO,CAAC,GAAG;AAAE,IAnBzB,KAAK,EAAE,GAAG,CAAC;AACb,IAAsB,KAAK,EAAE,UAAU,CAAC;AACxC,IACW,WAAW,SAAM;AAC5B,IAAW,YAAY,UAAQ;AAC/B,IACY,QAAQ,CAAC,WAAW,EAAE,YAAY,CAAC,GAAG,CAAC,CAA2B;AAC9E,IAEE,YAAY,CAAC,KAAK,EAAE,GAAG;AACpB,gBASiB,GAAG,EAAE,UAAU;AAAG,IAEtC,QAAQ;AAEP,IAAD,KAAK;AACF,IAGH,qCAAqC;AACvC,IACE,gBAAgB,CAAC,UAAU,EAAE,OAAO;AACjC,IAGH,SAAS,EAAE,CAAC,KAAK,EAAE,GAAG,KAAK,IAAI,CAAY;AAC7C,IACE,UAAU,aAAY;AACxB,IACE,UAAU,CAAC,KAAK,EAAE,GAAG,GAAG,IAAI;AAAE,IAM9B,gBAAgB,CAAC,EAAE,EAAE,CAAC,KAAK,EAAE,GAAG,KAAK,EAAE,GAAG,IAAI;AAAE,IAIhD,iBAAiB,CAAC,EAAE,EAAE,MAAM,EAAE;;;AAC3B,CAEJ;AACD","sourcesContent":["import {\n  Component,\n  OnInit,\n  ElementRef,\n  ViewChild,\n  forwardRef,\n  HostListener,\n  EventEmitter,\n  Output,\n  Input,\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const MDB_SELECT_FILTER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => MdbSelectFilterComponent),\n  multi: true,\n};\n\n@Component({\n  selector: 'mdb-select-filter',\n  templateUrl: './select-filter.component.html',\n  providers: [MDB_SELECT_FILTER_VALUE_ACCESSOR],\n})\nexport class MdbSelectFilterComponent implements OnInit {\n  value: any;\n  @ViewChild('input') input: ElementRef;\n\n  @Input() placeholder = '';\n  @Input() autocomplete = true;\n\n  @Output() readonly inputChange: EventEmitter<any> = new EventEmitter<any>();\n\n  @HostListener('input', ['$event'])\n  _handleInput(event: any) {\n    const valueChanged = this.value !== event.target.value;\n\n    if (valueChanged) {\n      this._onChange(event.target.value);\n      this.inputChange.emit(event.target.value);\n      this.value = event.target.value;\n    }\n  }\n\n  constructor(private _el: ElementRef) {}\n\n  ngOnInit() {}\n\n  focus() {\n    this.input.nativeElement.focus();\n  }\n\n  /** Control value accessor methods */\n\n  setDisabledState(isDisabled: boolean) {\n    this._el.nativeElement.disabled = isDisabled;\n  }\n\n  _onChange: (value: any) => void = () => {};\n\n  _onTouched = () => {};\n\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => {\n      this._el.nativeElement.value = value;\n    });\n  }\n\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n}\n"]}