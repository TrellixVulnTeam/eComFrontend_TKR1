{"version":3,"file":"progressbar.component.d.ts","sources":["../../../../../../projects/ng-uikit-pro-standard/src/lib/pro/progressbars/progress-bars-module/progressbar.component.ts"],"names":[],"mappings":"AAEA;AACA;AACA,GAAG;;AACH,qBAMa,oBAAoB;AACjC,IAAE,iCAAiC;AACnC,IAAW,KAAK,EAAE,SAAS,GAAG,QAAQ,GAAG,MAAM,CAAa;AAC5D,IACE,OAAO,CAAC,MAAM,CAAK;AACrB,IACE,6EAA6E;AAC/E,IAAE,IAEI,KAAK,IAII,MAAM,CAFlB;AACH,IACE,IAAI,KAAK,CAAC,CAAC,EAAE,MAAM,EAElB;AACH,IACE,OAAO,CAAC,YAAY,CAAK;AAC3B,IACE,0DAA0D;AAC5D,IAAE,IACI,WAAW,IAII,MAAM,CAFxB;AACH,IACE,IAAI,WAAW,CAAC,CAAC,EAAE,MAAM,EAExB;AACH,IACE;AACF;AACE;AACE;AACE;AACE;AAEJ,OADC;AACL,IAEE,IAAI,EAAE,aAAa,GAAG,eAAe,GAAG,QAAQ,GAAG,OAAO,CAAiB;AAC7E,IACE,iFAAiF;AACnF,IAAE,iBAAiB;AAClB;AAA2B;AAAO,IAIjC;AACF;AACE;AACE,OAAC;AACL,IAAE,gBAAgB;AACjB;AAA2B;;;AAC3B,CAIA;AACD","sourcesContent":["import { ChangeDetectionStrategy, Component, HostBinding, Input } from '@angular/core';\n\n/**\n * <md-progress-bar> component.\n */\n@Component({\n  selector: 'mdb-progress-bar',\n  templateUrl: './progressbar.component.html',\n  styleUrls: ['./progressbar.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProgressBarComponent {\n  /** Color of the progress bar. */\n  @Input() color: 'primary' | 'accent' | 'warn' = 'primary';\n\n  private _value = 0;\n\n  /** Value of the progressbar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  @HostBinding('attr.aria-valuenow')\n  get value() {\n    return this._value;\n  }\n\n  set value(v: number) {\n    this._value = clamp(v || 0);\n  }\n\n  private _bufferValue = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue() {\n    return this._bufferValue;\n  }\n\n  set bufferValue(v: number) {\n    this._bufferValue = clamp(v || 0);\n  }\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input()\n  @HostBinding('attr.mode')\n  mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return { transform: `scaleX(${scale})` };\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator.  Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return { transform: `scaleX(${scale})` };\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n"]}