{"version":3,"file":"tab.directive.d.ts","sources":["../../../../../projects/ng-uikit-pro-standard/src/lib/pro/tabs-pills/tab.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EAEL,YAAY,EAIZ,WAAW,EACX,UAAU,EACV,MAAM,EAGN,SAAS,EACT,SAAS,EACV,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,eAAe,EAAE,MAAM,oBAAoB,CAAC;;AAGrD,qBACa,YAAa,YAAW,MAAM,EAAE,SAAS;AACtD,IAoEW,MAAM,EAAE,eAAe;AAClC,IAAW,EAAE,EAAE,UAAU;AACzB,IAAI,OAAO,CAAC,QAAQ;AAAE,IAtEJ,IAAI,EAAE,MAAM,CAAC;AAC/B,IAAE,sBAAsB;AACxB,IAAkB,OAAO,EAAE,MAAM,CAAC;AAClC,IAAE,uCAAuC;AACzC,IAAE,IACI,QAAQ,IAAI,OAAO,CAEtB;AACH,IAAE,IAAI,QAAQ,CAAC,KAAK,EAAE,OAAO,EAM1B;AACH,IAAE,OAAO,CAAC,SAAS,CAAS;AAC5B,IAAE,kEAAkE;AACpE,IAAkB,SAAS,EAAE,OAAO,CAAC;AACrC,IAAE,wDAAwD;AAC1D,IAAkB,WAAW,EAAE,MAAM,CAAC;AACtC,IACW,QAAQ,EAAE,MAAM,CAAC;AAC5B,IACE,8BAA8B;AAChC,IAAE,IACW,MAAM,IAAI,OAAO,CAE3B;AACH,IACE,IAAW,MAAM,CAAC,MAAM,EAAE,OAAO,EAoBhC;AACH,IACE,4FAA4F;AAC9F,IAAmB,MAAM,EAAE,YAAY,CAAC,YAAY,CAAC,CAAsB;AAC3E,IAAE,gGAAgG;AAClG,IAAmB,QAAQ,EAAE,YAAY,CAAC,YAAY,CAAC,CAAsB;AAC7E,IAAE,uCAAuC;AACzC,IAAmB,OAAO,EAAE,YAAY,CAAC,YAAY,CAAC,CAAsB;AAC5E,IACwC,QAAQ,UAAQ;AACxD,IAAoC,IAAI,UAAQ;AAChD,IACS,UAAU,EAAE,WAAW,CAAC,GAAG,CAAC,CAAC;AACtC,IAAE,OAAO,CAAC,OAAO,CAAS;AAC1B,IACE,SAAS,EAAE,GAAG,CAAQ;AACxB,gBAEyB,UAAU,EAAE,MAAM,EAChC,MAAM,EAAE,eAAe,EACvB,EAAE,EAAE,UAAU,EACb,QAAQ,EAAE,SAAS;AAC7B,IAKO,QAAQ,IAAI,IAAI;AAAE,IAMzB,WAAW;;;AACR,CAEJ;AACD","sourcesContent":["import {\n  Directive,\n  EventEmitter,\n  HostBinding,\n  Input,\n  Output,\n  TemplateRef,\n  ElementRef,\n  OnInit,\n  Inject,\n  PLATFORM_ID,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { TabsetComponent } from './tabset.component';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Directive({ selector: 'mdb-tab, [mdbTab]' })\nexport class TabDirective implements OnInit, OnDestroy {\n  @Input() public type: string;\n  /** tab header text */\n  @Input() public heading: string;\n  /** if true tab can not be activated */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = value;\n\n    if (this._disabled && this._active) {\n      this.tabset.initActiveTab();\n    }\n  }\n  private _disabled = false;\n  /** if true tab can be removable, additional button will appear */\n  @Input() public removable: boolean;\n  /** if set, will be added to the tab's class atribute */\n  @Input() public customClass: string;\n\n  @Input() tabOrder: number;\n\n  /** tab active state toggle */\n  @Input()\n  public get active(): boolean {\n    return this._active;\n  }\n\n  public set active(active: boolean) {\n    if ((this.disabled && active) || !active) {\n      if (this._active && !active) {\n        this.renderer.removeClass(this.el.nativeElement, 'show');\n        this.renderer.removeClass(this.el.nativeElement, 'active');\n        this._active = active;\n        this.deselect.emit(this);\n      }\n      return;\n    }\n    this.renderer.addClass(this.el.nativeElement, 'show');\n    this.renderer.addClass(this.el.nativeElement, 'active');\n    this._active = active;\n    this.select.emit(this);\n\n    this.tabset.tabs.forEach((mdbTab: TabDirective) => {\n      if (mdbTab !== this) {\n        mdbTab.active = false;\n      }\n    });\n  }\n\n  /** fired when tab became active, $event:Tab equals to selected instance of Tab component */\n  @Output() public select: EventEmitter<TabDirective> = new EventEmitter();\n  /** fired when tab became inactive, $event:Tab equals to deselected instance of Tab component */\n  @Output() public deselect: EventEmitter<TabDirective> = new EventEmitter();\n  /** fired before tab will be removed */\n  @Output() public removed: EventEmitter<TabDirective> = new EventEmitter();\n\n  @HostBinding('class.tab-pane') public addClass = true;\n  @HostBinding('class.fade') public test = true;\n\n  public headingRef: TemplateRef<any>;\n  private _active = false;\n\n  isBrowser: any = null;\n\n  public constructor(\n    @Inject(PLATFORM_ID) platformId: string,\n    public tabset: TabsetComponent,\n    public el: ElementRef,\n    private renderer: Renderer2\n  ) {\n    this.isBrowser = isPlatformBrowser(platformId);\n    this.tabset = tabset;\n  }\n\n  public ngOnInit(): void {\n    this.removable = this.removable;\n    this.tabset.addTab(this);\n    this.tabset.initActiveTab();\n  }\n\n  ngOnDestroy() {\n    this.tabset.removeTab(this);\n  }\n}\n"]}