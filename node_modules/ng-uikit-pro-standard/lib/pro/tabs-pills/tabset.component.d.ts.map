{"version":3,"file":"tabset.component.d.ts","sources":["../../../../../projects/ng-uikit-pro-standard/src/lib/pro/tabs-pills/tabset.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  PLATFORM_ID,\n  Renderer2,\n  ViewChild,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\n\nimport { TabDirective } from './tab.directive';\nimport { TabsetConfig } from './tabset.config';\n\nimport { WavesDirective } from '../../free/waves/waves-effect.directive';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Component({\n  selector: 'mdb-tabset',\n  templateUrl: 'tabset.component.html',\n  styleUrls: ['./tabs-pills-module.scss'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [WavesDirective],\n})\nexport class TabsetComponent implements OnDestroy, OnInit, AfterViewInit {\n  public tabs: TabDirective[] = [];\n  public classMap: any = {};\n\n  protected isDestroyed: boolean;\n  protected _vertical: boolean;\n  protected _justified: boolean;\n  protected _type: string;\n\n  public listGetClass: String;\n  public tabsGetClass: String;\n\n  isBrowser: any = null;\n  @HostBinding('class.tab-container') public clazz = true;\n\n  @Input() disableWaves = false;\n  @Input() buttonClass: String;\n  @Input() contentClass: String;\n  @Input() tabsButtonsClass: string;\n  @Input() tabsContentClass: string;\n\n  @ViewChild('itemsList', { static: true }) itemsList: ElementRef;\n  @ViewChildren('tabEl', { read: ElementRef }) tabEl: any;\n\n  @Output()\n  showBsTab: EventEmitter<any> = new EventEmitter<any>();\n  @Output()\n  shownBsTab: EventEmitter<any> = new EventEmitter<any>();\n  @Output()\n  hideBsTab: EventEmitter<any> = new EventEmitter<any>();\n  @Output()\n  hiddenBsTab: EventEmitter<any> = new EventEmitter<any>();\n  @Output()\n  getActiveTab: EventEmitter<any> = new EventEmitter<any>();\n\n  /** if true tabs will be placed vertically */\n  @Input()\n  public get vertical(): boolean {\n    return this._vertical;\n  }\n\n  public set vertical(value: boolean) {\n    this._vertical = value;\n    this.setClassMap();\n  }\n\n  public setActiveTab(index: number): void {\n    if (this.tabs[index - 1].type !== 'content') {\n      this.tabs[index - 1].active = true;\n      this.getActiveTab.emit({\n        el: this.tabs[index - 1],\n        activeTabIndex: index - 1,\n      });\n\n      this.cdRef.detectChanges();\n    } else {\n      this.tabs[index - 1].select.emit(this.tabs[index - 1]);\n    }\n  }\n\n  /** if true tabs fill the container and have a consistent width */\n  @Input()\n  public get justified(): boolean {\n    return this._justified;\n  }\n\n  public set justified(value: boolean) {\n    this._justified = value;\n    this.setClassMap();\n  }\n\n  /** navigation context class: 'tabs' or 'pills' */\n  @Input()\n  public get type(): string {\n    return this._type;\n  }\n\n  public set type(value: string) {\n    this._type = value;\n    this.setClassMap();\n  }\n\n  public constructor(\n    @Inject(PLATFORM_ID) platformId: string,\n    config: TabsetConfig,\n    public ripple: WavesDirective,\n    private cdRef: ChangeDetectorRef,\n    private renderer: Renderer2\n  ) {\n    this.isBrowser = isPlatformBrowser(platformId);\n    Object.assign(this, config);\n  }\n\n  public click(event: any, index: any) {\n    const prev = this.tabEl.toArray()[this.getActive()];\n    const clicked = this.tabEl.toArray()[index];\n\n    this.hideBsTab.emit({\n      target: clicked,\n      relatedTarget: prev,\n    });\n    this.showBsTab.emit({\n      target: clicked,\n      relatedTarget: prev,\n    });\n\n    this.setActiveTab(index + 1);\n\n    if (this.contentClass !== 'vertical' && !this.disableWaves) {\n      this.ripple.el = clicked;\n      this.ripple.click(event);\n    }\n\n    this.hiddenBsTab.emit({\n      target: clicked,\n      relatedTarget: prev,\n    });\n    this.shownBsTab.emit({\n      target: clicked,\n      relatedTarget: prev,\n    });\n\n    this.cdRef.markForCheck();\n  }\n\n  public ngOnDestroy(): void {\n    this.isDestroyed = true;\n  }\n\n  public getActive(): any {\n    const tabs = this.tabs.map((object, index) => {\n      return {\n        index: index,\n        object: object,\n      };\n    });\n\n    for (const tab of tabs) {\n      if (tab.object.active) {\n        return tab.index;\n      }\n    }\n  }\n\n  public addTab(tab: TabDirective): void {\n    const insertPos = this.tabs.findIndex(aTab => aTab.tabOrder > tab.tabOrder);\n    if (insertPos >= 0) {\n      this.tabs.splice(insertPos, 0, tab);\n    } else {\n      this.tabs.push(tab);\n    }\n    tab.active = this.tabs.length === 1 && tab.active !== false;\n  }\n\n  public removeTab(tab: TabDirective): void {\n    const index = this.tabs.indexOf(tab);\n    if (index === -1 || this.isDestroyed) {\n      return;\n    }\n    // Select a new tab if the tab to be removed is selected and not destroyed\n    if (tab.active && this.hasAvailableTabs(index)) {\n      const newActiveIndex = this.getClosestTabIndex(index);\n      this.tabs[newActiveIndex].active = true;\n    }\n\n    tab.removed.emit(tab);\n    this.tabs.splice(index, 1);\n\n    this.cdRef.markForCheck();\n  }\n\n  protected getClosestTabIndex(index: number): number {\n    const tabsLength = this.tabs.length;\n    if (!tabsLength) {\n      return -1;\n    }\n\n    for (let step = 1; step <= tabsLength; step += 1) {\n      const prevIndex = index - step;\n      const nextIndex = index + step;\n      if (this.tabs[prevIndex] && !this.tabs[prevIndex].disabled) {\n        return prevIndex;\n      }\n      if (this.tabs[nextIndex] && !this.tabs[nextIndex].disabled) {\n        return nextIndex;\n      }\n    }\n    return -1;\n  }\n\n  protected hasAvailableTabs(index: number): boolean {\n    const tabsLength = this.tabs.length;\n    if (!tabsLength) {\n      return false;\n    }\n\n    for (let i = 0; i < tabsLength; i += 1) {\n      if (!this.tabs[i].disabled && i !== index) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  protected setClassMap(): void {\n    this.classMap = {\n      'nav-stacked': this.vertical,\n      'nav-justified': this.justified,\n    };\n  }\n\n  public listGet() {\n    if (this.vertical) {\n      this.listGetClass = this.tabsButtonsClass ? this.tabsButtonsClass : 'col-md-3';\n    } else {\n      this.listGetClass = this.tabsButtonsClass ? this.tabsButtonsClass : 'col-md-12';\n    }\n  }\n\n  public tabsGet() {\n    if (this.vertical) {\n      this.tabsGetClass = this.tabsContentClass ? this.tabsContentClass : 'col-md-9';\n    } else {\n      this.tabsGetClass = this.tabsContentClass ? this.tabsContentClass : 'col-md-12';\n    }\n  }\n\n  public getActiveElement(): any {\n    const tabs = this.tabs.map((object, index) => {\n      return {\n        index: index,\n        object: object,\n      };\n    });\n\n    for (const tab of tabs) {\n      if (tab.object.active) {\n        return {\n          el: tab.object,\n          activeTabIndex: tab.index,\n        };\n      }\n    }\n  }\n\n  public showActiveIndex() {\n    const activeElement = this.getActiveElement();\n    this.getActiveTab.emit(activeElement);\n  }\n\n  private getFirstActiveTabIndex() {\n    const activeTabs = this.tabs.filter(tab => {\n      return !tab.disabled;\n    });\n    return this.tabs.indexOf(activeTabs[0]);\n  }\n\n  private removeActiveTabs() {\n    this.tabs.forEach(tab => {\n      tab.active = false;\n    });\n  }\n\n  initActiveTab() {\n    const index = this.getFirstActiveTabIndex();\n    if (index === -1) {\n      this.removeActiveTabs();\n      return;\n    }\n    this.setActiveTab(index + 1);\n  }\n\n  ngOnInit() {\n    this.listGet();\n    this.tabsGet();\n    this.showActiveIndex();\n  }\n\n  ngAfterViewInit() {\n    this.initActiveTab();\n\n    if (this.tabs.findIndex(el => el.type === 'content') !== -1) {\n      const spacer = this.renderer.createElement('li');\n      const firstContentTypeItemIndex = this.tabs.findIndex(el => el.type === 'content');\n\n      this.renderer.addClass(spacer, 'nav-item');\n      this.renderer.addClass(spacer, 'flex-fill');\n      this.renderer.insertBefore(\n        this.itemsList.nativeElement,\n        spacer,\n        this.itemsList.nativeElement.children[firstContentTypeItemIndex]\n      );\n    }\n  }\n}\n"]}