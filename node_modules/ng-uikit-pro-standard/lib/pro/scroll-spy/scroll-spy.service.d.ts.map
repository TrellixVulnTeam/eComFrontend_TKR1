{"version":3,"file":"scroll-spy.service.d.ts","sources":["../../../../../projects/ng-uikit-pro-standard/src/lib/pro/scroll-spy/scroll-spy.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAc,SAAS,EAAE,MAAM,eAAe,CAAC;AACtD,OAAO,EAAE,sBAAsB,EAAE,MAAM,6BAA6B,CAAC;AACrE,OAAO,EAAW,UAAU,EAAE,MAAM,MAAM,CAAC;;AAE3C,MAAM,WAAW,SAAS;AAC1B,IAAE,EAAE,EAAE,MAAM,CAAC;AACb,IAAE,KAAK,EAAE,SAAS,CAAC,sBAAsB,CAAC,CAAC;AAC3C,CAAC;AAED,qBACa,gBAAgB;AAC7B,IAAE,OAAO,CAAC,UAAU,CAAmB;AACvC,IACE,OAAO,CAAC,aAAa,CAAyC;AAChE,IAAE,OAAO,EAAE,UAAU,CAAC,GAAG,CAAC,CAAsB;AAChD,IACE,YAAY,CAAC,SAAS,EAAE,SAAS;AAC9B,IAGH,eAAe,CAAC,WAAW,EAAE,MAAM;AAChC,IAMH,iBAAiB,CAAC,WAAW,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM;AACxD,IAeH,iBAAiB,CAAC,WAAW,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM;AACxD,IAoBH,aAAa,CAAC,UAAU,EAAE,sBAAsB,GAAG,GAAG;AACnD,IAOH,iBAAiB,CAAC,WAAW,EAAE,MAAM;;;AAClC,CAaJ;AACD","sourcesContent":["import { Injectable, QueryList } from '@angular/core';\nimport { ScrollSpyLinkDirective } from './scroll-spy-link.directive';\nimport { Subject, Observable } from 'rxjs';\n\nexport interface ScrollSpy {\n  id: string;\n  links: QueryList<ScrollSpyLinkDirective>;\n}\n\n@Injectable()\nexport class ScrollSpyService {\n  private scrollSpys: ScrollSpy[] = [];\n\n  private activeSubject = new Subject<ScrollSpyLinkDirective>();\n  active$: Observable<any> = this.activeSubject;\n\n  addScrollSpy(scrollSpy: ScrollSpy) {\n    this.scrollSpys.push(scrollSpy);\n  }\n\n  removeScrollSpy(scrollSpyId: string) {\n    const scrollSpyIndex = this.scrollSpys.findIndex( (spy) => {\n      return spy.id === scrollSpyId;\n    });\n    this.scrollSpys.splice(scrollSpyIndex, 1);\n  }\n\n  updateActiveState(scrollSpyId: string, activeLinkId: string) {\n    const scrollSpy = this.scrollSpys.find(spy => {\n      return spy.id === scrollSpyId;\n    });\n\n    if (!scrollSpy) {\n      return;\n    }\n\n    const activeLink = scrollSpy.links.find(link => {\n      return link.id === activeLinkId;\n    });\n\n    this.setActiveLink(activeLink);\n  }\n\n  removeActiveState(scrollSpyId: string, activeLinkId: string) {\n    const scrollSpy = this.scrollSpys.find(spy => {\n      return spy.id === scrollSpyId;\n    });\n\n    if (!scrollSpy) {\n      return;\n    }\n\n    const activeLink = scrollSpy.links.find(link => {\n      return link.id === activeLinkId;\n    });\n\n    if (!activeLink) {\n      return;\n    }\n\n    activeLink.active = false;\n    activeLink.detectChanges();\n  }\n\n  setActiveLink(activeLink: ScrollSpyLinkDirective | any) {\n    if (activeLink) {\n      activeLink.active = true;\n      activeLink.detectChanges();\n      this.activeSubject.next(activeLink);\n    }\n  }\n\n  removeActiveLinks(scrollSpyId: string) {\n    const scrollSpy: ScrollSpy | undefined = this.scrollSpys.find(spy => {\n      return spy.id === scrollSpyId;\n    });\n\n    if (!scrollSpy) {\n      return;\n    }\n\n    scrollSpy.links.forEach(link => {\n      link.active = false;\n      link.detectChanges();\n    });\n  }\n}\n"]}