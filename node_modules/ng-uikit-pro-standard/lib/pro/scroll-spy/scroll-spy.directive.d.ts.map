{"version":3,"file":"scroll-spy.directive.d.ts","sources":["../../../../../projects/ng-uikit-pro-standard/src/lib/pro/scroll-spy/scroll-spy.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,gBAAgB,EAGhB,YAAY,EAEZ,SAAS,EACT,MAAM,EAEN,SAAS,EAEV,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,sBAAsB,EAAE,MAAM,6BAA6B,CAAC;AACrE,OAAO,EAAE,gBAAgB,EAAE,MAAM,sBAAsB,CAAC;AAExD,OAAO,EAAE,YAAY,EAAE,MAAM,MAAM,CAAC;;AAEpC,qBAQa,kBAAmB,YAAW,MAAM,EAAE,gBAAgB,EAAE,SAAS;AAC9E,IAoBc,OAAO,CAAC,gBAAgB;AAAE,IAnBtC,KAAK,EAAE,SAAS,CAAC,sBAAsB,CAAC,CAAC;AAC3C,IACE,IACI,EAAE,IAAI,MAAM,CAEf;AACH,IACE,IAAI,EAAE,CAAC,KAAK,EAAE,MAAM,EAInB;AACH,IACE,OAAO,CAAC,GAAG,CAAS;AACtB,IACY,gBAAgB,EAAE,YAAY,CAAC,GAAG,CAAC,CAA2B;AAC1E,IACE,SAAS,EAAE,YAAY,CAAC;AAC1B,gBACsB,gBAAgB,EAAE,gBAAgB;AAAG,IAEzD,QAAQ;AACL,IAOH,kBAAkB;AACf,IAGH,WAAW;;;AACR,CAGJ;AACD","sourcesContent":["import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { ScrollSpyLinkDirective } from './scroll-spy-link.directive';\nimport { ScrollSpyService } from './scroll-spy.service';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: '[mdbScrollSpy]',\n  template: '<ng-content></ng-content>',\n  styleUrls: ['./scroll-spy-module.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\n// tslint:disable-next-line:component-class-suffix\nexport class ScrollSpyDirective implements OnInit, AfterContentInit, OnDestroy {\n  @ContentChildren(ScrollSpyLinkDirective, { descendants: true })\n  links: QueryList<ScrollSpyLinkDirective>;\n\n  @Input('mdbScrollSpy')\n  get id(): string {\n    return this._id;\n  }\n\n  set id(newId: string) {\n    if (newId) {\n      this._id = newId;\n    }\n  }\n\n  private _id: string;\n\n  @Output() activeLinkChange: EventEmitter<any> = new EventEmitter<any>();\n\n  activeSub: Subscription;\n\n  constructor(private scrollSpyService: ScrollSpyService) {}\n\n  ngOnInit() {\n    this.activeSub = this.scrollSpyService.active$\n      .pipe(distinctUntilChanged())\n      .subscribe(activeLink => {\n        this.activeLinkChange.emit(activeLink);\n      });\n  }\n\n  ngAfterContentInit() {\n    this.scrollSpyService.addScrollSpy({ id: this.id, links: this.links });\n  }\n\n  ngOnDestroy() {\n    this.scrollSpyService.removeScrollSpy(this.id);\n    this.activeSub.unsubscribe();\n  }\n}\n"]}