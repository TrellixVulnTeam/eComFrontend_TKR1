{"version":3,"file":"scroll-spy-window.directive.d.ts","sources":["../../../../../projects/ng-uikit-pro-standard/src/lib/pro/scroll-spy/scroll-spy-window.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EAEL,UAAU,EACV,MAAM,EAEN,SAAS,EACT,MAAM,EAEN,aAAa,EACd,MAAM,eAAe,CAAC;AAEvB,OAAO,EAAE,gBAAgB,EAAE,MAAM,sBAAsB,CAAC;;AAExD,qBAGa,wBAAyB,YAAW,MAAM,EAAE,aAAa;AACtE,IAcsB,OAAO,CAAC,QAAQ;AAAE,IACpC,OAAO,CAAC,EAAE;AAAE,IACZ,OAAO,CAAC,QAAQ;AAAE,IAClB,OAAO,CAAC,MAAM;AAAE,IAChB,OAAO,CAAC,gBAAgB;AAAE,IAlB5B,OAAO,CAAC,EAAE,CAAS;AACrB,IACE,IACI,WAAW,IAAI,MAAM,CAA8B;AACzD,IAAE,IAAI,WAAW,CAAC,KAAK,EAAE,MAAM,EAI5B;AACH,IAAE,OAAO,CAAC,YAAY,CAAS;AAC/B,IACW,MAAM,SAAK;AACtB,gBAE8B,QAAQ,EAAE,GAAG,EAC/B,EAAE,EAAE,UAAU,EACd,QAAQ,EAAE,SAAS,EACnB,MAAM,EAAE,MAAM,EACd,gBAAgB,EAAE,gBAAgB;AAC5C,IAEA,mBAAmB;AACb,IAQN,iBAAiB,CAAC,WAAW,EAAE,MAAM,EAAE,EAAE,EAAE,MAAM;AAC9C,IAOH,QAAQ;AACL,IAGH,cAAc;AACX,IAKH,QAAQ;AACL,IAKH,eAAe;;;AACZ,CAIJ;AACD","sourcesContent":["import {\n  Directive,\n  ElementRef,\n  OnInit,\n  Inject,\n  Renderer2,\n  NgZone,\n  Input,\n  AfterViewInit\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ScrollSpyService } from './scroll-spy.service';\n\n@Directive({\n  selector: '[mdbScrollSpyWindow]'\n})\nexport class ScrollSpyWindowDirective implements OnInit, AfterViewInit {\n  private id: string;\n\n  @Input('mdbScrollSpyWindow')\n  get scrollSpyId(): string { return this._scrollSpyId; }\n  set scrollSpyId(newId: string) {\n    if (newId) {\n      this._scrollSpyId = newId;\n    }\n  }\n  private _scrollSpyId: string;\n\n  @Input() offset = 0;\n\n  constructor(\n    @Inject(DOCUMENT) private document: any,\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private ngZone: NgZone,\n    private scrollSpyService: ScrollSpyService\n  ) {}\n\n  isElementInViewport() {\n    const scrollTop = this.document.documentElement.scrollTop || this.document.body.scrollTop;\n    const elHeight = this.el.nativeElement.offsetHeight;\n    const elTop = this.el.nativeElement.offsetTop - this.offset;\n    const elBottom = elTop + elHeight;\n\n    return (scrollTop >= elTop && scrollTop <= elBottom);\n  }\n\n  updateActiveState(scrollSpyId: string, id: string) {\n    if (this.isElementInViewport()) {\n      this.scrollSpyService.updateActiveState(scrollSpyId, id);\n    } else {\n      this.scrollSpyService.removeActiveState(scrollSpyId, id);\n    }\n  }\n\n  onScroll() {\n    this.updateActiveState(this.scrollSpyId, this.id);\n  }\n\n  listenToScroll() {\n    this.renderer.listen(window, 'scroll', () => {\n      this.onScroll();\n    });\n  }\n\n  ngOnInit() {\n    this.id = this.el.nativeElement.id;\n\n    this.ngZone.runOutsideAngular(this.listenToScroll.bind(this));\n  }\n\n  ngAfterViewInit() {\n    setTimeout(() => {\n      this.updateActiveState(this.scrollSpyId, this.id);\n    }, 0);\n  }\n}\n"]}