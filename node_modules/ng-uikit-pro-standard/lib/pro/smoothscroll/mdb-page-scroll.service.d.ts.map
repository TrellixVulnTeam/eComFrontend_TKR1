{"version":3,"file":"mdb-page-scroll.service.d.ts","sources":["../../../../../projects/ng-uikit-pro-standard/src/lib/pro/smoothscroll/mdb-page-scroll.service.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,kBAAkB,EAAqB,MAAM,4BAA4B,CAAC;;AAGnF,qBACa,iBAAiB;AAC9B,IAAE,OAAO,CAAC,MAAM,CAAC,eAAe,CAAK;AACrC,IACE,OAAO,CAAC,gBAAgB,CAA4B;AACtD,IACE,OAAO,CAAC,aAAa,CAiCnB;AACJ,IACE,OAAO,CAAC,YAAY;AAAE,IAqBtB;AACF;AACE;AACE;AAEH;AACC,OADG;AACL,IAAS,KAAK,CAAC,kBAAkB,EAAE,kBAAkB,GAAG,IAAI;AAAE,IA+J5D;AACF;AACE;AACE,OAAC;AACL,IAAS,OAAO,CAAC,SAAS,CAAC,EAAE,MAAM,GAAG,GAAG,GAAG,OAAO;AAAE,IAsB5C,IAAI,CAAC,kBAAkB,EAAE,kBAAkB,GAAG,OAAO;AAAE;;;AAC9C,CAYjB;AACD","sourcesContent":["import { Injectable, isDevMode } from '@angular/core';\n\nimport { PageScrollConfig } from './mdb-page-scroll.config';\nimport { PageScrollInstance, InterruptReporter } from './mdb-page-scroll.instance';\nimport { PageScrollUtilService as Util } from './mdb-page-scroll-util.service';\n\n@Injectable()\nexport class PageScrollService {\n  private static instanceCounter = 0;\n\n  private runningInstances: PageScrollInstance[] = [];\n\n  private onInterrupted: InterruptReporter = {\n    report: (event: Event, pageScrollInstance: PageScrollInstance): void => {\n      if (!pageScrollInstance.interruptible) {\n        // Non-interruptible anyway, so do not stop anything\n        return;\n      }\n\n      let shouldStop = true;\n\n      if (event.type === 'keyup') {\n        // Only stop if specific keys have been pressed, for all others don't stop anything\n        // tslint:disable-next-line: deprecation\n        if (PageScrollConfig._interruptKeys.indexOf((<KeyboardEvent>event).keyCode) === -1) {\n          // The pressed key is not in the list of interrupting keys\n          shouldStop = false;\n        }\n      } else if (event.type === 'mousedown') {\n        // For mousedown events we only stop the scroll animation of the mouse has\n        // been clicked inside the scrolling container\n        if (\n          !pageScrollInstance.scrollingViews.some(scrollingView =>\n            scrollingView.contains(event.target)\n          )\n        ) {\n          // Mouse clicked an element which is not inside any of the the scrolling containers\n          shouldStop = false;\n        }\n      }\n\n      if (shouldStop) {\n        this.stopAll(pageScrollInstance.namespace);\n      }\n    },\n  };\n\n  private stopInternal(interrupted: boolean, pageScrollInstance: PageScrollInstance): boolean {\n    const index: number = this.runningInstances.indexOf(pageScrollInstance);\n    if (index >= 0) {\n      this.runningInstances.splice(index, 1);\n    }\n\n    if (pageScrollInstance.interruptListenersAttached) {\n      pageScrollInstance.detachInterruptListeners();\n    }\n\n    if (pageScrollInstance.timer) {\n      // Clear/Stop the timer\n      clearInterval(pageScrollInstance.timer);\n      // Clear the reference to this timer\n      pageScrollInstance.timer = undefined;\n      pageScrollInstance.fireEvent(!interrupted);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Start a scroll animation. All properties of the animation are stored in the given {@link PageScrollInstance} object.\n   *\n   * This is the core functionality of the whole library.\n   *\n   */\n  public start(pageScrollInstance: PageScrollInstance): void {\n    // Stop all possibly running scroll animations in the same namespace\n    this.stopAll(pageScrollInstance.namespace);\n\n    if (\n      pageScrollInstance.scrollingViews === null ||\n      pageScrollInstance.scrollingViews.length === 0\n    ) {\n      // No scrollingViews specified, thus we can't animate anything\n      if (isDevMode()) {\n        console.warn(\n          'No scrollingViews specified, this ng2-page-scroll does not know which DOM elements to scroll'\n        );\n      }\n      return;\n    }\n\n    let startScrollPositionFound = false;\n    // Reset start scroll position to 0. If any of the scrollingViews has a different one, it will be extracted next\n    pageScrollInstance.startScrollPosition = 0;\n\n    // Get the start scroll position from the scrollingViews (e.g. if the user already scrolled down the content)\n    pageScrollInstance.scrollingViews.forEach((scrollingView: any) => {\n      if (Util.isUndefinedOrNull(scrollingView)) {\n        return;\n      }\n      // Get the scrollTop or scrollLeft value of the first scrollingView that returns a value for its \"scrollTop\"\n      // or \"scrollLeft\" property that is not undefined and unequal to 0\n\n      const scrollPosition = pageScrollInstance.getScrollPropertyValue(scrollingView);\n      if (!startScrollPositionFound && scrollPosition) {\n        // We found a scrollingView that does not have scrollTop or scrollLeft 0\n\n        // Return the scroll position value, as this will be our startScrollPosition\n        pageScrollInstance.startScrollPosition = scrollPosition;\n        startScrollPositionFound = true;\n      }\n    });\n\n    const pageScrollOffset = pageScrollInstance.getCurrentOffset();\n\n    // Calculate the target position that the scroll animation should go to\n\n    const scrollTargetPosition = pageScrollInstance.extractScrollTargetPosition();\n    pageScrollInstance.targetScrollPosition = Math.round(\n      (pageScrollInstance.verticalScrolling\n        ? scrollTargetPosition.top\n        : scrollTargetPosition.left) - pageScrollOffset\n    );\n\n    // Calculate the distance we need to go in total\n    pageScrollInstance.distanceToScroll =\n      pageScrollInstance.targetScrollPosition - pageScrollInstance.startScrollPosition;\n\n    if (isNaN(pageScrollInstance.distanceToScroll)) {\n      // We weren't able to find the target position, maybe the element does not exist?\n\n      if (isDevMode()) {\n        // console.log('Scrolling not possible, as we can\\'t find the specified target');\n      }\n      pageScrollInstance.fireEvent(false);\n      return;\n    }\n\n    // We're at the final destination already\n    // OR we need to scroll down but are already at the end\n    // OR we need to scroll up but are at the top already\n    const allReadyAtDestination =\n      Math.abs(pageScrollInstance.distanceToScroll) < PageScrollConfig._minScrollDistance;\n\n    // Check how long we need to scroll if a speed option is given\n    // Default executionDuration is the specified duration\n    pageScrollInstance.executionDuration = pageScrollInstance.duration;\n    // Maybe we need to pay attention to the speed option?\n    if (\n      !Util.isUndefinedOrNull(pageScrollInstance.speed) &&\n      Util.isUndefinedOrNull(pageScrollInstance.duration)\n    ) {\n      // Speed option is set and no duration => calculate duration based on speed and scroll distance\n      pageScrollInstance.executionDuration =\n        (pageScrollInstance.distanceToScroll / pageScrollInstance.speed) * 1000;\n    }\n\n    // We should go there directly, as our \"animation\" would have one big step\n    // only anyway and this way we save the interval stuff\n    const tooShortInterval = pageScrollInstance.executionDuration <= PageScrollConfig._interval;\n\n    if (allReadyAtDestination || tooShortInterval) {\n      if (isDevMode()) {\n        if (allReadyAtDestination) {\n          // console.log('Scrolling not possible, as we can\\'t get any closer to the destination');\n        } else {\n          // console.log('Scroll duration shorter that interval length, jumping to target');\n        }\n      }\n      pageScrollInstance.setScrollPosition(pageScrollInstance.targetScrollPosition);\n      pageScrollInstance.fireEvent(true);\n      return;\n    }\n\n    // Register the interrupt listeners if we want an interruptible scroll animation\n    if (\n      pageScrollInstance.interruptible ||\n      (Util.isUndefinedOrNull(pageScrollInstance.interruptible) &&\n        PageScrollConfig.defaultInterruptible)\n    ) {\n      pageScrollInstance.attachInterruptListeners(this.onInterrupted);\n    }\n\n    // Let's get started, get the start time...\n    pageScrollInstance.startTime = new Date().getTime();\n    // .. and calculate the end time (when we need to finish at last)\n    pageScrollInstance.endTime =\n      pageScrollInstance.startTime + pageScrollInstance.executionDuration;\n\n    pageScrollInstance.timer = setInterval(\n      (_pageScrollInstance: PageScrollInstance) => {\n        // Take the current time\n        const currentTime: number = new Date().getTime();\n\n        // Determine the new scroll position\n        let newScrollPosition: number;\n        let stopNow = false;\n        if (_pageScrollInstance.endTime <= currentTime) {\n          // We're over the time already, so go the targetScrollPosition (aka destination)\n          newScrollPosition = _pageScrollInstance.targetScrollPosition;\n          stopNow = true;\n        } else {\n          // Calculate the scroll position based on the current time using the easing function\n          newScrollPosition = Math.round(\n            _pageScrollInstance.easingLogic.ease(\n              currentTime - _pageScrollInstance.startTime,\n              _pageScrollInstance.startScrollPosition,\n              _pageScrollInstance.distanceToScroll,\n              _pageScrollInstance.executionDuration\n            )\n          );\n        }\n        // Set the new scrollPosition to all scrollingViews elements\n        if (!_pageScrollInstance.setScrollPosition(newScrollPosition)) {\n          // Setting the new scrollTop/scrollLeft value failed for all ScrollingViews\n          // early stop the scroll animation to save resources\n          stopNow = true;\n        }\n\n        // At the end do the internal stop maintenance and fire the pageScrollFinish event\n        // (otherwise the event might arrive at \"too early\")\n        if (stopNow) {\n          this.stopInternal(false, _pageScrollInstance);\n        }\n      },\n      PageScrollConfig._interval,\n      pageScrollInstance\n    );\n\n    // Register the instance as running one\n    this.runningInstances.push(pageScrollInstance);\n  }\n\n  /**\n   * Stop all running scroll animations. Optionally limit to stop only the ones of specific namespace.\n   *\n   */\n  public stopAll(namespace?: string | any): boolean {\n    if (this.runningInstances.length > 0) {\n      let stoppedSome = false;\n\n      for (let i = 0; i < this.runningInstances.length; ++i) {\n        const pageScrollInstance = this.runningInstances[i];\n        if (\n          Util.isUndefinedOrNull(namespace) ||\n          namespace.length === 0 ||\n          pageScrollInstance.namespace === namespace\n        ) {\n          stoppedSome = true;\n          this.stopInternal(true, pageScrollInstance);\n          // Decrease the counter, as we removed an item from the array we iterate over\n          i--;\n        }\n      }\n      return stoppedSome;\n    }\n    return false;\n  }\n\n  public stop(pageScrollInstance: PageScrollInstance): boolean {\n    return this.stopInternal(true, pageScrollInstance);\n  }\n\n  constructor() {\n    if (PageScrollService.instanceCounter > 0 && isDevMode()) {\n      console.warn(\n        'An instance of PageScrollService already exists, usually ' +\n          'including one provider should be enough, so double check.'\n      );\n    }\n    PageScrollService.instanceCounter++;\n  }\n}\n"]}