{"version":3,"file":"datepickerAutofill.directive.d.ts","sources":["../../../../../../projects/ng-uikit-pro-standard/src/lib/pro/date-picker/directives/datepickerAutofill.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EAAa,UAAU,EAAE,SAAS,EAAuB,MAAM,eAAe,CAAC;AACtF,OAAO,EAAE,gBAAgB,EAAE,MAAM,uCAAuC,CAAC;;AAQzE,qBAGa,sBAAsB;AAAG,IAGxB,OAAO,CAAC,EAAE;AAAE,IAAY,OAAO,CAAC,IAAI;AAAE,IAFzC,IAAI,EAAE,gBAAgB,CAAC;AAAC,gBAEb,EAAE,EAAE,UAAU,EAAU,IAAI,EAAE,SAAS;AAAG,IAE3B,OAAO,CAAC,GAAG,EAAE,GAAG;AACjD,IAsCF,OAAO,CAAC,QAAQ;AAAE,IAIlB,OAAO,CAAC,SAAS;AAAE,IAInB,OAAO,CAAC,aAAa;AAAE,IAIvB,OAAO,CAAC,QAAQ;AAAE,IAIlB,OAAO,CAAC,KAAK;AAAE,IAIf,OAAO,CAAC,OAAO;AAAE,IAMjB,OAAO,CAAC,aAAa;AAAE,IAIvB,OAAO,CAAC,aAAa;;;AAAE,CAGxB;AAAC","sourcesContent":["import { Directive, ElementRef, Renderer2, Input, HostListener } from '@angular/core';\r\nimport { IMyInputAutoFill } from '../interfaces/inputAutofill.interface';\r\nimport { BACKSPACE, DELETE } from '../../../free/utils/keyboard-navigation';\r\n\r\nenum KeyCode {\r\n  backspace = BACKSPACE,\r\n  delete = DELETE,\r\n}\r\n\r\n@Directive({\r\n  selector: '[mdbInputAutoFill]',\r\n})\r\nexport class InputAutoFillDirective {\r\n  @Input() opts: IMyInputAutoFill;\r\n\r\n  constructor(private el: ElementRef, private rndr: Renderer2) {}\r\n\r\n  @HostListener('keyup', ['$event']) onKeyUp(evt: any) {\r\n    // tslint:disable-next-line: deprecation\r\n    if (!this.opts.enabled || evt.keyCode === KeyCode.backspace || evt.keyCode === KeyCode.delete) {\r\n      return;\r\n    }\r\n\r\n    const val: string = this.getInputValue();\r\n    const ews: boolean = this.endsWith(val, this.opts.separator);\r\n    const parts: Array<string> = val.split(this.opts.separator);\r\n    const idx: number = parts.length - 1;\r\n\r\n    if (val.indexOf(this.opts.separator + this.opts.separator) !== -1 || idx > 2) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      !ews &&\r\n      (val.length === this.getPartLength(0) ||\r\n        val.length === this.getPartLength(0) + this.getPartLength(1) + this.opts.separator.length)\r\n    ) {\r\n      this.setInputValue(val + this.opts.separator);\r\n    } else if (\r\n      ews &&\r\n      parts[idx - 1].length < this.getPartLength(idx - 1) &&\r\n      this.isNumber(parts[idx - 1]) &&\r\n      (this.isDay(idx - 1) || this.isMonth(idx - 1))\r\n    ) {\r\n      this.setInputValue(this.insertPos(val, val.length - 2, '0'));\r\n    } else if (\r\n      parts[idx].length < this.getPartLength(idx) &&\r\n      this.isNumber(parts[idx]) &&\r\n      ((Number(parts[idx]) > 3 && this.isDay(idx)) || (Number(parts[idx]) > 1 && this.isMonth(idx)))\r\n    ) {\r\n      this.setInputValue(\r\n        this.insertPos(val, val.length - 1, '0') + (idx < 2 ? this.opts.separator : '')\r\n      );\r\n    }\r\n  }\r\n\r\n  private endsWith(val: string, suffix: string): boolean {\r\n    return val.indexOf(suffix, val.length - suffix.length) !== -1;\r\n  }\r\n\r\n  private insertPos(str: string, idx: number, val: string): string {\r\n    return str.substr(0, idx) + val + str.substr(idx);\r\n  }\r\n\r\n  private getPartLength(idx: number): number {\r\n    return this.opts.formatParts[idx].length;\r\n  }\r\n\r\n  private isNumber(val: string): boolean {\r\n    return val.match(/[1-9]/) !== null;\r\n  }\r\n\r\n  private isDay(idx: number): boolean {\r\n    return this.opts.formatParts[idx].indexOf('d') !== -1;\r\n  }\r\n\r\n  private isMonth(idx: number): boolean {\r\n    return (\r\n      this.opts.formatParts[idx].indexOf('m') !== -1 && this.opts.formatParts[idx].length === 2\r\n    );\r\n  }\r\n\r\n  private getInputValue(): string {\r\n    return this.el.nativeElement.value;\r\n  }\r\n\r\n  private setInputValue(val: string): void {\r\n    this.rndr.setProperty(this.el.nativeElement, 'value', val);\r\n  }\r\n}\r\n"]}