{"version":3,"file":"mdb-auto-completer.component.d.ts","sources":["../../../../../../projects/ng-uikit-pro-standard/src/lib/pro/auto-completer/components/mdb-auto-completer.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  Output,\n  PLATFORM_ID,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation,\n  QueryList,\n  OnDestroy,\n} from '@angular/core';\nimport { MdbOptionComponent, MDB_OPTION_PARENT } from './mdb-option.component';\nimport { ISelectedOption } from '../interfaces/selected-option.interface';\nimport { Observable, Subject, merge } from 'rxjs';\nimport { isPlatformBrowser } from '@angular/common';\nimport { document, window } from '../../../free/utils/facade/browser';\nimport { Utils } from './../../../free/utils/utils.class';\nimport { startWith, switchMap, takeUntil } from 'rxjs/operators';\nimport { DOWN_ARROW, ENTER, ESCAPE, UP_ARROW } from '../../../free/utils/keyboard-navigation';\n\nexport type AutocompleteDropdownPosition = 'below' | 'above' | 'auto';\n\n@Component({\n  selector: 'mdb-auto-completer',\n  templateUrl: 'mdb-auto-completer.component.html',\n  styleUrls: ['./../auto-completer-module.scss'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'mdbAutoCompleter',\n  providers: [{ provide: MDB_OPTION_PARENT, useExisting: MdbAutoCompleterComponent }],\n})\nexport class MdbAutoCompleterComponent implements AfterContentInit, OnDestroy {\n  @Input() textNoResults: string;\n  @Input() clearButton = true;\n  @Input() clearButtonTabIndex = 0;\n  @Input() appendToBody: boolean;\n  @Input() dropdownPosition: AutocompleteDropdownPosition = 'auto';\n  @Input() disabled: boolean;\n\n  @Input()\n  get visibleOptions(): number {\n    return this._visibleOptions;\n  }\n\n  set visibleOptions(value: number) {\n    if (value !== 0) {\n      this._visibleOptions = value;\n    }\n  }\n\n  _visibleOptions: number;\n\n  @Input()\n  get optionHeight(): any {\n    return this._optionHeight;\n  }\n\n  set optionHeight(value: any) {\n    if (value !== 0) {\n      this._optionHeight = value;\n    }\n  }\n\n  _optionHeight = 45;\n\n  @Input()\n  get dropdownHeight(): number {\n    return this._dropdownHeight;\n  }\n\n  set dropdownHeight(value: number) {\n    if (value !== 0) {\n      this._dropdownHeight = value;\n    }\n  }\n\n  // equal to 4 * optionHeight (which is 45 by default)\n  _dropdownHeight = 180;\n\n  @Input() displayValue: ((value: any) => string) | null;\n  @Output() select: EventEmitter<{ text: string; element: any }> = new EventEmitter<{\n    text: string;\n    element: any;\n  }>();\n  @Output() selected: EventEmitter<{ text: string; element: any }> = new EventEmitter<{\n    text: string;\n    element: any;\n  }>();\n  @ContentChildren(MdbOptionComponent, { descendants: true, read: ElementRef })\n  optionList: Array<any>;\n  @ContentChildren(MdbOptionComponent, { descendants: true })\n  mdbOptions: QueryList<MdbOptionComponent>;\n\n  @ViewChild('dropdown') dropdown: ElementRef;\n  @ViewChild('noResults') noResultsEl: ElementRef;\n\n  private _destroy = new Subject<void>();\n\n  private utils: Utils = new Utils();\n\n  origin: ElementRef;\n\n  public parameters: {\n    left: number;\n    top: number;\n    width: number;\n    bottom: number;\n    inputHeight: number;\n  };\n\n  readonly _isDropdownOpen: Subject<any> = new Subject<any>();\n\n  private _allItems: Array<any> = [];\n  private _isOpen = false;\n  private _selectedItemIndex = -1;\n  private _selectedItem: ISelectedOption;\n  private _selectedItemChanged: Subject<any> = new Subject<any>();\n  private _isBrowser = false;\n\n  constructor(\n    private renderer: Renderer2,\n    private el: ElementRef,\n    @Inject(PLATFORM_ID) platformId: string\n  ) {\n    this._isBrowser = isPlatformBrowser(platformId);\n    this.renderer.addClass(this.el.nativeElement, 'mdb-auto-completer');\n  }\n\n  private _listenToOptionClick() {\n    this.mdbOptions.changes\n      .pipe(\n        startWith(this.mdbOptions),\n        switchMap((options: QueryList<MdbOptionComponent>) => {\n          return merge(...options.map((option: MdbOptionComponent) => option.click$));\n        }),\n        takeUntil(this._destroy)\n      )\n      .subscribe((clickedOption: MdbOptionComponent) => this._handleOptionClick(clickedOption));\n  }\n\n  private _handleOptionClick(option: MdbOptionComponent) {\n    this.setSelectedItem({ text: option.value, element: option });\n    this.highlightRow(0);\n    this.select.emit({ text: option.value, element: option });\n    this.selected.emit({ text: option.value, element: option });\n  }\n\n  public setSelectedItem(item: ISelectedOption) {\n    this._selectedItem = item;\n    this._selectedItemChanged.next(this.getSelectedItem());\n  }\n\n  public getSelectedItem() {\n    return this._selectedItem;\n  }\n\n  public selectedItemChanged(): Observable<any> {\n    return this._selectedItemChanged;\n  }\n\n  public isOpen() {\n    return this._isOpen;\n  }\n\n  public _calculatePosition() {\n    const modalEl = this.utils.getClosestEl(this.el.nativeElement, '.modal-dialog');\n    const style = document.querySelector('.completer-dropdown')\n      ? window.getComputedStyle(document.querySelector('.completer-dropdown'))\n      : null;\n    if (!style) {\n      return;\n    }\n    const height = ['height', 'padding-top', 'padding-bottom', 'margin-top', 'margin-bottom']\n      .map(key => parseInt(style.getPropertyValue(key), 10))\n      .reduce((prev, cur) => prev + cur);\n\n    const topRect = document.querySelector('.completer-dropdown').getBoundingClientRect().top;\n    const bottom = modalEl ? window.innerHeight - height - topRect : this.parameters.bottom;\n    const canOpenBelow = this.dropdown.nativeElement.clientHeight <= bottom;\n\n    const belowPosition = this.parameters.inputHeight + 3;\n    const abovePosition = `-${this.dropdown.nativeElement.clientHeight}`;\n\n    let top;\n\n    if (this.dropdownPosition === 'auto') {\n      top = canOpenBelow ? belowPosition : abovePosition;\n    } else if (this.dropdownPosition === 'below') {\n      top = belowPosition;\n    } else if (this.dropdownPosition === 'above') {\n      top = abovePosition;\n    }\n\n    this.renderer.setStyle(this.dropdown.nativeElement, 'top', top + 'px');\n    this.renderer.setStyle(this.dropdown.nativeElement, 'left', 0 + 'px');\n    this.renderer.setStyle(this.dropdown.nativeElement, 'width', this.parameters.width + 'px');\n  }\n\n  private _calculateAppendPosition() {\n    if (this._isBrowser) {\n      setTimeout(() => {\n        const originRect: ClientRect = this.origin.nativeElement.getBoundingClientRect();\n        const scrollTop = document.documentElement.scrollTop || document.body.scrollTop;\n        const offsetTop = originRect.top + scrollTop;\n        const height = originRect.height;\n        const dropdownHeight = this.dropdown.nativeElement.offsetHeight;\n        const inputMargin = 8;\n\n        let top = 0;\n        let left = 0;\n\n        left = originRect.left;\n\n        const canOpenBelow =\n          offsetTop + dropdownHeight + height + inputMargin <=\n          scrollTop + document.documentElement.clientHeight;\n        const belowPosition = offsetTop + height + inputMargin;\n        const abovePosition = (top = offsetTop - dropdownHeight - inputMargin);\n\n        if (this.dropdownPosition === 'auto') {\n          top = canOpenBelow ? belowPosition : abovePosition;\n        } else if (this.dropdownPosition === 'below') {\n          top = belowPosition;\n        } else if (this.dropdownPosition === 'above') {\n          top = abovePosition;\n        }\n\n        this.renderer.setStyle(this.dropdown.nativeElement, 'top', top + 'px');\n        this.renderer.setStyle(this.dropdown.nativeElement, 'left', left + 'px');\n        this.renderer.setStyle(this.dropdown.nativeElement, 'width', this.parameters.width + 'px');\n      }, 0);\n    }\n  }\n\n  public show() {\n    if (!this.disabled) {\n      this._isOpen = true;\n      this._isDropdownOpen.next(this.isOpen());\n    }\n\n    setTimeout(() => {\n      if (this.dropdown && !this.appendToBody) {\n        this._calculatePosition();\n      }\n\n      if (this.dropdown && this.appendToBody) {\n        this._calculateAppendPosition();\n      }\n    }, 0);\n  }\n\n  public hide() {\n    if (!this.disabled) {\n      this._isOpen = false;\n      this._isDropdownOpen.next(this.isOpen());\n    }\n  }\n\n  public isDropdownOpen(): Observable<any> {\n    return this._isDropdownOpen;\n  }\n\n  removeHighlight(index: number) {\n    setTimeout(() => {\n      this.optionList.forEach((el: any, i: number) => {\n        const completerRow = el.nativeElement.querySelectorAll('.completer-row');\n        if (i === index) {\n          this.renderer.addClass(el.nativeElement.firstElementChild, 'highlight-row');\n        } else if (i !== index) {\n          completerRow.forEach((elem: any) => {\n            this.renderer.removeClass(elem, 'highlight-row');\n          });\n        }\n      });\n    }, 0);\n  }\n\n  highlightRow(index: number) {\n    this._allItems = this.optionList\n      .filter(el => el.nativeElement.firstElementChild.classList.contains('completer-row'))\n      .map(elem => elem.nativeElement);\n\n    if (this._allItems[index]) {\n      this.optionList.forEach((el: any, i: number) => {\n        const completerRow = el.nativeElement.querySelectorAll('.completer-row');\n\n        if (index === i) {\n          this.removeHighlight(index);\n          this.renderer.addClass(completerRow[completerRow.length - 1], 'highlight-row');\n        }\n      });\n    }\n    this._selectedItemIndex = index;\n  }\n\n  navigateUsingKeyboard(event: any) {\n    if (this.dropdown) {\n      switch (event.keyCode) {\n        case DOWN_ARROW:\n          event.preventDefault();\n          this.moveHighlightedIntoView(event.key);\n\n          if (!this.isOpen()) {\n            this.show();\n          }\n\n          if (this._selectedItemIndex + 1 <= this._allItems.length - 1) {\n            this.highlightRow(++this._selectedItemIndex);\n          } else if (this._selectedItemIndex + 1 === this._allItems.length) {\n            this.highlightRow(0);\n          }\n\n          if (this._selectedItemIndex === 0) {\n            this.highlightRow(0);\n          }\n\n          const selectedElement: any = this.mdbOptions.find(\n            (el: any, index: number) => el && index === this._selectedItemIndex\n          );\n          if (selectedElement) {\n            this.select.emit({ text: selectedElement.value, element: selectedElement });\n          }\n\n          break;\n        case UP_ARROW:\n          event.preventDefault();\n          this.moveHighlightedIntoView(event.key);\n          if (this._selectedItemIndex === -1 || this._selectedItemIndex === 0) {\n            const lastItemIndex = this.mdbOptions.length;\n            this.highlightRow(lastItemIndex);\n          }\n          this.highlightRow(--this._selectedItemIndex);\n\n          const selectedItem: any = this.mdbOptions.find(\n            (el: any, index: number) => el && index === this._selectedItemIndex\n          );\n          if (selectedItem) {\n            this.select.emit({ text: selectedItem.value, element: selectedItem });\n          }\n\n          break;\n        case ESCAPE:\n          event.preventDefault();\n          this.hide();\n          break;\n        case ENTER:\n          event.preventDefault();\n\n          const selectedOption = this.mdbOptions.map(el => el)[this._selectedItemIndex];\n          if (selectedOption) {\n            this.setSelectedItem({ text: selectedOption.value, element: selectedOption });\n            this.select.emit({ text: selectedOption.value, element: selectedOption });\n            this.selected.emit({ text: selectedOption.value, element: selectedOption });\n          }\n          this.hide();\n          break;\n      }\n    }\n  }\n\n  moveHighlightedIntoView(type: string) {\n    let listHeight = 0;\n    let itemIndex = this._selectedItemIndex;\n\n    this.optionList.forEach((el: any) => {\n      listHeight += el.nativeElement.offsetHeight;\n    });\n\n    if (itemIndex > -1) {\n      let itemHeight = 0;\n\n      this.optionList.forEach((el: ElementRef, i: number) => {\n        if (i === itemIndex + 1) {\n          itemHeight = el.nativeElement.firstElementChild.clientHeight;\n        }\n      });\n\n      const itemTop = (itemIndex + 1) * itemHeight;\n      const viewTop = this.dropdown.nativeElement.scrollTop;\n      const viewBottom = viewTop + listHeight;\n\n      if (type === 'ArrowDown') {\n        this.renderer.setProperty(this.dropdown.nativeElement, 'scrollTop', itemTop - itemHeight);\n      } else if (type === 'ArrowUp') {\n        if (itemIndex === 0) {\n          itemIndex = this.optionList.length - 1;\n        } else {\n          itemIndex--;\n        }\n\n        if (itemIndex === this._allItems.length - 2) {\n          this.renderer.setProperty(\n            this.dropdown.nativeElement,\n            'scrollTop',\n            viewBottom - itemHeight\n          );\n        } else {\n          this.renderer.setProperty(\n            this.dropdown.nativeElement,\n            'scrollTop',\n            itemIndex * itemHeight\n          );\n        }\n      }\n    }\n  }\n\n  updatePosition(parameters: { left: number; top: number; width: number; bottom: number }) {\n    setTimeout(() => {\n      if (this.dropdown) {\n        const top =\n          this.dropdown.nativeElement.clientHeight > parameters.bottom\n            ? parameters.top - this.dropdown.nativeElement.clientHeight\n            : parameters.top;\n        this.renderer.setStyle(this.dropdown.nativeElement, 'top', top + 'px');\n        this.renderer.setStyle(this.dropdown.nativeElement, 'left', parameters.left + 'px');\n        this.renderer.setStyle(this.dropdown.nativeElement, 'width', parameters.width + 'px');\n      }\n    }, 0);\n  }\n\n  public appendDropdown() {\n    if (this._isBrowser && this.appendToBody) {\n      const body = document.querySelector('body');\n      const dropdown = this.el.nativeElement;\n\n      if (body) {\n        this.renderer.appendChild(body, dropdown);\n        this._calculateAppendPosition();\n      }\n    }\n  }\n\n  public setSingleOptionHeight() {\n    this.mdbOptions.forEach(option => {\n      option._optionHeight = this._optionHeight;\n    });\n  }\n\n  ngAfterContentInit() {\n    this._listenToOptionClick();\n    this.highlightRow(0);\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n  }\n}\n"]}