{"version":3,"file":"chips.component.d.ts","sources":["../../../../../projects/ng-uikit-pro-standard/src/lib/pro/chips/chips.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAEL,YAAY,EAMZ,iBAAiB,EAEjB,UAAU,EACX,MAAM,eAAe,CAAC;;AAKvB,eAAO,MAAM,mCAAmC,EAAE,GAKjD,CAAC;AAEF,qBAOa,sBAAsB;AACnC,IAwBc,OAAO,CAAC,MAAM;AAAE,IAxBV,UAAU,EAAE,UAAU,CAAC;AAC3C,IAAqB,YAAY,EAAE,UAAU,CAAC;AAC9C,IAAW,WAAW,SAAM;AAC5B,IACE,gBAAgB,EAAE,OAAO,CAAC;AAC5B,IAAE,aAAa,UAAS;AACxB,IAAE,MAAM,EAAE,MAAM,EAAE,CAAC;AACnB,IAAE,UAAU,EAAE,MAAM,CAAC;AACrB,IAAE,OAAO,EAAE,MAAM,CAAC;AAClB,IAAE,QAAQ,EAAE,MAAM,CAAC;AACnB,IACE,QAAQ;AAAI;AAEd;AACI,MAAA;AACJ,IACY,iBAAiB,oBAAsB;AACnD,IAAY,YAAY,EAAE,YAAY,CAAC,MAAM,EAAE,CAAC,CAAgC;AAChF,IACE,IACI,WAAW,YAEd;AACH,gBACsB,MAAM,EAAE,iBAAiB;AAAG,IAEhD,WAAW,CAAC,KAAK,EAAE,MAAM;AACtB,IAOH,aAAa,CAAC,KAAK,EAAE,GAAG;AACrB,IAQH,OAAO,CAAC,WAAW;AAAE,IAcrB,QAAQ,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG;AAC/B,IAeH,SAAS,MAAO,GAAG,UAAQ;AAC7B,IAAE,UAAU,aAAY;AACxB,IACE,gBAAgB,CAAC,EAAE,EAAE,GAAG;AACrB,IAEH,iBAAiB,CAAC,EAAE,EAAE,GAAG;AACtB,IAGH,UAAU,CAAC,KAAK,EAAE,MAAM,EAAE;AACvB,IAOH,OAAO;AACJ,IAIH,gBAAgB;;;AACb,CAIJ;AACD","sourcesContent":["import {\n  Component,\n  EventEmitter,\n  forwardRef,\n  Input,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  ViewChild,\n  ElementRef,\n} from '@angular/core';\n\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { BACKSPACE, DELETE } from '../../free/utils/keyboard-navigation';\n\nexport const CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => MaterialChipsComponent),\n  multi: true,\n};\n\n@Component({\n  selector: 'mdb-material-chips',\n  templateUrl: 'chips.component.html',\n  encapsulation: ViewEncapsulation.None,\n  providers: [CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MaterialChipsComponent {\n  @ViewChild('box') chipsInput: ElementRef;\n  @ViewChild('tbox') initialInput: ElementRef;\n  @Input() placeholder = '';\n\n  addAreaDisplayed: boolean;\n  isTagsFocused = false;\n  values: string[];\n  labelToAdd: string;\n  focused: string;\n  selected: string;\n\n  keyCodes = {\n    backspace: BACKSPACE,\n    delete: DELETE,\n  };\n\n  @Output() tagsfocusedChange = new EventEmitter();\n  @Output() labelsChange: EventEmitter<string[]> = new EventEmitter<string[]>();\n\n  @Input()\n  get tagsfocused() {\n    return this.isTagsFocused;\n  }\n\n  constructor(private _cdRef: ChangeDetectorRef) {}\n\n  removeValue(value: string) {\n    const index = this.values.indexOf(value, 0);\n    if (index !== undefined) {\n      this.values.splice(index, 1);\n      this.labelsChange.emit(this.values);\n    }\n  }\n\n  handleKeydown(event: any) {\n    if (event.keyCode === this.keyCodes.backspace || event.keyCode === this.keyCodes.delete) {\n      if (event.target.value === '') {\n        this._removeLast();\n        event.preventDefault();\n      }\n    }\n  }\n\n  private _removeLast() {\n    const lastChip = this.values[this.values.length];\n    const index = this.values.indexOf(lastChip);\n\n    this.values.splice(index, 1);\n    this.labelsChange.emit(this.values);\n\n    if (this.values.length === 0) {\n      setTimeout(() => {\n        this.initialInput.nativeElement.focus();\n      }, 0);\n    }\n  }\n\n  addValue(value: string, event: any) {\n    event.preventDefault();\n    if (!value || value.trim() === '') {\n      return;\n    }\n    this.values.push(value);\n    this.labelsChange.emit(this.values);\n    this.labelToAdd = '';\n\n    if (this.values.length === 1) {\n      setTimeout(() => {\n        this.chipsInput.nativeElement.focus();\n      }, 0);\n    }\n  }\n\n  _onChange = (_: any) => {};\n  _onTouched = () => {};\n\n  registerOnChange(fn: any) {\n    this._onChange = fn;\n  }\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  writeValue(value: string[]) {\n    if (value !== this.values) {\n      this.values = value;\n    }\n\n    this._cdRef.markForCheck();\n  }\n\n  onFocus() {\n    this.focused = 'md-focused';\n    this.isTagsFocused = true;\n    this.tagsfocusedChange.emit(this.isTagsFocused);\n  }\n  focusOutFunction() {\n    this.focused = '';\n    this.isTagsFocused = false;\n    this.tagsfocusedChange.emit(this.isTagsFocused);\n  }\n}\n"]}