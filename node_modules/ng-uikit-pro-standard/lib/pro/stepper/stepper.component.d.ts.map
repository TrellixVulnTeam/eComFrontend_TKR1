{"version":3,"file":"stepper.component.d.ts","sources":["../../../../../projects/ng-uikit-pro-standard/src/lib/pro/stepper/stepper.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  ViewEncapsulation,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Input,\n  ElementRef,\n  ViewChild,\n  ViewChildren,\n  AfterViewInit,\n  Renderer2,\n  PLATFORM_ID,\n  Inject,\n  AfterContentChecked,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { MdbStepComponent } from './step.component';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { WavesDirective } from '../../free/waves/waves-effect.directive';\nimport { FormControl } from '@angular/forms';\nimport { isPlatformBrowser } from '@angular/common';\nimport { from, Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\n\nexport class StepChangeEvent {\n  activeStep: MdbStepComponent;\n  activeStepIndex: number;\n  previousStep: MdbStepComponent;\n  previousStepIndex: number;\n}\n\n@Component({\n  selector: 'mdb-stepper',\n  exportAs: 'mdbStepper',\n  templateUrl: 'stepper.component.html',\n  styleUrls: ['./stepper-module.scss'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('stepContentTransition', [\n      state('previous', style({ transform: 'translateX(-100%)', display: 'none' })),\n      state('next', style({ transform: 'translateX(100%)', display: 'none' })),\n      state('current', style({ transform: 'none', display: 'block' })),\n      transition('* => *', animate('600ms ease')),\n    ]),\n  ],\n  providers: [WavesDirective],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MdbStepperComponent\n  implements AfterContentInit, AfterViewInit, AfterContentChecked, OnDestroy {\n  @ContentChildren(MdbStepComponent) steps: QueryList<MdbStepComponent>;\n  @ViewChildren('stepTitle') stepTitles: QueryList<ElementRef>;\n  @ViewChildren('stepContent') stepContents: QueryList<ElementRef>;\n  @ViewChild('container', { static: true }) container: ElementRef;\n\n  @Input() linear = false;\n  @Input() disableWaves = false;\n  @Input()\n  get vertical() {\n    return this._vertical;\n  }\n  set vertical(value: boolean) {\n    if (value) {\n      this._vertical = value;\n      this.horizontal = false;\n      this._renderer.removeStyle(this.container.nativeElement, 'height');\n    } else {\n      this._vertical = value;\n      this.horizontal = true;\n      if (this.container.nativeElement.children[this.activeStepIndex]) {\n        const stepElContent = this.container.nativeElement.children[this._activeStepIndex]\n          .lastElementChild;\n        this._updateHorizontalStepperHeight(this.activeStepIndex, stepElContent.clientHeight);\n      }\n    }\n  }\n  private _vertical = false;\n\n  @Output() stepChange: EventEmitter<StepChangeEvent> = new EventEmitter<StepChangeEvent>();\n\n  constructor(\n    public ripple: WavesDirective,\n    private _renderer: Renderer2,\n    private _cdRef: ChangeDetectorRef,\n    @Inject(PLATFORM_ID) platformId: string\n  ) {\n    this.isBrowser = isPlatformBrowser(platformId);\n  }\n\n  private _destroy: Subject<void> = new Subject();\n\n  isBrowser: boolean;\n  horizontal = true;\n\n  get activeStepIndex() {\n    return this._activeStepIndex;\n  }\n\n  set activeStepIndex(value: number) {\n    this._activeStepIndex = value;\n  }\n\n  private _activeStepIndex: number;\n  private _activeStep: MdbStepComponent;\n  private stepTextContent = '';\n\n  stepChangeSubject: Subject<any> = new Subject();\n  stepChange$: Observable<any>;\n\n  getStepChange$(): Observable<any> {\n    return this.stepChangeSubject;\n  }\n\n  onClick(index: number, event: any) {\n    if (!this.disableWaves) {\n      const clickedEl = this.stepTitles.toArray()[index];\n      this.ripple.el = clickedEl;\n      this.ripple.click(event);\n    }\n  }\n\n  private _isStepValid(step: MdbStepComponent) {\n    if (!step.stepForm) {\n      return true;\n    }\n\n    if (step.stepForm && step.stepForm.valid) {\n      return true;\n    }\n\n    return false;\n  }\n\n  getAnimationState(index: number): string {\n    const nextElPosition = index - this.activeStepIndex;\n    if (nextElPosition < 0) {\n      return 'previous';\n    } else if (nextElPosition > 0) {\n      return 'next';\n    }\n    return 'current';\n  }\n\n  private _getStepByIndex(index: number): MdbStepComponent {\n    return this.steps.toArray()[index];\n  }\n\n  next() {\n    if (this.activeStepIndex < this.steps.length - 1) {\n      this.setNewActiveStep(this.activeStepIndex + 1);\n      this._cdRef.markForCheck();\n    }\n  }\n\n  previous() {\n    if (this.activeStepIndex > 0) {\n      this.setNewActiveStep(this.activeStepIndex - 1);\n      this._cdRef.markForCheck();\n    }\n  }\n\n  submit() {\n    if (this.linear) {\n      this._markCurrentAsDone();\n      this._cdRef.markForCheck();\n    }\n  }\n\n  setNewActiveStep(index: number) {\n    setTimeout(() => {\n      const currentStep = this._activeStep;\n      const currentStepIndex = this._activeStepIndex;\n      const newStep = this._getStepByIndex(index);\n      const newStepIndex = this.steps\n        .toArray()\n        .findIndex((step: MdbStepComponent) => step === newStep);\n\n      if (this.linear && !this._isNewStepLinear(index)) {\n        return;\n      }\n\n      if (newStepIndex < this._activeStepIndex && !newStep.editable) {\n        return;\n      }\n\n      this._removeStepValidationClasses(newStep);\n\n      if (this.linear && index > this.activeStepIndex) {\n        if (this._isStepValid(this._activeStep)) {\n          this._markCurrentAsDone();\n          this._removeCurrentActiveStep();\n          this._setActiveStep(index);\n\n          this.stepChange.emit({\n            activeStep: newStep,\n            activeStepIndex: newStepIndex,\n            previousStep: currentStep,\n            previousStepIndex: currentStepIndex,\n          });\n        } else {\n          this._markCurrentAsWrong();\n          this._markStepControlsAsDirty(this._activeStep);\n        }\n      } else {\n        if (index < this.activeStepIndex) {\n          this._removeStepValidationClasses(this._activeStep);\n        }\n\n        this._removeCurrentActiveStep();\n        this._setActiveStep(index);\n\n        this.stepChange.emit({\n          activeStep: newStep,\n          activeStepIndex: newStepIndex,\n          previousStep: currentStep,\n          previousStepIndex: currentStepIndex,\n        });\n      }\n    }, 0);\n  }\n\n  private _markCurrentAsDone() {\n    this._activeStep.isDone = true;\n    this._activeStep.isWrong = false;\n  }\n\n  private _markCurrentAsWrong() {\n    this._activeStep.isWrong = true;\n    this._activeStep.isDone = false;\n  }\n\n  private _markStepControlsAsDirty(step: MdbStepComponent) {\n    const controls = step.stepForm.controls;\n    if (step.stepForm.controls) {\n      const keys = Object.keys(controls);\n      for (let i = 0; i < keys.length; i++) {\n        const control = controls[keys[i]];\n\n        if (control instanceof FormControl) {\n          control.markAsTouched();\n        }\n      }\n    }\n  }\n\n  private _removeStepValidationClasses(step: MdbStepComponent) {\n    step.isDone = false;\n    step.isWrong = false;\n  }\n\n  private _isNewStepLinear(newStepIndex: number) {\n    return this.activeStepIndex - newStepIndex === 1 || this.activeStepIndex - newStepIndex === -1;\n  }\n\n  private _setActiveStep(index: number) {\n    this.steps.toArray()[index].isActive = true;\n    this._updateHorizontalStepperHeight(index);\n    this.activeStepIndex = index;\n    this._activeStep = this._getStepByIndex(this.activeStepIndex);\n    this._cdRef.markForCheck();\n  }\n\n  private _removeCurrentActiveStep() {\n    const currentActiveStep = this.steps.find(activeStep => activeStep.isActive);\n    if (currentActiveStep) {\n      currentActiveStep.isActive = false;\n    }\n  }\n\n  resetAll() {\n    this.steps.forEach((step: MdbStepComponent) => {\n      step.reset();\n      this._setActiveStep(0);\n      this._cdRef.markForCheck();\n    });\n  }\n\n  private _updateHorizontalStepperHeight(index: number, height?: number) {\n    if (this.horizontal && !this.vertical) {\n      setTimeout(() => {\n        const stepHeight = height\n          ? height + 50\n          : this.stepContents.toArray()[index].nativeElement.scrollHeight + 50;\n        this._renderer.setStyle(this.container.nativeElement, 'height', stepHeight + 'px');\n      }, 0);\n    } else {\n      this._renderer.removeStyle(this.container.nativeElement, 'height');\n    }\n  }\n\n  private _initStepperVariation() {\n    if (this.isBrowser) {\n      if (this.vertical) {\n        setTimeout(() => {\n          this.horizontal = false;\n          this._renderer.removeStyle(this.container.nativeElement, 'height');\n        }, 0);\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    this._initStepperVariation();\n  }\n\n  ngAfterContentInit() {\n    this._setActiveStep(0);\n    this.stepChange$ = from(this.steps.toArray());\n    this.getStepChange$()\n      .pipe(\n        distinctUntilChanged(),\n        takeUntil(this._destroy)\n      )\n      .subscribe(() => {\n        if (this.container.nativeElement.children[this.activeStepIndex]) {\n          const stepElContent = this.container.nativeElement.children[this._activeStepIndex]\n            .lastElementChild;\n          this._updateHorizontalStepperHeight(this.activeStepIndex, stepElContent.clientHeight);\n        }\n      });\n\n    this.steps.changes.pipe(takeUntil(this._destroy)).subscribe(() => this._cdRef.markForCheck());\n  }\n\n  ngAfterContentChecked() {\n    if (this.stepContents) {\n      const activeStep = this.stepContents\n        .filter((el: any, index: number) => el && index === this.activeStepIndex)\n        .map((el: any) => el.nativeElement)[0];\n      if (activeStep.innerHTMl !== this.stepTextContent) {\n        this.stepChangeSubject.next(activeStep.innerHTML);\n      }\n      this.stepTextContent = activeStep.innerHTML;\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n  }\n}\n"]}