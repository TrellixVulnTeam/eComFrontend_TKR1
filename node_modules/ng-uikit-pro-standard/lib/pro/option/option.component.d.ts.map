{"version":3,"file":"option.component.d.ts","sources":["../../../../../projects/ng-uikit-pro-standard/src/lib/pro/option/option.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAEL,UAAU,EAGV,cAAc,EAGd,MAAM,EAGN,iBAAiB,EACjB,YAAY,EAEb,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAC3C,OAAO,EAAE,oBAAoB,EAAE,MAAM,0BAA0B,CAAC;;AAEhE,MAAM,WAAW,eAAe;AAChC,IAAE,YAAY,EAAE,MAAM,CAAC;AACvB,IAAE,cAAc,EAAE,MAAM,CAAC;AACzB,IAAE,QAAQ,EAAE,OAAO,CAAC;AACpB,CAAC;AAED,MAAM,WAAW,cAAc;AAC/B,IAAE,QAAQ,CAAC,EAAE,OAAO,CAAC;AACrB,CAAC;AAED,eAAO,MAAM,iBAAiB,iCAA2D,CAAC;AAE1F,eAAO,MAAM,gBAAgB,sCAA+D,CAAC;AAE7F,qBAMa,eAAgB,YAAW,MAAM;AAC9C,IA6BI,OAAO,CAAC,GAAG;AAAE,IACb,OAAO,CAAC,MAAM;AAAE,IACuB,OAAO,CAAC,OAAO;AAAE,IACX,KAAK,EAAE,cAAc;AACrE,IAjCU,KAAK,EAAE,GAAG,CAAC;AACtB,IACE,IACI,KAAK,IAGW,MAAM,CADzB;AACH,IAAE,IAAI,KAAK,CAAC,QAAQ,EAAE,MAAM,EAEzB;AACH,IAAE,OAAO,CAAC,MAAM,CAAS;AACzB,IAGE,QAAQ,UAAS;AACnB,IACY,QAAQ,CAAC,eAAe,gCAAuC;AAC3E,IACE,aAAa,EAAE,MAAM,CAAC;AACxB,IACE,OAAO,CAAC,SAAS,CAAS;AAC5B,IAAE,OAAO,CAAC,OAAO,CAAS;AAC1B,IAAE,SAAS,UAAS;AACpB,IACE,OAAO,UAAS;AAClB,IACE,WAAW,EAAE,OAAO,CAAC,eAAe,CAAC,CAAkC;AACzE,IAAE,MAAM,EAAE,UAAU,CAAC,eAAe,CAAC,CAAmC;AACxE,gBAEY,GAAG,EAAE,UAAU,EACf,MAAM,EAAE,iBAAiB,EACc,OAAO,EAAE,eAAe,EAC1B,KAAK,EAAE,cAAc;AACpE,IAKA,MAAM,UAAQ;AAChB,IACE,IACI,MAAM,YAET;AACH,IACE,IACI,QAAQ,YAEX;AACH,IACE,IACI,YAAY,IAAI,MAAM,CAEzB;AACH,IACE,IACI,IAAI,WAEP;AACH,IACE,IACI,UAAU,YAEb;AACH,IACE,IACI,UAAU,YAEb;AACH,IAEE,OAAO;AACJ,IAGH,QAAQ;AACN,IAGF,IAAI,YAAY,QAEf;AACH,IACE,QAAQ;AACL,IASH,MAAM;AACH,IAOH,QAAQ;AACL,IAOH,eAAe;AACZ,IAMH,iBAAiB;;;AACd,CAKJ;AACD","sourcesContent":["import {\n  Component,\n  ElementRef,\n  Input,\n  HostListener,\n  InjectionToken,\n  Optional,\n  Inject,\n  OnInit,\n  HostBinding,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Output,\n} from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\nimport { OptionGroupComponent } from './option-group.component';\n\nexport interface MdbOptionParent {\n  optionHeight: number;\n  visibleOptions: number;\n  multiple: boolean;\n}\n\nexport interface MdbOptionGroup {\n  disabled?: boolean;\n}\n\nexport const MDB_OPTION_PARENT = new InjectionToken<MdbOptionParent>('MDB_OPTION_PARENT');\n\nexport const MDB_OPTION_GROUP = new InjectionToken<OptionGroupComponent>('MDB_OPTION_GROUP');\n\n@Component({\n  selector: 'mdb-select-option',\n  templateUrl: 'option.component.html',\n  styleUrls: ['./option.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class OptionComponent implements OnInit {\n  @Input() value: any;\n\n  @Input()\n  get label() {\n    return this._label || this._el.nativeElement.textContent;\n  }\n  set label(newValue: string) {\n    this._label = newValue;\n  }\n  private _label: string;\n\n  @HostBinding('class.disabled')\n  @Input()\n  disabled = false;\n\n  @Output() readonly selectionChange = new EventEmitter<OptionComponent>();\n\n  _optionHeight: number;\n\n  private _selected = false;\n  private _active = false;\n  _multiple = false;\n\n  clicked = false;\n\n  clickSource: Subject<OptionComponent> = new Subject<OptionComponent>();\n  click$: Observable<OptionComponent> = this.clickSource.asObservable();\n\n  constructor(\n    private _el: ElementRef,\n    private _cdRef: ChangeDetectorRef,\n    @Optional() @Inject(MDB_OPTION_PARENT) private _parent: MdbOptionParent,\n    @Optional() @Inject(MDB_OPTION_GROUP) public group: MdbOptionGroup\n  ) {\n    this.clicked = false;\n  }\n\n  @HostBinding('class.mdb-option')\n  option = true;\n\n  @HostBinding('class.active')\n  get active() {\n    return this._active;\n  }\n\n  @HostBinding('class.selected')\n  get selected() {\n    return this._selected;\n  }\n\n  @HostBinding('style.height.px')\n  get optionHeight(): number {\n    return this._optionHeight;\n  }\n\n  @HostBinding('attr.role')\n  get role() {\n    return 'option';\n  }\n\n  @HostBinding('attr.aria-disabled')\n  get isDisabled() {\n    return this.disabled ? true : false;\n  }\n\n  @HostBinding('attr.aria-selected')\n  get isSelected() {\n    return this.selected;\n  }\n\n  @HostListener('click')\n  onClick() {\n    this.clickSource.next(this);\n  }\n\n  getLabel() {\n    return this._el.nativeElement.textContent;\n  }\n\n  get offsetHeight() {\n    return this._el.nativeElement.offsetHeight;\n  }\n\n  ngOnInit() {\n    if (this._parent && this._parent.visibleOptions && this._parent.optionHeight) {\n      this._optionHeight = this._parent.optionHeight;\n    }\n\n    if (this._parent && this._parent.multiple) {\n      this._multiple = true;\n    }\n  }\n\n  select() {\n    if (!this._selected) {\n      this._selected = this._multiple ? !this._selected : true;\n      this.selectionChange.emit(this);\n      this._cdRef.markForCheck();\n    }\n  }\n\n  deselect() {\n    if (this._selected) {\n      this._selected = false;\n      this.selectionChange.emit(this);\n      this._cdRef.markForCheck();\n    }\n  }\n\n  setActiveStyles() {\n    if (!this._active) {\n      this._active = true;\n      this._cdRef.markForCheck();\n    }\n  }\n\n  setInactiveStyles() {\n    if (this._active) {\n      this._active = false;\n      this._cdRef.markForCheck();\n    }\n  }\n}\n"]}