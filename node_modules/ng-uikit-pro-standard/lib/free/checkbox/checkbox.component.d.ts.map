{"version":3,"file":"checkbox.component.d.ts","sources":["../../../../../projects/ng-uikit-pro-standard/src/lib/free/checkbox/checkbox.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAEL,YAAY,EAIZ,SAAS,EACT,MAAM,EAEN,aAAa,EAIb,iBAAiB,EAClB,MAAM,eAAe,CAAC;;AAKvB,eAAO,MAAM,uBAAuB,EAAE,GAKrC,CAAC;AAIF,qBAAa,iBAAiB;AAC9B,IAAE,OAAO,EAAE,iBAAiB,CAAC;AAC7B,IAAE,OAAO,EAAE,OAAO,CAAC;AACnB,CAAC;AAED,qBAQa,iBAAkB,YAAW,MAAM,EAAE,SAAS;AAC3D,IAuBc,OAAO,CAAC,MAAM;AAAE,IAvBU,OAAO,EAAE,GAAG,CAAC;AACrD,IACE,OAAO,CAAC,SAAS,CAAuC;AAC1D,IACW,KAAK,EAAE,MAAM,CAAC;AACzB,IAAW,EAAE,EAAE,MAAM,CAAkB;AACvC,IAAW,QAAQ,EAAE,OAAO,CAAC;AAC7B,IAAW,IAAI,EAAE,MAAM,CAAC;AACxB,IAAW,KAAK,EAAE,MAAM,CAAC;AACzB,IAAW,OAAO,UAAS;AAC3B,IAAW,QAAQ,UAAS;AAC5B,IAAW,aAAa,UAAS;AACjC,IAAW,QAAQ,EAAE,OAAO,CAAC;AAC7B,IAAW,OAAO,UAAS;AAC3B,IAAW,gBAAgB,SAAU;AACrC,IAAW,OAAO,UAAS;AAC3B,IAAW,MAAM,UAAS;AAC1B,IAAW,QAAQ,EAAE,MAAM,CAAC;AAC5B,IACY,MAAM,EAAE,YAAY,CAAC,iBAAiB,CAAC,CAAyC;AAC5F,IACE,OAAO,CAAC,eAAe,CAA0B;AACnD,gBACsB,MAAM,EAAE,iBAAiB;AAAG,IAGhD,YAAY,CAAC,KAAK,EAAE,GAAG;AACpB,IAKH,eAAe;AACZ,IAGH,QAAQ;AACL,IAKH,WAAW,CAAC,OAAO,EAAE,aAAa;AAC/B,IAKH,IAAI,WAAW,sBAKd;AACH,IACE,MAAM;AACH,IAUH,eAAe,CAAC,KAAK,EAAE,GAAG;AACvB,IAIH,gBAAgB,CAAC,KAAK,EAAE,GAAG;AACxB,IAIH,MAAM;AACH,IAQH,QAAQ,MAAO,GAAG,UAAQ;AAC5B,IAAE,SAAS,aAAY;AACvB,IACE,UAAU,CAAC,KAAK,EAAE,GAAG;AAClB,IAKH,gBAAgB,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,KAAK,IAAI;AAClC,IAGH,iBAAiB,CAAC,EAAE,EAAE,MAAM,IAAI;AAC7B,IAGH,gBAAgB,CAAC,UAAU,EAAE,OAAO;;;AACjC,CAEJ;AACD","sourcesContent":["import {\n  Component,\n  EventEmitter,\n  forwardRef,\n  HostListener,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Subject, timer } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nexport const CHECKBOX_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => CheckboxComponent),\n  multi: true,\n};\n\nlet defaultIdNumber = 0;\n\nexport class MdbCheckboxChange {\n  element: CheckboxComponent;\n  checked: boolean;\n}\n\n@Component({\n  selector: 'mdb-checkbox',\n  templateUrl: './checkbox.component.html',\n  styleUrls: ['checkbox-module.scss'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [CHECKBOX_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckboxComponent implements OnInit, OnChanges {\n  @ViewChild('input', { static: true }) inputEl: any;\n\n  private defaultId = `mdb-checkbox-${++defaultIdNumber}`;\n\n  @Input() class: string;\n  @Input() id: string = this.defaultId;\n  @Input() required: boolean;\n  @Input() name: string;\n  @Input() value: string;\n  @Input() checked = false;\n  @Input() filledIn = false;\n  @Input() indeterminate = false;\n  @Input() disabled: boolean;\n  @Input() rounded = false;\n  @Input() checkboxPosition = 'left';\n  @Input() default = false;\n  @Input() inline = false;\n  @Input() tabIndex: number;\n\n  @Output() change: EventEmitter<MdbCheckboxChange> = new EventEmitter<MdbCheckboxChange>();\n\n  private checkboxClicked = new Subject<boolean>();\n\n  constructor(private _cdRef: ChangeDetectorRef) {}\n\n  @HostListener('click', ['$event'])\n  onLabelClick(event: any) {\n    event.stopPropagation();\n    this.checkboxClicked.next(true);\n  }\n\n  @HostListener('document:click')\n  onDocumentClick() {\n    this.checkboxClicked.next(false);\n  }\n\n  ngOnInit() {\n    if (this.indeterminate && !this.filledIn && !this.rounded) {\n      this.inputEl.indeterminate = true;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.hasOwnProperty('checked')) {\n      this.checked = changes.checked.currentValue;\n    }\n  }\n\n  get changeEvent() {\n    const newChangeEvent = new MdbCheckboxChange();\n    newChangeEvent.element = this;\n    newChangeEvent.checked = this.checked;\n    return newChangeEvent;\n  }\n\n  toggle() {\n    if (this.disabled) {\n      return;\n    }\n    this.checked = !this.checked;\n    this.indeterminate = false;\n    this.onChange(this.checked);\n\n    this._cdRef.markForCheck();\n  }\n\n  onCheckboxClick(event: any) {\n    event.stopPropagation();\n    this.toggle();\n  }\n\n  onCheckboxChange(event: any) {\n    event.stopPropagation();\n    timer(0).subscribe(() => this.change.emit(this.changeEvent));\n  }\n\n  onBlur() {\n    this.checkboxClicked.pipe(take(1)).subscribe(val => {\n      if (!val) {\n        this.onTouched();\n      }\n    });\n  }\n\n  // Control Value Accessor Methods\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  writeValue(value: any) {\n    this.value = value;\n    this.checked = !!value;\n    this._cdRef.markForCheck();\n  }\n\n  registerOnChange(fn: (_: any) => void) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void) {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n"]}