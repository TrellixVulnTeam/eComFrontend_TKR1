{"version":3,"file":"navbar.component.d.ts","sources":["../../../../../projects/ng-uikit-pro-standard/src/lib/free/navbars/navbar.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AACjD,OAAO,EACL,mBAAmB,EACnB,aAAa,EAGb,UAAU,EAGV,MAAM,EACN,SAAS,EAGT,iBAAiB,EAGjB,MAAM,EACN,SAAS,EACV,MAAM,eAAe,CAAC;AAEvB,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;;AAInD,qBAOa,eAAgB,YAAW,aAAa,EAAE,MAAM,EAAE,mBAAmB,EAAE,SAAS;AAC7F,IAgCW,QAAQ,EAAE,SAAS;AAC9B,IAAI,OAAO,CAAC,cAAc;AAAE,IACxB,OAAO,CAAC,MAAM;AAAE,IAChB,OAAO,CAAC,OAAO;AAAE,IACC,OAAO,CAAC,SAAS;AAAE,IApC9B,cAAc,EAAE,MAAM,GAAG,MAAM,EAAE,CAAC;AAC7C,IAAW,SAAS,EAAE,MAAM,CAAC;AAC7B,IAAW,eAAe,UAAQ;AAClC,IAAW,UAAU,SAAoB;AACzC,IAAW,iBAAiB,SAAO;AACnC,IAAW,gBAAgB,UAAS;AACpC,IACE,OAAO,CAAC,SAAS,CAAgC;AACnD,IACE,gBAAgB,EAAE,GAAG,CAAC;AACxB,IAAE,KAAK,UAAS;AAChB,IACS,SAAS,EAAE,OAAO,CAAC;AAC5B,IAAS,MAAM,EAAE,MAAM,CAAC;AACxB,IAAS,QAAQ,SAAO;AAAC,IAEhB,QAAQ,UAAQ;AACzB,IAAS,SAAS,UAAS;AAC3B,IAAS,UAAU,UAAS;AAC5B,IACE,OAAO,CAAC,YAAY,CAAK;AAC3B,IACE,YAAY,UAAS;AACvB,IACyC,EAAE,EAAE,UAAU,CAAC;AACxD,IAAuB,MAAM,EAAE,UAAU,CAAC;AAC1C,IAAsC,MAAM,EAAE,UAAU,CAAC;AACzD,IAA4C,SAAS,EAAE,UAAU,CAAC;AAClE,IAAwB,OAAO,EAAE,UAAU,CAAC;AAC5C,IAAgC,KAAK,EAAE,cAAc,CAAC;AACtD,gBAEW,QAAQ,EAAE,SAAS,EAClB,cAAc,EAAE,aAAa,EAC7B,MAAM,EAAE,iBAAiB,EACzB,OAAO,EAAE,MAAM,EACG,SAAS,EAAE,GAAG;AAC1C,IASA,kBAAkB,CAAC,gBAAgB,EAAE,GAAG;AACrC,IAMH,qBAAqB;AAClB,IAWH,OAAO,CAAC,eAAe;AAAE,IAczB,QAAQ;AACL,IAIH,eAAe;AACZ,IAoBH,MAAM;AACH,IASH,IAAI;AACD,IAmBH,IAAI;AACD,IAmBH,IAAI,YAAY,gBAMf;AACH,IAC6C,QAAQ,CAAC,KAAK,EAAE,GAAG;AAC3D,IAmCH,qBAAqB;AAClB,IAcH,WAAW;;;AACR,CAGJ;AACD","sourcesContent":["import { NavbarService } from './navbar.service';\nimport {\n  AfterContentChecked,\n  AfterViewInit,\n  Component,\n  ContentChild,\n  ElementRef,\n  HostListener,\n  Input,\n  OnInit,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  Inject,\n  NgZone,\n  OnDestroy,\n} from '@angular/core';\nimport { fromEvent, Subject } from 'rxjs';\nimport { LinksComponent } from './links.component';\nimport { DOCUMENT } from '@angular/common';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'mdb-navbar',\n  templateUrl: 'navbar.component.html',\n  styleUrls: ['./navbars-module.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavbarComponent implements AfterViewInit, OnInit, AfterContentChecked, OnDestroy {\n  @Input() iconBackground: string | string[];\n  @Input() SideClass: string;\n  @Input() containerInside = true;\n  @Input() collapseId = 'navbarCollapse';\n  @Input() scrollSensitivity = 120;\n  @Input() scrollableNavbar = false;\n\n  private _destroy$: Subject<void> = new Subject();\n\n  navbarLinkClicks: any;\n  shown = false;\n\n  public doubleNav: boolean;\n  public height: number;\n  public duration = 350; // ms\n\n  public collapse = true;\n  public showClass = false;\n  public collapsing = false;\n\n  private _itemsLength = 0;\n\n  ariaExpanded = false;\n\n  @ViewChild('navbar', { static: true }) el: ElementRef;\n  @ViewChild('mobile') mobile: ElementRef;\n  @ViewChild('nav', { static: true }) navbar: ElementRef;\n  @ViewChild('container', { static: true }) container: ElementRef;\n  @ViewChild('toggler') toggler: ElementRef;\n  @ContentChild(LinksComponent) links: LinksComponent;\n\n  constructor(\n    public renderer: Renderer2,\n    private _navbarService: NavbarService,\n    private _cdRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) private _document: any\n  ) {\n    this._navbarService\n      .getNavbarLinkClicks()\n      .pipe(takeUntil(this._destroy$))\n      .subscribe(navbarLinkClicks => {\n        this.closeNavbarOnClick(navbarLinkClicks);\n      });\n  }\n\n  closeNavbarOnClick(navbarLinkClicks: any) {\n    this.navbarLinkClicks = navbarLinkClicks;\n    if (this.showClass) {\n      this.hide();\n    }\n  }\n\n  addTogglerIconClasses() {\n    if (this.iconBackground) {\n      if (Array.isArray(this.iconBackground)) {\n        this.iconBackground.forEach(iconClass => {\n          this.renderer.addClass(this.toggler.nativeElement, iconClass);\n        });\n      } else {\n        this.renderer.addClass(this.toggler.nativeElement, this.iconBackground);\n      }\n    }\n  }\n\n  private _listenToScroll() {\n    this._ngZone.runOutsideAngular(() => {\n      fromEvent(this._document, 'scroll')\n        .pipe(takeUntil(this._destroy$))\n        .subscribe(() => {\n          if (window.pageYOffset > this.scrollSensitivity) {\n            this.renderer.addClass(this.navbar.nativeElement, 'top-nav-collapse');\n          } else {\n            this.renderer.removeClass(this.navbar.nativeElement, 'top-nav-collapse');\n          }\n        });\n    });\n  }\n\n  ngOnInit() {\n    const isDoubleNav = this.SideClass.split(' ');\n    this.doubleNav = isDoubleNav.indexOf('double-nav') !== -1;\n  }\n\n  ngAfterViewInit() {\n    if (!this.containerInside) {\n      const childrens = Array.from(this.container.nativeElement.children);\n      childrens.forEach(child => {\n        this.renderer.appendChild(this.navbar.nativeElement, child);\n        this.container.nativeElement.remove();\n      });\n    }\n    if (this.el.nativeElement.children.length === 0) {\n      this.el.nativeElement.remove();\n    }\n    this.addTogglerIconClasses();\n    if (this.scrollableNavbar) {\n      this.renderer.addClass(this.el.nativeElement, 'collapsed-navbar-scroll');\n    }\n\n    if (this.navbar.nativeElement.classList.contains('scrolling-navbar')) {\n      this._listenToScroll();\n    }\n  }\n\n  toggle() {\n    if (!this.collapsing) {\n      if (this.shown) {\n        this.hide();\n      } else {\n        this.show();\n      }\n    }\n  }\n\n  show() {\n    this.shown = true;\n    this.collapse = false;\n    this.collapsing = true;\n    this.ariaExpanded = true;\n\n    setTimeout(() => {\n      this.height = this.el.nativeElement.scrollHeight;\n      this.renderer.setStyle(this.el.nativeElement, 'height', this.height + 'px');\n    }, 0);\n\n    setTimeout(() => {\n      this.collapsing = false;\n      this.collapse = true;\n      this.showClass = true;\n    }, this.duration);\n\n    this._cdRef.markForCheck();\n  }\n\n  hide() {\n    if (this.shown) {\n      this.shown = false;\n      this.collapse = false;\n      this.showClass = false;\n      this.collapsing = true;\n      this.ariaExpanded = false;\n      setTimeout(() => {\n        this.renderer.setStyle(this.el.nativeElement, 'height', '0px');\n      }, 0);\n\n      setTimeout(() => {\n        this.collapsing = false;\n        this.collapse = true;\n      }, this.duration);\n    }\n\n    this._cdRef.markForCheck();\n  }\n\n  get displayStyle() {\n    if (!this.containerInside) {\n      return 'flex';\n    } else {\n      return '';\n    }\n  }\n\n  @HostListener('window:resize', ['$event']) onResize(event: any) {\n    let breakpoint = 0;\n\n    if (this.SideClass.includes('navbar-expand-xl')) {\n      breakpoint = 1200;\n    } else if (this.SideClass.includes('navbar-expand-lg')) {\n      breakpoint = 992;\n    } else if (this.SideClass.includes('navbar-expand-md')) {\n      breakpoint = 768;\n    } else if (this.SideClass.includes('navbar-expand-sm')) {\n      breakpoint = 576;\n    } else {\n      breakpoint = event.target.innerWidth + 1;\n    }\n\n    if (event.target.innerWidth < breakpoint) {\n      if (!this.shown) {\n        this.collapse = false;\n        this.renderer.setStyle(this.el.nativeElement, 'height', '0px');\n        this.renderer.setStyle(this.el.nativeElement, 'opacity', '0');\n        setTimeout(() => {\n          this.height = this.el.nativeElement.scrollHeight;\n          this.collapse = true;\n          this.renderer.setStyle(this.el.nativeElement, 'opacity', '');\n        }, 4);\n      }\n    } else {\n      this.collapsing = false;\n      this.shown = false;\n      this.showClass = false;\n      this.collapse = true;\n      this.ariaExpanded = false;\n      this.renderer.setStyle(this.el.nativeElement, 'height', '');\n    }\n  }\n\n  ngAfterContentChecked() {\n    if (this.el.nativeElement.firstElementChild) {\n      if (\n        this._itemsLength !==\n        this.el.nativeElement.firstElementChild.firstElementChild.children.length\n      ) {\n        this.height = this.el.nativeElement.firstElementChild.firstElementChild.clientHeight;\n        this.renderer.setStyle(this.el.nativeElement, 'height', this.height + 'px');\n      }\n\n      this._itemsLength = this.el.nativeElement.firstElementChild.firstElementChild.children.length;\n    }\n    this._cdRef.markForCheck();\n  }\n\n  ngOnDestroy() {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n}\n"]}