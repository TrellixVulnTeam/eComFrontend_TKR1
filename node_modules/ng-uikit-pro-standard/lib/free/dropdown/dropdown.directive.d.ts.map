{"version":3,"file":"dropdown.directive.d.ts","sources":["../../../../../projects/ng-uikit-pro-standard/src/lib/free/dropdown/dropdown.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EAEL,UAAU,EACV,eAAe,EACf,YAAY,EAGZ,SAAS,EACT,MAAM,EAEN,SAAS,EACT,gBAAgB,EAEhB,iBAAiB,EAClB,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,YAAY,EAAW,MAAM,MAAM,CAAC;AAE7C,OAAO,EAAE,eAAe,EAAE,MAAM,kDAAkD,CAAC;AACnF,OAAO,EAAE,sBAAsB,EAAE,MAAM,oDAAoD,CAAC;AAC5F,OAAO,EAAE,gBAAgB,EAAE,MAAM,mBAAmB,CAAC;AACrD,OAAO,EAAE,4BAA4B,EAAE,MAAM,gCAAgC,CAAC;AAC9E,OAAO,EAAE,eAAe,EAAE,MAAM,kBAAkB,CAAC;AAEnD,OAAO,EAAE,uBAAuB,EAAE,MAAM,2BAA2B,CAAC;;AAIpE,qBAUa,mBAAoB,YAAW,MAAM,EAAE,SAAS;AAC7D,IAwHI,OAAO,CAAC,WAAW;AAAE,IACrB,OAAO,CAAC,SAAS;AAAE,IACnB,OAAO,CAAC,iBAAiB;AAAE,IAC3B,OAAO,CAAC,IAAI;AAAE,IACd,OAAO,CAAC,OAAO;AAAE,IACjB,OAAO,CAAC,MAAM;AAAE,IAChB,OAAO,CAAC,KAAK;AAAE,IA9HjB;AACF;AACE,OAAG;AACL,IAAW,SAAS,EAAE,MAAM,CAAC;AAC7B,IAAE;AACF;AACE;AACE,OAAC;AACL,IAAW,QAAQ,EAAE,MAAM,CAAC;AAC5B,IAAE;AACF;AACE;AACE,OAAC;AACL,IAAW,SAAS,EAAE,MAAM,CAAC;AAC7B,IAAW,MAAM,EAAE,OAAO,CAAC;AAC3B,IAAW,aAAa,UAAS;AACjC,IAAW,eAAe,UAAS;AACnC,IAAE;AACF;AACE,OAAG;AACL,IAAE,IAAwC,QAAQ,SAW/C;AACH,IACE;AACF;AACE;AACE,OAAC;AACL,IAAE,IAAa,SAAS,CAAC,KAAK,EAAE,OAAO,EAIpC;AACH,IACE,IAAI,SAAS,IAAI,OAAO,CAEvB;AACH,IACE;AACF;AACE,OAAG;AACL,IAAE,IAAa,UAAU,CAAC,KAAK,EAAE,OAAO,EAMrC;AACH,IACE,IAAI,UAAU,IAAI,OAAO,CAExB;AACH,IACE;AACF;AACE,OAAG;AACL,IAAE,IAGI,MAAM,IAAI,OAAO,CAKpB;AACH,IACE,IAAI,MAAM,CAAC,KAAK,EAAE,OAAO,EAMxB;AACH,IACE;AACF;AACE,OAAG;AACL,IAAY,YAAY,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC;AAC5C,IACE;AACF;AACE,OAAG;AACL,IACY,OAAO,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC;AACvC,IAAY,KAAK,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC;AACrC,IACE;AACF;AACE,OAAG;AACL,IACY,QAAQ,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC;AACxC,IAAY,MAAM,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC;AACtC,IACE,OAAO,CAAC,SAAS,CAAgC;AACnD,IACE,IAAI,KAAK,IAAI,OAAO,CAEnB;AACH,IACE,aAAa,UAAS;AACxB,IAAE,WAAW,EAAE,OAAO,CAAC;AACvB,IAAE,YAAY,EAAE,eAAe,CAAC,uBAAuB,CAAC,CAAC;AACzD,IACE,WAAW,EAAE,OAAO,CAAC;AACvB,IAAE,SAAS,EAAE,eAAe,CAAC,4BAA4B,CAAC,CAAC;AAC3D,IAAE,OAAO,EAAE,OAAO,CAAC;AACnB,IAAE,cAAc,EAAE,YAAY,EAAE,CAAM;AACtC,IAAE,SAAS,UAAS;AACpB,IAAE,gBAAgB,EAAE,OAAO,CAAC;AAC5B,gBAEY,WAAW,EAAE,UAAU,EACvB,SAAS,EAAE,SAAS,EACpB,iBAAiB,EAAE,gBAAgB,EACnC,IAAI,EAAE,sBAAsB,EAC5B,OAAO,EAAE,gBAAgB,EACzB,MAAM,EAAE,eAAe,EACvB,KAAK,EAAE,iBAAiB;AAClC,IAoBA,QAAQ,IAAI,IAAI;AAAE,IAyDlB;AACF;AACE;AACE,OAAC;AACL,IAAE,IAAI,IAAI,IAAI;AAAE,IA+Fd;AACF;AACE;AACE,OAAC;AACL,IAAE,IAAI,IAAI,IAAI;AAAE,IA4Cd;AACF;AACE;AACE,OAAC;AACL,IAAE,MAAM,CAAC,KAAK,CAAC,EAAE,OAAO,GAAG,IAAI;AAAE,IAQ/B,WAAW,IAAI,IAAI;;;AAAE,CAMtB;AACD","sourcesContent":["import {\n  Component,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  Renderer2,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { Subscription, Subject } from 'rxjs';\n\nimport { ComponentLoader } from '../utils/component-loader/component-loader.class';\nimport { ComponentLoaderFactory } from '../utils/component-loader/component-loader.factory';\nimport { BsDropdownConfig } from './dropdown.config';\nimport { BsDropdownContainerComponent } from './dropdown-container.component';\nimport { BsDropdownState } from './dropdown.state';\nimport { BsComponentRef } from '../utils/component-loader/bs-component-ref.class';\nimport { BsDropdownMenuDirective } from './dropdown-menu.directive';\nimport { isBs3 } from '../utils/ng2-bootstrap-config';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: '[mdbDropdown],[dropdown]',\n  exportAs: 'bs-dropdown',\n  template: '<ng-content></ng-content>',\n  styleUrls: ['dropdown-module.scss'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [BsDropdownState],\n})\n// tslint:disable-next-line:component-class-suffix\nexport class BsDropdownDirective implements OnInit, OnDestroy {\n  /**\n   * Placement of a popover. Accepts: \"top\", \"bottom\", \"left\", \"right\"\n   */\n  @Input() placement: string;\n  /**\n   * Specifies events that should trigger. Supports a space separated list of\n   * event names.\n   */\n  @Input() triggers: string;\n  /**\n   * A selector specifying the element the popover should be appended to.\n   * Currently only supports \"body\".\n   */\n  @Input() container: string;\n  @Input() dropup: boolean;\n  @Input() dropupDefault = false;\n  @Input() dynamicPosition = false;\n  /**\n   * This attribute indicates that the dropdown should be opened upwards\n   */\n  @HostBinding('class.dropup') public get isDropup() {\n    if (this.dropup) {\n      this._isDropupDefault = false;\n      return this.dropup;\n    } else if (this.dropupDefault) {\n      this._isDropupDefault = true;\n      return this.dropupDefault;\n    } else if (this.dropupDefault && this.dropup) {\n      this._isDropupDefault = false;\n      return this.dropup;\n    }\n  }\n\n  /**\n   * Indicates that dropdown will be closed on item or document click,\n   * and after pressing ESC\n   */\n  @Input() set autoClose(value: boolean) {\n    if (typeof value === 'boolean') {\n      this._state.autoClose = value;\n    }\n  }\n\n  get autoClose(): boolean {\n    return this._state.autoClose;\n  }\n\n  /**\n   * Disables dropdown toggle and hides dropdown menu if opened\n   */\n  @Input() set isDisabled(value: boolean) {\n    this._isDisabled = value;\n    this._state.isDisabledChange.emit(value);\n    if (value) {\n      this.hide();\n    }\n  }\n\n  get isDisabled(): boolean {\n    return this._isDisabled;\n  }\n\n  /**\n   * Returns whether or not the popover is currently being shown\n   */\n  @HostBinding('class.open')\n  @HostBinding('class.show')\n  @Input()\n  get isOpen(): boolean {\n    if (this._showInline) {\n      return this._isInlineOpen;\n    }\n    return this._dropdown.isShown;\n  }\n\n  set isOpen(value: boolean) {\n    if (value) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n\n  /**\n   * Emits an event when isOpen change\n   */\n  @Output() isOpenChange: EventEmitter<any>;\n\n  /**\n   * Emits an event when the popover is shown\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() onShown: EventEmitter<any>;\n  @Output() shown: EventEmitter<any>;\n\n  /**\n   * Emits an event when the popover is hidden\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() onHidden: EventEmitter<any>;\n  @Output() hidden: EventEmitter<any>;\n\n  private _destroy$: Subject<void> = new Subject();\n\n  get isBs4(): boolean {\n    return !isBs3();\n  }\n\n  _isInlineOpen = false;\n  _showInline: boolean;\n  _inlinedMenu: EmbeddedViewRef<BsDropdownMenuDirective>;\n\n  _isDisabled: boolean;\n  _dropdown: ComponentLoader<BsDropdownContainerComponent>;\n  _dropup: boolean;\n  _subscriptions: Subscription[] = [];\n  _isInited = false;\n  _isDropupDefault: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _renderer: Renderer2,\n    private _viewContainerRef: ViewContainerRef,\n    private _cis: ComponentLoaderFactory,\n    private _config: BsDropdownConfig,\n    private _state: BsDropdownState,\n    private cdRef: ChangeDetectorRef\n  ) {\n    // create dropdown component loader\n    this._dropdown = this._cis\n      .createLoader<BsDropdownContainerComponent>(\n        this._elementRef,\n        this._viewContainerRef,\n        this._renderer\n      )\n      .provide({ provide: BsDropdownState, useValue: this._state });\n\n    this.onShown = this._dropdown.onShown;\n    this.shown = this._dropdown.shown;\n    this.onHidden = this._dropdown.onHidden;\n    this.hidden = this._dropdown.hidden;\n    this.isOpenChange = this._state.isOpenChange;\n\n    // set initial dropdown state from config\n    this._state.autoClose = this._config.autoClose;\n  }\n\n  ngOnInit(): void {\n    // fix: seems there are an issue with `routerLinkActive`\n    // which result in duplicated call ngOnInit without call to ngOnDestroy\n    // read more: https://github.com/valor-software/ngx-bootstrap/issues/1885\n    if (this._isInited) {\n      return;\n    }\n    this._isInited = true;\n\n    this._showInline = !this.container;\n\n    this._dropup = this.dropup;\n\n    // attach DOM listeners\n    this._dropdown.listen({\n      triggers: this.triggers,\n      show: () => this.show(),\n    });\n\n    // toggle visibility on toggle element click\n    this._state.toggleClick\n      .pipe(takeUntil(this._destroy$))\n      .subscribe((value: boolean) => this.toggle(value));\n\n    // hide dropdown if set disabled while opened\n    this._state.isDisabledChange.pipe(takeUntil(this._destroy$)).subscribe((element: any) => {\n      if (element === true) {\n        this.hide();\n      }\n    });\n\n    // attach dropdown menu inside of dropdown\n    if (this._showInline) {\n      this._state.dropdownMenu.then((dropdownMenu: BsComponentRef<BsDropdownMenuDirective>) => {\n        this._inlinedMenu = dropdownMenu.viewContainer.createEmbeddedView(dropdownMenu.templateRef);\n      });\n    }\n\n    this._state.isOpenChange.pipe(takeUntil(this._destroy$)).subscribe(() => {\n      setTimeout(() => {\n        const dropdownContainer = this._elementRef.nativeElement.querySelector('.dropdown-menu');\n        const left = dropdownContainer.getBoundingClientRect().left;\n\n        if (\n          dropdownContainer.classList.contains('dropdown-menu-right') &&\n          left <= dropdownContainer.clientWidth\n        ) {\n          if (left < 0) {\n            this._renderer.setStyle(dropdownContainer, 'right', left + 'px');\n          } else {\n            this._renderer.setStyle(dropdownContainer, 'right', '0');\n          }\n        }\n      }, 0);\n    });\n  }\n\n  /**\n   * Opens an element’s popover. This is considered a “manual” triggering of\n   * the popover.\n   */\n  show(): void {\n    if (this.isOpen || this.isDisabled) {\n      return;\n    }\n    // material and dropup dropdown animation\n\n    const button = this._elementRef.nativeElement.children[0];\n    const container = this._elementRef.nativeElement.querySelector('.dropdown-menu');\n\n    if (\n      !container.parentNode.classList.contains('btn-group') &&\n      !container.parentNode.classList.contains('dropdown') &&\n      !this._isDropupDefault\n    ) {\n      container.parentNode.classList.add('dropdown');\n    }\n    if (this.dropup && !this._isDropupDefault) {\n      container.parentNode.classList.add('dropup-material');\n    }\n    if (button.tagName !== 'BUTTON') {\n      if (button.tagName === 'A') {\n        container.classList.add('a-various-dropdown');\n      } else {\n        container.classList.add('various-dropdown');\n      }\n    } else {\n      if (button.classList.contains('btn-sm')) {\n        container.classList.add('small-dropdown');\n      }\n      if (button.classList.contains('btn-md')) {\n        container.classList.add('medium-dropdown');\n      }\n      if (button.classList.contains('btn-lg')) {\n        container.classList.add('large-dropdown');\n      }\n    }\n    setTimeout(() => {\n      container.classList.add('fadeInDropdown');\n\n      if (this.dynamicPosition) {\n        const bounding = container.getBoundingClientRect();\n        const out: { top: boolean; bottom: boolean } = {\n          top: bounding.top < 0,\n          bottom: bounding.bottom > (window.innerHeight || document.documentElement.clientHeight),\n        };\n\n        if (this.dropup && out.top) {\n          this.dropup = false;\n        } else if (!this.dropup && out.bottom) {\n          this.dropup = true;\n        }\n      }\n    }, 0);\n\n    if (this._showInline) {\n      this._isInlineOpen = true;\n      if (\n        container.parentNode.classList.contains('dropdown') ||\n        container.parentNode.classList.contains('dropup-material')\n      ) {\n        setTimeout(() => {\n          this.onShown.emit(true);\n          this.shown.emit(true);\n        }, 560);\n      } else {\n        setTimeout(() => {\n          this.onShown.emit(true);\n          this.shown.emit(true);\n        }, 0);\n      }\n      this._state.isOpenChange.emit(true);\n\n      return;\n    }\n    this._state.dropdownMenu.then(dropdownMenu => {\n      // check direction in which dropdown should be opened\n      const _dropup = this.dropup === true || this.dropupDefault === true;\n\n      this._state.direction = _dropup ? 'up' : 'down';\n      const _placement = this.placement || (_dropup ? 'top left' : 'bottom left');\n\n      // show dropdown\n      this._dropdown\n        .attach(BsDropdownContainerComponent)\n        .to(this.container)\n        .position({ attachment: _placement })\n        .show({\n          content: dropdownMenu.templateRef,\n          placement: _placement,\n        });\n\n      this._state.isOpenChange.emit(true);\n    });\n  }\n\n  /**\n   * Closes an element’s popover. This is considered a “manual” triggering of\n   * the popover.\n   */\n  hide(): void {\n    if (!this.isOpen) {\n      return;\n    }\n\n    if (this.dropup !== this._dropup) {\n      this.dropup = this._dropup;\n    }\n\n    const container = this._elementRef.nativeElement.querySelector('.dropdown-menu');\n\n    container.classList.remove('fadeInDropdown');\n    if (\n      container.parentNode.classList.contains('dropdown') ||\n      container.parentNode.classList.contains('dropup-material')\n    ) {\n      setTimeout(() => {\n        if (this._showInline) {\n          this._isInlineOpen = false;\n          this.onHidden.emit(true);\n          this.hidden.emit(true);\n          this.cdRef.markForCheck();\n        } else {\n          this._dropdown.hide();\n        }\n\n        this._state.isOpenChange.emit(false);\n      }, 560);\n    } else {\n      setTimeout(() => {\n        if (this._showInline) {\n          this._isInlineOpen = false;\n          this.onHidden.emit(true);\n          this.hidden.emit(true);\n          this.cdRef.markForCheck();\n        } else {\n          this._dropdown.hide();\n        }\n\n        this._state.isOpenChange.emit(false);\n      }, 0);\n    }\n  }\n\n  /**\n   * Toggles an element’s popover. This is considered a “manual” triggering of\n   * the popover.\n   */\n  toggle(value?: boolean): void {\n    if (this.isOpen || value === false) {\n      return this.hide();\n    }\n\n    return this.show();\n  }\n\n  ngOnDestroy(): void {\n    // clean up subscriptions and destroy dropdown\n    this._destroy$.next();\n    this._destroy$.complete();\n    this._dropdown.dispose();\n  }\n}\n"]}