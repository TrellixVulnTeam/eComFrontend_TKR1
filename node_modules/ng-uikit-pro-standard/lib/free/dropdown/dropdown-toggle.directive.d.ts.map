{"version":3,"file":"dropdown-toggle.directive.d.ts","sources":["../../../../../projects/ng-uikit-pro-standard/src/lib/free/dropdown/dropdown-toggle.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EAEL,UAAU,EAGV,SAAS,EACT,SAAS,EACT,iBAAiB,EAClB,MAAM,eAAe,CAAC;AAGvB,OAAO,EAAE,eAAe,EAAE,MAAM,kBAAkB,CAAC;;AAEnD,qBAIa,yBAA0B,YAAW,SAAS;AAC3D,IAiBI,OAAO,CAAC,MAAM;AAAE,IAChB,OAAO,CAAC,QAAQ;AAAE,IAClB,OAAO,CAAC,SAAS;AAAE,IACnB,OAAO,CAAC,MAAM;AAAE,IApBlB,OAAO,CAAC,cAAc,CAAsB;AAC9C,IAAE,OAAO,CAAC,sBAAsB,CAAW;AAC3C,IAAE,OAAO,CAAC,iBAAiB,CAAW;AACtC,IACqC,YAAY,UAAQ;AACzD,IAAgC,UAAU,EAAE,OAAO,GAAG,GAAG,CAAQ;AACjE,IAAqC,MAAM,EAAE,OAAO,CAAC;AACrD,IAEE,OAAO,IAAI,IAAI;AAAE,gBAQP,MAAM,EAAE,eAAe,EACvB,QAAQ,EAAE,UAAU,EACpB,SAAS,EAAE,SAAS,EACpB,MAAM,EAAE,iBAAiB;AACnC,IAwCA,WAAW,IAAI,IAAI;;;AAAE,CAatB;AACD","sourcesContent":["import {\n  Directive,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnDestroy,\n  Renderer2,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { BsDropdownState } from './dropdown.state';\n\n@Directive({\n  selector: '[mdbDropdownToggle],[dropdownToggle]',\n  exportAs: 'bs-dropdown-toggle',\n})\nexport class BsDropdownToggleDirective implements OnDestroy {\n  private _subscriptions: Subscription[] = [];\n  private _documentClickListener: Function;\n  private _escKeyUpListener: Function;\n\n  @HostBinding('attr.aria-haspopup') ariaHaspopup = true;\n  @HostBinding('attr.disabled') isDisabled: boolean | any = null;\n  @HostBinding('attr.aria-expanded') isOpen: boolean;\n\n  @HostListener('click')\n  onClick(): void {\n    if (this.isDisabled) {\n      return;\n    }\n    this._state.toggleClick.emit();\n  }\n\n  constructor(\n    private _state: BsDropdownState,\n    private _element: ElementRef,\n    private _renderer: Renderer2,\n    private _cdRef: ChangeDetectorRef\n  ) {\n    // sync is open value with state\n    this._state.isOpenChange.subscribe((value: boolean) => {\n      this.isOpen = value;\n\n      if (value) {\n        this._documentClickListener = this._renderer.listen('document', 'click', (event: any) => {\n          if (\n            this._state.autoClose &&\n            event.button !== 2 &&\n            !this._element.nativeElement.contains(event.target)\n          ) {\n            this._state.toggleClick.emit(false);\n            this._cdRef.detectChanges();\n          }\n        });\n\n        this._escKeyUpListener = this._renderer.listen(\n          this._element.nativeElement,\n          'keyup.esc',\n          () => {\n            if (this._state.autoClose) {\n              this._state.toggleClick.emit(false);\n              this._cdRef.detectChanges();\n            }\n          }\n        );\n      } else {\n        this._documentClickListener();\n        this._escKeyUpListener();\n      }\n    });\n    // populate disabled state\n    this._subscriptions.push(\n      this._state.isDisabledChange.subscribe(\n        (value: boolean | any) => (this.isDisabled = value || null)\n      )\n    );\n  }\n\n  ngOnDestroy(): void {\n    if (this._documentClickListener) {\n      this._documentClickListener();\n    }\n\n    if (this._escKeyUpListener) {\n      this._escKeyUpListener();\n    }\n\n    for (const sub of this._subscriptions) {\n      sub.unsubscribe();\n    }\n  }\n}\n"]}