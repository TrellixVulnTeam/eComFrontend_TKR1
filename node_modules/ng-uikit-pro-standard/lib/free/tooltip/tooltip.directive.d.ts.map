{"version":3,"file":"tooltip.directive.d.ts","sources":["../../../../../projects/ng-uikit-pro-standard/src/lib/free/tooltip/tooltip.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EAEL,UAAU,EACV,YAAY,EAGZ,SAAS,EACT,SAAS,EACT,MAAM,EAGN,SAAS,EACT,aAAa,EACb,WAAW,EACX,gBAAgB,EACjB,MAAM,eAAe,CAAC;AAEvB,OAAO,EAAE,aAAa,EAAE,MAAM,mBAAmB,CAAC;AAClD,OAAO,EAAE,sBAAsB,EAAE,MAAM,oDAAoD,CAAC;AAI5F,OAAO,EAAE,kBAAkB,EAAE,MAAM,0CAA0C,CAAC;;AAI9E,qBAIa,gBAAiB,YAAW,MAAM,EAAE,SAAS,EAAE,SAAS;AACrE,IA0EI,OAAO,CAAC,WAAW;AAAE,IACrB,OAAO,CAAC,gBAAgB;AAAE,IAIL,OAAO,CAAC,UAAU;AAAE,IA/E3C;AACF;AACE,OAAG;AACL,IAES,UAAU,EAAE,MAAM,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;AAC/C,IAAE,yCAAyC;AAC3C,IAAmB,aAAa,EAAE,YAAY,CAAC,MAAM,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,CAAsB;AAC/F,IACE;AACF;AACE,OAAG;AACL,IAAkB,SAAS,EAAE,MAAM,CAAC;AACpC,IAAE;AACF;AACE;AACE,OAAC;AACL,IAAkB,QAAQ,EAAE,MAAM,CAAC;AACnC,IAAE;AACF;AACE;AACE,OAAC;AACL,IAAkB,SAAS,EAAE,MAAM,CAAC;AACpC,IACE;AACF;AACE,OAAG;AACL,IAAE,IACW,MAAM,IAAI,OAAO,CAE3B;AACH,IACE,IAAW,MAAM,CAAC,KAAK,EAAE,OAAO,EAM/B;AACH,IACE;AACF;AACE,OAAG;AACL,IAAkB,eAAe,EAAE,OAAO,CAAC;AAC3C,IACW,eAAe,UAAQ;AAClC,IACE;AACF;AACE,OAAG;AACL,IACmB,OAAO,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC;AAC9C,IAAmB,KAAK,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC;AAC5C,IAAE;AACF;AACE,OAAG;AACL,IACmB,QAAQ,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC;AAC/C,IAAmB,MAAM,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC;AAC7C,IACkB,KAAK,SAAK;AAC5B,IAAkB,YAAY,EAAE,MAAM,CAAC;AACvC,IAAkB,YAAY,SAAO;AACrC,IACE,OAAO,CAAC,SAAS,CAAgC;AACnD,IACE,SAAS,CAAC,eAAe,EAAE,GAAG,CAAC;AACjC,IACE,OAAO,CAAC,QAAQ,CAA6C;AAC/D,IACE,SAAS,EAAE,GAAG,CAAS;AACzB,gBAEI,SAAS,EAAE,SAAS,EACZ,WAAW,EAAE,UAAU,EACvB,gBAAgB,EAAE,kBAAkB,EAC5C,iBAAiB,EAAE,gBAAgB,EACnC,GAAG,EAAE,sBAAsB,EAC3B,MAAM,EAAE,aAAa,EACQ,UAAU,EAAE,MAAM;AACjD,IAaO,QAAQ,IAAI,IAAI;AAAE,IAazB,WAAW,CAAC,OAAO,EAAE,aAAa;AAC/B,IAKH;AACF;AACE;AACE,OAAC;AACL,IAAS,MAAM,IAAI,IAAI;AAAE,IAQvB;AACF;AACE;AACE,OAAC;AACL,IAAS,IAAI,IAAI,IAAI;AAAE,IA8BrB,OAAO,CAAC,WAAW;AAAE,IAUrB;AACF;AACE;AACE,OAAC;AACL,IAAS,IAAI,IAAI,IAAI;AAAE,IAgBd,OAAO;AACX,IAGI,WAAW,IAAI,IAAI;;;AAAE,CAK7B;AACD","sourcesContent":["import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  PLATFORM_ID,\n  Renderer2,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { TooltipContainerComponent } from './tooltip.component';\nimport { TooltipConfig } from './tooltip.service';\nimport { ComponentLoaderFactory } from '../utils/component-loader/component-loader.factory';\nimport { ComponentLoader } from '../utils/component-loader/component-loader.class';\nimport { OnChange } from '../utils/decorators';\nimport { isPlatformBrowser } from '@angular/common';\nimport { PositioningService } from '../utils/positioning/positioning.service';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Directive({\n  selector: '[mdbTooltip]',\n  exportAs: 'mdb-tooltip',\n})\nexport class TooltipDirective implements OnInit, OnDestroy, OnChanges {\n  /**\n   * Content to be displayed as tooltip.\n   */\n  @OnChange()\n  @Input()\n  public mdbTooltip: string | TemplateRef<any>;\n  /** Fired when tooltip content changes */\n  @Output() public tooltipChange: EventEmitter<string | TemplateRef<any>> = new EventEmitter();\n\n  /**\n   * Placement of a tooltip. Accepts: \"top\", \"bottom\", \"left\", \"right\"\n   */\n  @Input() public placement: string;\n  /**\n   * Specifies events that should trigger. Supports a space separated list of\n   * event names.\n   */\n  @Input() public triggers: string;\n  /**\n   * A selector specifying the element the tooltip should be appended to.\n   * Currently only supports \"body\".\n   */\n  @Input() public container: string;\n\n  /**\n   * Returns whether or not the tooltip is currently being shown\n   */\n  @Input()\n  public get isOpen(): boolean {\n    return this._tooltip.isShown;\n  }\n\n  public set isOpen(value: boolean) {\n    if (value) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n\n  /**\n   * Allows to disable tooltip\n   */\n  @Input() public tooltipDisabled: boolean;\n\n  @Input() dynamicPosition = true;\n\n  /**\n   * Emits an event when the tooltip is shown\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() public onShown: EventEmitter<any>;\n  @Output() public shown: EventEmitter<any>;\n  /**\n   * Emits an event when the tooltip is hidden\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() public onHidden: EventEmitter<any>;\n  @Output() public hidden: EventEmitter<any>;\n\n  @Input() public delay = 0;\n  @Input() public customHeight: string;\n  @Input() public fadeDuration = 150;\n\n  private _destroy$: Subject<void> = new Subject();\n\n  protected _delayTimeoutId: any;\n\n  private _tooltip: ComponentLoader<TooltipContainerComponent>;\n\n  isBrowser: any = false;\n\n  public constructor(\n    _renderer: Renderer2,\n    private _elementRef: ElementRef,\n    private _positionService: PositioningService,\n    _viewContainerRef: ViewContainerRef,\n    cis: ComponentLoaderFactory,\n    config: TooltipConfig,\n    @Inject(PLATFORM_ID) private platformId: string\n  ) {\n    this.isBrowser = isPlatformBrowser(this.platformId);\n    this._tooltip = cis\n      .createLoader<TooltipContainerComponent>(this._elementRef, _viewContainerRef, _renderer)\n      .provide({ provide: TooltipConfig, useValue: config });\n\n    Object.assign(this, config);\n    this.onShown = this._tooltip.onShown;\n    this.shown = this._tooltip.onShown;\n    this.onHidden = this._tooltip.onHidden;\n    this.hidden = this._tooltip.onHidden;\n  }\n\n  public ngOnInit(): void {\n    this._tooltip.listen({\n      triggers: this.triggers,\n      show: () => this.show(),\n    });\n\n    this.tooltipChange.pipe(takeUntil(this._destroy$)).subscribe((value: any) => {\n      if (!value) {\n        this._tooltip.hide();\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['mdbTooltip'] && !changes['mdbTooltip'].isFirstChange()) {\n      this.tooltipChange.emit(this.mdbTooltip);\n    }\n  }\n\n  /**\n   * Toggles an element’s tooltip. This is considered a “manual” triggering of\n   * the tooltip.\n   */\n  public toggle(): void {\n    if (this.isOpen) {\n      return this.hide();\n    }\n\n    this.show();\n  }\n\n  /**\n   * Opens an element’s tooltip. This is considered a “manual” triggering of\n   * the tooltip.\n   */\n  public show(): void {\n    if (this.isOpen || this.tooltipDisabled || this._delayTimeoutId || !this.mdbTooltip) {\n      return;\n    }\n\n    this._positionService.setOptions({\n      modifiers: {\n        flip: {\n          enabled: this.dynamicPosition,\n        },\n        preventOverflow: {\n          enabled: this.dynamicPosition,\n        },\n      },\n    });\n\n    const showTooltip = () => {\n      this._tooltip\n        .attach(TooltipContainerComponent)\n        .to(this.container)\n        .position({ attachment: this.placement })\n        .show({\n          content: this.mdbTooltip,\n          placement: this.placement,\n        });\n    };\n\n    this.showTooltip(showTooltip);\n  }\n\n  private showTooltip(fn: Function) {\n    if (this.delay) {\n      this._delayTimeoutId = setTimeout(() => {\n        fn();\n      }, this.delay);\n    } else {\n      fn();\n    }\n  }\n\n  /**\n   * Closes an element’s tooltip. This is considered a “manual” triggering of\n   * the tooltip.\n   */\n  public hide(): void {\n    if (this._delayTimeoutId) {\n      clearTimeout(this._delayTimeoutId);\n      this._delayTimeoutId = undefined;\n    }\n\n    if (!this._tooltip.isShown) {\n      return;\n    }\n\n    this._tooltip.instance.classMap.in = false;\n    setTimeout(() => {\n      this._tooltip.hide();\n    }, this.fadeDuration);\n  }\n\n  public dispose() {\n    this._tooltip.dispose();\n  }\n\n  public ngOnDestroy(): void {\n    this._tooltip.dispose();\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n}\n"]}