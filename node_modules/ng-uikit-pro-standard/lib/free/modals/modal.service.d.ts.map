{"version":3,"file":"modal.service.d.ts","sources":["../../../../../projects/ng-uikit-pro-standard/src/lib/free/modals/modal.service.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,YAAY,EAEZ,WAAW,EACX,YAAY,EAEZ,gBAAgB,EAGjB,MAAM,eAAe,CAAC;AAGvB,OAAO,EAAE,sBAAsB,EAAE,MAAM,oDAAoD,CAAC;AAC5F,OAAO,EAAE,sBAAsB,EAAE,MAAM,2BAA2B,CAAC;AAEnE,OAAO,EACL,WAAW,EAGX,YAAY,EAEb,MAAM,iBAAiB,CAAC;;AAEzB,qBACa,eAAe;AAC5B,IAqBwD,OAAO,CAAC,GAAG;AAAE,IArB5D,MAAM,EAAE,YAAY,CAAuB;AACpD,IAAE,OAAO,CAAC,QAAQ,CAAY;AAC9B,IAAE,OAAO,CAAC,GAAG,CAAmB;AAChC,IAAE,OAAO,CAAC,EAAE,CAAa;AACzB,IACS,IAAI,EAAE,YAAY,CAAC,GAAG,CAAC,CAAsB;AACtD,IAAS,MAAM,EAAE,YAAY,CAAC,GAAG,CAAC,CAAsB;AACxD,IAAS,KAAK,EAAE,YAAY,CAAC,GAAG,CAAC,CAAsB;AACvD,IAAS,MAAM,EAAE,YAAY,CAAC,GAAG,CAAC,CAAsB;AACxD,IACE,SAAS,CAAC,iBAAiB,UAAS;AACtC,IAAE,SAAS,CAAC,mBAAmB,SAAK;AACpC,IACE,SAAS,CAAC,cAAc,SAAK;AAC/B,IACE,SAAS,CAAC,WAAW,EAAE,YAAY,CAAC,sBAAsB,CAAC,GAAG,GAAG,CAAC;AACpE,IAAE,OAAO,CAAC,eAAe,CAA0C;AACnE,IAAE,OAAO,CAAC,WAAW,CAAK;AAC1B,IAAE,OAAO,CAAC,iBAAiB,CAAW;AACtC,IACE,OAAO,CAAC,OAAO,CAAkD;AACnE,gBAAqB,eAAe,EAAE,gBAAgB,EAAU,GAAG,EAAE,sBAAsB;AAAG,IAS5F,oBAAoB;AACtB,IAAE,IAAI,CAAC,OAAO,EAAE,MAAM,GAAG,WAAW,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,MAAM,CAAC,EAAE,GAAG,GAAG,WAAW;AAAE,IAS3E,IAAI,CAAC,KAAK,EAAE,MAAM;AACf,IAcH,aAAa,IAAI,IAAI;AAAE,IAiBvB,aAAa,IAAI,IAAI;AAAE,IASvB,UAAU,CAAC,OAAO,EAAE,GAAG,GAAG,WAAW;AAAE,IAuBvC,UAAU,CAAC,KAAK,EAAE,MAAM,GAAG,IAAI;AAAE,IAOjC,cAAc,IAAI,MAAM;AAAE,IAI1B,gBAAgB,CAAC,MAAM,EAAE,MAAM;AAC5B,IAGH,SAAS,CAAC,cAAc,IAAI,IAAI;AAAE,IAKlC,4DAA4D;AAC9D,IAAE,wBAAwB;AAC1B,IAAE,gBAAgB;AAClB,IAAS,cAAc,IAAI,IAAI;AAAE,IAKxB,YAAY,IAAI,IAAI;AAAE,IAW7B,OAAO,CAAC,cAAc;AAAE,IAKxB,OAAO,CAAC,iBAAiB;AAAE,IAU3B,OAAO,CAAC,cAAc;AAAE,IASxB,OAAO,CAAC,aAAa;AAAE,IAOvB,OAAO,CAAC,SAAS;;;AAAE,CAKpB;AACD","sourcesContent":["import {\n  ComponentRef,\n  Injectable,\n  TemplateRef,\n  EventEmitter,\n  Renderer2,\n  RendererFactory2,\n  ViewContainerRef,\n  ElementRef,\n} from '@angular/core';\n\nimport { ComponentLoader } from '../utils/component-loader/component-loader.class';\nimport { ComponentLoaderFactory } from '../utils/component-loader/component-loader.factory';\nimport { ModalBackdropComponent } from './modalBackdrop.component';\nimport { ModalContainerComponent } from './modalContainer.component';\nimport {\n  MDBModalRef,\n  ClassName,\n  modalConfigDefaults,\n  ModalOptions,\n  TransitionDurations,\n} from './modal.options';\n\n@Injectable()\nexport class MDBModalService {\n  public config: ModalOptions = modalConfigDefaults;\n  private renderer: Renderer2;\n  private vcr: ViewContainerRef;\n  private el: ElementRef;\n\n  public open: EventEmitter<any> = new EventEmitter();\n  public opened: EventEmitter<any> = new EventEmitter();\n  public close: EventEmitter<any> = new EventEmitter();\n  public closed: EventEmitter<any> = new EventEmitter();\n\n  protected isBodyOverflowing = false;\n  protected originalBodyPadding = 0;\n\n  protected scrollbarWidth = 0;\n\n  protected backdropRef: ComponentRef<ModalBackdropComponent> | any;\n  private _backdropLoader: ComponentLoader<ModalBackdropComponent>;\n  private modalsCount = 0;\n  private lastDismissReason: any = '';\n\n  private loaders: ComponentLoader<ModalContainerComponent>[] = [];\n  public constructor(rendererFactory: RendererFactory2, private clf: ComponentLoaderFactory) {\n    this._backdropLoader = this.clf.createLoader<ModalBackdropComponent>(\n      this.el,\n      this.vcr,\n      this.renderer\n    );\n    this.renderer = rendererFactory.createRenderer(null, null);\n  }\n\n  /** Shows a modal */\n  show(content: string | TemplateRef<any> | any, config?: any): MDBModalRef {\n    this.modalsCount++;\n    this._createLoaders();\n    this.config = Object.assign({}, modalConfigDefaults, config);\n    this._showBackdrop();\n    this.lastDismissReason = null;\n    return this._showModal(content);\n  }\n\n  hide(level: number) {\n    if (this.modalsCount === 1) {\n      this._hideBackdrop();\n      this.resetScrollbar();\n    }\n    this.modalsCount = this.modalsCount >= 1 ? this.modalsCount - 1 : 0;\n    setTimeout(\n      () => {\n        this._hideModal(level);\n        this.removeLoaders(level);\n      },\n      this.config.animated ? TransitionDurations.BACKDROP : 0\n    );\n  }\n\n  _showBackdrop(): void {\n    const isBackdropEnabled = this.config.backdrop || this.config.backdrop === 'static';\n    const isBackdropInDOM = !this.backdropRef || !this.backdropRef.instance.isShown;\n\n    if (this.modalsCount === 1) {\n      this.removeBackdrop();\n\n      if (isBackdropEnabled && isBackdropInDOM) {\n        this._backdropLoader\n          .attach(ModalBackdropComponent)\n          .to('body')\n          .show({ isAnimated: this.config.animated });\n        this.backdropRef = this._backdropLoader._componentRef;\n      }\n    }\n  }\n\n  _hideBackdrop(): void {\n    if (!this.backdropRef) {\n      return;\n    }\n    this.backdropRef.instance.isShown = false;\n    const duration = this.config.animated ? TransitionDurations.BACKDROP : 0;\n    setTimeout(() => this.removeBackdrop(), duration);\n  }\n\n  _showModal(content: any): MDBModalRef {\n    const modalLoader = this.loaders[this.loaders.length - 1];\n    const mdbModalRef = new MDBModalRef();\n    const modalContainerRef = modalLoader\n      .provide({ provide: ModalOptions, useValue: this.config })\n      .provide({ provide: MDBModalRef, useValue: mdbModalRef })\n      .attach(ModalContainerComponent)\n      .to('body')\n      .show({\n        content,\n        isAnimated: this.config.animated,\n        data: this.config.data,\n        mdbModalService: this,\n      });\n    modalContainerRef.instance.focusModalElement();\n    modalContainerRef.instance.level = this.getModalsCount();\n    mdbModalRef.hide = () => {\n      modalContainerRef.instance.hide();\n    };\n    mdbModalRef.content = modalLoader.getInnerComponent() || null;\n    return mdbModalRef;\n  }\n\n  _hideModal(level: number): void {\n    const modalLoader = this.loaders[level - 1];\n    if (modalLoader) {\n      modalLoader.hide();\n    }\n  }\n\n  getModalsCount(): number {\n    return this.modalsCount;\n  }\n\n  setDismissReason(reason: string) {\n    this.lastDismissReason = reason;\n  }\n\n  protected removeBackdrop(): void {\n    this._backdropLoader.hide();\n    this.backdropRef = null;\n  }\n\n  /** AFTER PR MERGE MODAL.COMPONENT WILL BE USING THIS CODE*/\n  /** Scroll bar tricks */\n  /** @internal */\n  public checkScrollbar(): void {\n    this.isBodyOverflowing = document.body.clientWidth < window.innerWidth;\n    this.scrollbarWidth = this.getScrollbarWidth();\n  }\n\n  public setScrollbar(): void {\n    if (!document) {\n      return;\n    }\n\n    this.originalBodyPadding = parseInt(\n      window.getComputedStyle(document.body).getPropertyValue('padding-right') || '0',\n      10\n    );\n  }\n\n  private resetScrollbar(): void {\n    document.body.style.paddingRight = this.originalBodyPadding + 'px';\n  }\n\n  // thx d.walsh\n  private getScrollbarWidth(): number {\n    const scrollDiv = this.renderer.createElement('div');\n    this.renderer.addClass(scrollDiv, ClassName.SCROLLBAR_MEASURER);\n    this.renderer.appendChild(document.body, scrollDiv);\n    const scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n    this.renderer.removeChild(document.body, scrollDiv);\n\n    return scrollbarWidth;\n  }\n\n  private _createLoaders(): void {\n    const loader = this.clf.createLoader<ModalContainerComponent>(this.el, this.vcr, this.renderer);\n    this.copyEvent(loader.onBeforeShow, this.open);\n    this.copyEvent(loader.onShown, this.opened);\n    this.copyEvent(loader.onBeforeHide, this.close);\n    this.copyEvent(loader.onHidden, this.closed);\n    this.loaders.push(loader);\n  }\n\n  private removeLoaders(level: number): void {\n    this.loaders.splice(level - 1, 1);\n    this.loaders.forEach((loader: ComponentLoader<ModalContainerComponent>, i: number) => {\n      loader.instance.level = i + 1;\n    });\n  }\n\n  private copyEvent(from: EventEmitter<any>, to: EventEmitter<any>) {\n    from.subscribe(() => {\n      to.emit(this.lastDismissReason);\n    });\n  }\n}\n"]}