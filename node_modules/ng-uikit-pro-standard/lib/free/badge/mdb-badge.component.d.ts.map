{"version":3,"file":"mdb-badge.component.d.ts","sources":["../../../../../projects/ng-uikit-pro-standard/src/lib/free/badge/mdb-badge.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAEL,UAAU,EAGV,MAAM,EACN,SAAS,EAGV,MAAM,eAAe,CAAC;;AAEvB,qBAOa,iBAAkB,YAAW,MAAM;AAChD,IAcc,OAAO,CAAC,GAAG;AAAE,IAAY,OAAO,CAAC,SAAS;AAAE,IAdX,OAAO,EAAE,OAAO,CAAC;AAChE,IAA+C,OAAO,EAAE,OAAO,CAAC;AAChE,IAAiD,SAAS,EAAE,OAAO,CAAC;AACpE,IAA+C,OAAO,EAAE,OAAO,CAAC;AAChE,IAA4C,IAAI,EAAE,OAAO,CAAC;AAC1D,IAA+C,OAAO,EAAE,OAAO,CAAC;AAChE,IAA8C,MAAM,EAAE,OAAO,CAAC;AAC9D,IAA4C,IAAI,EAAE,OAAO,CAAC;AAC1D,IACW,WAAW,EAAE,MAAM,CAAC;AAC/B,IACW,KAAK,EAAE,MAAM,CAAC;AACzB,IAAW,KAAK,EAAE,MAAM,CAAC;AACzB,gBACsB,GAAG,EAAE,UAAU,EAAU,SAAS,EAAE,SAAS;AAAG,IAEpE,QAAQ;;;AACL,CASJ;AACD","sourcesContent":["import {\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnInit,\n  Renderer2,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\n\n@Component({\n  selector: 'mdb-badge',\n  templateUrl: './mdb-badge.component.html',\n  styleUrls: ['./badge-module.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MDBBadgeComponent implements OnInit {\n  @Input() @HostBinding('class.badge-default') default: boolean;\n  @Input() @HostBinding('class.badge-primary') primary: boolean;\n  @Input() @HostBinding('class.badge-secondary') secondary: boolean;\n  @Input() @HostBinding('class.badge-success') success: boolean;\n  @Input() @HostBinding('class.badge-info') info: boolean;\n  @Input() @HostBinding('class.badge-warning') warning: boolean;\n  @Input() @HostBinding('class.badge-danger') danger: boolean;\n  @Input() @HostBinding('class.badge-pill') pill: boolean;\n\n  @Input() classInside: string;\n\n  @Input() color: string;\n  @Input() class: string;\n\n  constructor(private _el: ElementRef, private _renderer: Renderer2) {}\n\n  ngOnInit() {\n    this._renderer.addClass(this._el.nativeElement, 'badge');\n    if (this.color) {\n      const customClassArr = this.color.split(' ');\n\n      customClassArr.forEach((el: string) => {\n        this._renderer.addClass(this._el.nativeElement, el);\n      });\n    }\n  }\n}\n"]}