{"version":3,"file":"collapse.component.d.ts","sources":["../../../../../projects/ng-uikit-pro-standard/src/lib/free/collapse/collapse.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAEL,MAAM,EAIN,YAAY,EAGZ,SAAS,EAET,iBAAiB,EAClB,MAAM,eAAe,CAAC;AAEvB,OAAO,EAAE,2BAA2B,EAAE,MAAM,oCAAoC,CAAC;;AAEjF,qBAca,iBAAkB,YAAW,MAAM;AAChD,IAUc,OAAO,CAAC,MAAM;AAAE,IAVkB,QAAQ,EAAE,SAAS,CAAC,2BAA2B,CAAC,CAAC;AACjG,IAAW,WAAW,UAAQ;AAC9B,IACY,cAAc,EAAE,YAAY,CAAC,GAAG,CAAC,CAAsB;AACnE,IAAY,eAAe,EAAE,YAAY,CAAC,GAAG,CAAC,CAAsB;AACpE,IAAY,cAAc,EAAE,YAAY,CAAC,GAAG,CAAC,CAAsB;AACnE,IAAY,gBAAgB,EAAE,YAAY,CAAC,GAAG,CAAC,CAAsB;AACrE,IAAY,SAAS,EAAE,YAAY,CAAC,GAAG,CAAC,CAAsB;AAC9D,IAAY,QAAQ,EAAE,YAAY,CAAC,GAAG,CAAC,CAAsB;AAC7D,gBACsB,MAAM,EAAE,iBAAiB;AAAG,IAEpB,oBAAoB,EAAE,MAAM,CAAC;AAC3D,IAAiC,QAAQ,SAAY;AACrD,IAEE,gBAAgB,CAAC,KAAK,EAAE,GAAG;AACxB,IAaH,YAAY;AACT,IAGH,MAAM;AACH,IAGH,IAAI;AACD,IAOH,IAAI;AACD,IAQH,uBAAuB;AACpB,IAGH,QAAQ;;;AACL,CAEJ;AACD","sourcesContent":["import {\n  Component,\n  OnInit,\n  HostBinding,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ContentChildren,\n  QueryList,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { state, style, trigger, transition, animate } from '@angular/animations';\nimport { FixedButtonCaptionDirective } from '../buttons/fixed-caption.directive';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: '[mdbCollapse]',\n  exportAs: 'bs-collapse',\n  template: '<ng-content></ng-content>',\n  animations: [\n    trigger('expandBody', [\n      state('collapsed', style({ height: '0px' })),\n      state('expanded', style({ height: '*' })),\n      transition('expanded <=> collapsed', animate('500ms ease')),\n    ]),\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CollapseComponent implements OnInit {\n  @ContentChildren(FixedButtonCaptionDirective) captions: QueryList<FixedButtonCaptionDirective>;\n  @Input() isCollapsed = true;\n\n  @Output() showBsCollapse: EventEmitter<any> = new EventEmitter();\n  @Output() shownBsCollapse: EventEmitter<any> = new EventEmitter();\n  @Output() hideBsCollapse: EventEmitter<any> = new EventEmitter();\n  @Output() hiddenBsCollapse: EventEmitter<any> = new EventEmitter();\n  @Output() collapsed: EventEmitter<any> = new EventEmitter();\n  @Output() expanded: EventEmitter<any> = new EventEmitter();\n\n  constructor(private _cdRef: ChangeDetectorRef) {}\n\n  @HostBinding('@expandBody') expandAnimationState: string;\n  @HostBinding('style.overflow') overflow = 'hidden';\n\n  @HostListener('@expandBody.done', ['$event'])\n  onExpandBodyDone(event: any) {\n    setTimeout(() => {\n      if (event.toState === 'expanded') {\n        this.shownBsCollapse.emit(this);\n        this.expanded.emit(this);\n        this.overflow = 'visible';\n        this.showCaptions();\n      } else {\n        this.hiddenBsCollapse.emit(this);\n        this.collapsed.emit(this);\n      }\n    }, 0);\n  }\n\n  showCaptions() {\n    this.captions.forEach((caption: FixedButtonCaptionDirective) => caption.showCaption());\n  }\n\n  toggle() {\n    this.isCollapsed ? this.show() : this.hide();\n  }\n\n  show() {\n    this.expandAnimationState = 'expanded';\n    this.isCollapsed = false;\n\n    this.showBsCollapse.emit(this);\n    this._cdRef.markForCheck();\n  }\n\n  hide() {\n    this.overflow = 'hidden';\n    this.expandAnimationState = 'collapsed';\n    this.isCollapsed = true;\n\n    this.hideBsCollapse.emit(this);\n    this._cdRef.markForCheck();\n  }\n\n  initializeCollapseState() {\n    this.isCollapsed ? this.hide() : this.show();\n  }\n\n  ngOnInit() {\n    this.initializeCollapseState();\n  }\n}\n"]}