{"version":3,"file":"mdb-table.service.d.ts","sources":["../../../../../../projects/ng-uikit-pro-standard/src/lib/free/tables/services/mdb-table.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAW,MAAM,MAAM,CAAC;;AAG3C,qBAGa,eAAe;AAC5B,IAAE,OAAO,CAAC,WAAW,CAAW;AAChC,IAAE,OAAO,CAAC,kBAAkB,CAAoC;AAChE;AACA,IACE,MAAM,CAAC,MAAM,EAAE,GAAG;AACf,IAGH,WAAW,CAAC,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG;AAChC,IAGH,SAAS,CAAC,KAAK,EAAE,MAAM;AACpB,IAGH,UAAU,IAAI,UAAU,CAAC,OAAO,CAAC;AAAE,IAOnC,aAAa;AACV,IAGH,aAAa;AACX,IAGF,aAAa,CAAC,IAAI,EAAE,GAAG;AACpB,IAIH,gBAAgB,IAAI,UAAU,CAAC,GAAG,CAAC;AAAE,IAIrC,iBAAiB,CAAC,SAAS,EAAE,GAAG;AAC9B,IAYF,iBAAiB,CAAC,SAAS,EAAE,GAAG;AAC9B,IASF,oBAAoB,CAAC,SAAS,EAAE,GAAG,GAAG,UAAU,CAAC,GAAG,CAAC;;AAAE,CAMxD;AACD","sourcesContent":["import { Observable, Subject } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MdbTableService {\n  private _dataSource: any = [];\n  private _dataSourceChanged: Subject<any> = new Subject<any>();\n  constructor() {}\n\n  addRow(newRow: any) {\n    this.getDataSource().push(newRow);\n  }\n\n  addRowAfter(index: number, row: any) {\n    this.getDataSource().splice(index, 0, row);\n  }\n\n  removeRow(index: number) {\n    this.getDataSource().splice(index, 1);\n  }\n\n  rowRemoved(): Observable<boolean> {\n    const rowRemoved = new Observable<boolean>((observer: any) => {\n      observer.next(true);\n    });\n    return rowRemoved;\n  }\n\n  removeLastRow() {\n    this.getDataSource().pop();\n  }\n\n  getDataSource() {\n    return this._dataSource;\n  }\n\n  setDataSource(data: any) {\n    this._dataSource = data;\n    this._dataSourceChanged.next(this.getDataSource());\n  }\n\n  dataSourceChange(): Observable<any> {\n    return this._dataSourceChanged;\n  }\n\n  filterLocalDataBy(searchKey: any) {\n    return this.getDataSource().filter((obj: Array<any>) => {\n      return Object.keys(obj).some((key: any) => {\n        if (obj[key]) {\n          return obj[key]\n            .toString()\n            .toLowerCase()\n            .includes(searchKey);\n        }\n      });\n    });\n  }\n\n  searchLocalDataBy(searchKey: any) {\n    if (!searchKey) {\n      return this.getDataSource();\n    }\n\n    if (searchKey) {\n      return this.filterLocalDataBy(searchKey.toLowerCase());\n    }\n  }\n\n  searchDataObservable(searchKey: any): Observable<any> {\n    const observable = new Observable((observer: any) => {\n      observer.next(this.searchLocalDataBy(searchKey));\n    });\n    return observable;\n  }\n}\n"]}