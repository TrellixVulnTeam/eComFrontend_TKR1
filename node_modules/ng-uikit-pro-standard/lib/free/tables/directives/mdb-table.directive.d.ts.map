{"version":3,"file":"mdb-table.directive.d.ts","sources":["../../../../../../projects/ng-uikit-pro-standard/src/lib/free/tables/directives/mdb-table.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,aAAa,EAEb,UAAU,EAGV,MAAM,EACN,SAAS,EAEV,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,UAAU,EAAW,MAAM,MAAM,CAAC;;AAE3C,qBASa,iBAAkB,YAAW,MAAM,EAAE,aAAa;AAC/D,IAgCc,OAAO,CAAC,EAAE;AAAE,IAAY,OAAO,CAAC,QAAQ;AAAE,IA9BtD,OAAO,EAAE,OAAO,CAAC;AACnB,IAGE,QAAQ,EAAE,OAAO,CAAC;AACpB,IAGE,UAAU,EAAE,OAAO,CAAC;AACtB,IAGE,KAAK,EAAE,OAAO,CAAC;AACjB,IAGE,KAAK,EAAE,OAAO,CAAC;AACjB,IAGE,UAAU,EAAE,OAAO,CAAC;AACtB,IACW,YAAY,UAAS;AAChC,IAAW,mBAAmB,SAAa;AAC3C,IAAW,qBAAqB,SAAa;AAC7C,IACW,YAAY,UAAS;AAChC,IAAW,mBAAmB,SAAa;AAC3C,IAAW,qBAAqB,SAAa;AAC7C,gBACsB,EAAE,EAAE,UAAU,EAAU,QAAQ,EAAE,SAAS;AAAG,IAElE,OAAO,CAAC,WAAW,CAAW;AAChC,IAAE,OAAO,CAAC,kBAAkB,CAAoC;AAChE,IACE,MAAM,CAAC,MAAM,EAAE,GAAG;AACf,IAGH,WAAW,CAAC,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG;AAChC,IAGH,SAAS,CAAC,KAAK,EAAE,MAAM;AACpB,IAGH,UAAU,IAAI,UAAU,CAAC,OAAO,CAAC;AAAE,IAMnC,aAAa;AACV,IAGH,aAAa;AACX,IAGF,aAAa,CAAC,IAAI,EAAE,GAAG;AACpB,IAIH,gBAAgB,IAAI,UAAU,CAAC,GAAG,CAAC;AAAE,IAIrC,iBAAiB,CAAC,SAAS,EAAE,MAAM;AACjC,IAaF,uBAAuB,CAAC,SAAS,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE;AACvD,IAaF,+BAA+B,CAAC,SAAS,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,MAAM,EAAE;AAChE,IAiCF,iBAAiB,CAAC,SAAS,EAAE,MAAM;AACjC,IASF,uBAAuB,CAAC,SAAS,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE;AACvD,IAYF,+BAA+B,CAAC,SAAS,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,MAAM,EAAE;AAChE,IAQF,oBAAoB,CAAC,SAAS,EAAE,MAAM,GAAG,UAAU,CAAC,GAAG,CAAC;AAAE,IAM1D,QAAQ;AACL,IAGH,eAAe;AACZ,IAeH,OAAO,CAAC,UAAU;;;AAAE,CAYrB;AACD","sourcesContent":["import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnInit,\n  Renderer2,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: '[mdbTable]',\n  exportAs: 'mdbTable',\n  template: '<ng-content></ng-content>',\n  styleUrls: ['./../tables-module.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\n// tslint:disable-next-line:component-class-suffix\nexport class MdbTableDirective implements OnInit, AfterViewInit {\n  @Input()\n  @HostBinding('class.table-striped')\n  striped: boolean;\n\n  @Input()\n  @HostBinding('class.table-bordered')\n  bordered: boolean;\n\n  @Input()\n  @HostBinding('class.table-borderless')\n  borderless: boolean;\n\n  @Input()\n  @HostBinding('class.table-hover')\n  hover: boolean;\n\n  @Input()\n  @HostBinding('class.table-sm')\n  small: boolean;\n\n  @Input()\n  @HostBinding('class.table-responsive')\n  responsive: boolean;\n\n  @Input() stickyHeader = false;\n  @Input() stickyHeaderBgColor = '#f2f2f2';\n  @Input() stickyHeaderTextColor = '#000000';\n\n  @Input() stickyFooter = false;\n  @Input() stickyFooterBgColor = '#f2f2f2';\n  @Input() stickyFooterTextColor = '#000000';\n\n  constructor(private el: ElementRef, private renderer: Renderer2) {}\n\n  private _dataSource: any = [];\n  private _dataSourceChanged: Subject<any> = new Subject<any>();\n\n  addRow(newRow: any) {\n    this.getDataSource().push(newRow);\n  }\n\n  addRowAfter(index: number, row: any) {\n    this.getDataSource().splice(index, 0, row);\n  }\n\n  removeRow(index: number) {\n    this.getDataSource().splice(index, 1);\n  }\n\n  rowRemoved(): Observable<boolean> {\n    return new Observable<boolean>((observer: any) => {\n      observer.next(true);\n    });\n  }\n\n  removeLastRow() {\n    this.getDataSource().pop();\n  }\n\n  getDataSource() {\n    return this._dataSource;\n  }\n\n  setDataSource(data: any) {\n    this._dataSource = data;\n    this._dataSourceChanged.next(this.getDataSource());\n  }\n\n  dataSourceChange(): Observable<any> {\n    return this._dataSourceChanged;\n  }\n\n  filterLocalDataBy(searchKey: string) {\n    return this.getDataSource().filter((obj: Array<any>) => {\n      return Object.keys(obj).some((key: any) => {\n        if (obj[key]) {\n          // Fix(tableSearch): table search will now able to filter through nested data\n\n          return JSON.stringify(obj)\n            .toLowerCase()\n            .includes(searchKey) as any;\n        }\n      });\n    });\n  }\n\n  filterLocalDataByFields(searchKey: string, keys: string[]) {\n    return this.getDataSource().filter((obj: Array<any>) => {\n      return Object.keys(obj).some((key: any) => {\n        if (obj[key]) {\n          if (keys.includes(key)) {\n            if (obj[key].toLowerCase().includes(searchKey)) {\n              return obj[key];\n            }\n          }\n        }\n      });\n    });\n  }\n\n  filterLocalDataByMultipleFields(searchKey: string, keys?: string[]) {\n    const items = searchKey.split(' ').map((x: { toLowerCase: () => void }) => x.toLowerCase());\n    return this.getDataSource().filter((x: Array<any>) => {\n      for (const item of items) {\n        let flag = false;\n\n        if (keys !== undefined) {\n          for (const prop in x) {\n            if (x[prop] && x.hasOwnProperty(prop)) {\n              if (keys.includes(prop)) {\n                if (x[prop].toLowerCase().indexOf(item) !== -1) {\n                  flag = true;\n                  break;\n                }\n              }\n            }\n          }\n        }\n        if (keys === undefined) {\n          for (const prop in x) {\n            if (x.hasOwnProperty(prop) && x[prop].toLowerCase().indexOf(item) !== -1) {\n              flag = true;\n              break;\n            }\n          }\n        }\n        if (!flag) {\n          return false;\n        }\n      }\n      return true;\n    });\n  }\n\n  searchLocalDataBy(searchKey: string) {\n    if (!searchKey) {\n      return this.getDataSource();\n    }\n\n    if (searchKey) {\n      return this.filterLocalDataBy(searchKey.toLowerCase());\n    }\n  }\n\n  searchLocalDataByFields(searchKey: string, keys: string[]) {\n    if (!searchKey) {\n      return this.getDataSource();\n    }\n\n    if (searchKey && keys.length > 0) {\n      return this.filterLocalDataByFields(searchKey.toLowerCase(), keys);\n    }\n    if (!keys || keys.length === 0) {\n      return this.filterLocalDataBy(searchKey.toLowerCase());\n    }\n  }\n\n  searchLocalDataByMultipleFields(searchKey: string, keys?: string[]) {\n    if (!searchKey) {\n      return this.getDataSource();\n    }\n    if (searchKey && keys !== undefined) {\n      return this.filterLocalDataByMultipleFields(searchKey.toLowerCase(), keys);\n    }\n  }\n\n  searchDataObservable(searchKey: string): Observable<any> {\n    return new Observable((observer: any) => {\n      observer.next(this.searchLocalDataBy(searchKey));\n    });\n  }\n\n  ngOnInit() {\n    this.renderer.addClass(this.el.nativeElement, 'table');\n  }\n\n  ngAfterViewInit() {\n    // Fix(stickyHeader): resolved problem with not working stickyHeader=\"true\" on Chrome\n    if (this.stickyHeader) {\n      this.makeSticky('thead', 'sticky-top', this.stickyHeaderBgColor, this.stickyHeaderTextColor);\n    }\n\n    if (this.stickyFooter) {\n      this.makeSticky(\n        'tfoot',\n        'sticky-bottom',\n        this.stickyFooterBgColor,\n        this.stickyFooterTextColor\n      );\n    }\n  }\n\n  private makeSticky(query: string, elementClass: string, bgColor: string, color: string) {\n    const tableHead = this.el.nativeElement.querySelector(query);\n    Array.from(tableHead.firstElementChild.children).forEach((child: any) => {\n      this.renderer.addClass(child, elementClass);\n      if (bgColor) {\n        this.renderer.setStyle(child, 'background-color', bgColor);\n      }\n      if (color) {\n        this.renderer.setStyle(child, 'color', color);\n      }\n    });\n  }\n}\n"]}