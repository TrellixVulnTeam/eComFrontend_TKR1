{"version":3,"file":"mdb-table-sort.directive.d.ts","sources":["../../../../../../projects/ng-uikit-pro-standard/src/lib/free/tables/directives/mdb-table-sort.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,aAAa,EAEb,UAAU,EACV,YAAY,EAGZ,MAAM,EAEN,SAAS,EACV,MAAM,eAAe,CAAC;;AAEvB,aAAK,aAAa;AAClB,IAAE,GAAG,cAAc;AACnB,IAAE,IAAI,eAAe;AACrB,IAAE,KAAK,aAAa;AAAC,CACpB;AAED,MAAM,WAAW,UAAU;AAC3B,IAAE,IAAI,EAAE,GAAG,EAAE,CAAC;AACd,IAAE,SAAS,EAAE,MAAM,CAAC;AACpB,IAAE,MAAM,EAAE,MAAM,CAAC;AACjB,CAAC;AAED,qBAGa,qBAAsB,YAAW,MAAM,EAAE,aAAa;AACnE,IAWc,OAAO,CAAC,EAAE;AAAE,IAAY,OAAO,CAAC,QAAQ;AAAE,IAXtD,IAAI,EAAE,GAAG,EAAE,CAAM;AACnB,IAAE,UAAU,UAAQ;AACpB,IAAE,KAAK,EAAE,aAAa,CAAC,GAAG,GAAG,aAAa,CAAC,IAAI,GAAG,aAAa,CAAC,KAAK,CAAuB;AAC5F,IACyB,UAAU,EAAE,KAAK,CAAC,GAAG,CAAC,CAAM;AACrD,IAAW,MAAM,EAAE,MAAM,CAAC;AAC1B,IAAW,QAAQ,UAAS;AAC5B,IAAW,kBAAkB,UAAS;AACtC,IAAY,OAAO,EAAE,YAAY,CAAC,GAAG,EAAE,CAAC,CAA6B;AACrE,IAAY,MAAM,EAAE,YAAY,CAAC,UAAU,CAAC,CAAkC;AAC9E,gBACsB,EAAE,EAAE,UAAU,EAAU,QAAQ,EAAE,SAAS;AAAG,IAE3C,OAAO;AAC3B,IAWH,cAAc,CAAC,WAAW,EAAE,GAAG,GAAG,MAAM;AAAE,IAInC,aAAa,CAAC,GAAG,EAAE,GAAG,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM;AAC/D,IAgBF,UAAU,CAAC,GAAG,EAAE,MAAM,GAAG,GAAG;AACzB,IA2FH,QAAQ;AACL,IAiBH,eAAe;AACZ,IAKH,UAAU;AACP,IAUH,UAAU;;;AACP,CASJ;AACD;AAAW","sourcesContent":["import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\n\nenum SortDirection {\n  ASC = 'ascending',\n  DESC = 'descending',\n  CONST = 'constant',\n}\n\nexport interface SortedData {\n  data: any[];\n  sortOrder: string;\n  sortBy: string;\n}\n\n@Directive({\n  selector: '[mdbTableSort]',\n})\nexport class MdbTableSortDirective implements OnInit, AfterViewInit {\n  data: any[] = [];\n  sortedInto = true;\n  order: SortDirection.ASC | SortDirection.DESC | SortDirection.CONST = SortDirection.CONST;\n\n  @Input('mdbTableSort') dataSource: Array<any> = [];\n  @Input() sortBy: string;\n  @Input() sortIcon = false;\n  @Input() resetSortDirection = false;\n  @Output() sortEnd: EventEmitter<any[]> = new EventEmitter<any[]>();\n  @Output() sorted: EventEmitter<SortedData> = new EventEmitter<SortedData>();\n\n  constructor(private el: ElementRef, private renderer: Renderer2) {}\n\n  @HostListener('click') onclick() {\n    this.sortDataBy(this.trimWhiteSigns(this.sortBy.toString()));\n    this.sortEnd.emit(this.dataSource);\n    this.sorted.emit({\n      data: this.dataSource,\n      sortOrder: this.order,\n      sortBy: this.sortBy,\n    });\n\n    this.removeSort();\n  }\n\n  trimWhiteSigns(headElement: any): string {\n    return headElement.replace(/ /g, '');\n  }\n\n  public moveArrayItem(arr: any, oldIndex: number, newIndex: number) {\n    while (oldIndex < 0) {\n      oldIndex += arr.length;\n    }\n    while (newIndex < 0) {\n      newIndex += arr.length;\n    }\n    if (newIndex >= arr.length) {\n      let k = newIndex - arr.length;\n      while (k-- + 1) {\n        arr.push(null);\n      }\n    }\n    arr.splice(newIndex, 0, arr.splice(oldIndex, 1)[0]);\n    return arr;\n  }\n\n  sortDataBy(key: string | any) {\n    let ariaPass = true;\n\n    const setAria = (\n      sort: SortDirection.ASC | SortDirection.CONST | SortDirection.DESC,\n      id: any\n    ) => {\n      if (ariaPass) {\n        let nextSortType = '';\n\n        if (this.resetSortDirection) {\n          if (sort === SortDirection.CONST) {\n            nextSortType = SortDirection.DESC;\n          } else if (sort === SortDirection.DESC) {\n            nextSortType = SortDirection.ASC;\n          } else if (sort === SortDirection.ASC) {\n            nextSortType = SortDirection.CONST;\n          }\n        } else {\n          if (sort === SortDirection.DESC) {\n            nextSortType = SortDirection.ASC;\n          } else if (sort === SortDirection.ASC) {\n            nextSortType = SortDirection.DESC;\n          }\n        }\n\n        this.renderer.setAttribute(this.el.nativeElement, 'aria-sort', sort);\n        this.renderer.setAttribute(\n          this.el.nativeElement,\n          'aria-label',\n          `${id}: activate to sort column ${nextSortType}`\n        );\n        ariaPass = false;\n      }\n    };\n\n    key = key.split('.');\n\n    if (this.resetSortDirection) {\n      const sortFn = (a: any, b: any) => {\n        a = a[key];\n        b = b[key];\n\n        return a > b ? -1 : 1;\n      };\n      if (this.order === SortDirection.CONST) {\n        setAria(SortDirection.DESC, key);\n        this.order = SortDirection.DESC;\n        this.dataSource.sort(sortFn);\n      } else if (this.order === SortDirection.DESC) {\n        setAria(SortDirection.ASC, key);\n        this.order = SortDirection.ASC;\n        this.dataSource.sort(sortFn).reverse();\n      } else if (this.order === SortDirection.ASC) {\n        setAria(SortDirection.CONST, key);\n        this.order = SortDirection.CONST;\n        this.data.map((el: any, index: number) => {\n          this.dataSource[index] = el;\n        });\n      }\n    } else {\n      this.dataSource.sort((a: any, b: any) => {\n        let i = 0;\n        while (i < key.length) {\n          a = a[key[i]];\n          b = b[key[i]];\n          i++;\n        }\n\n        if (a < b) {\n          setAria(SortDirection.ASC, key);\n          this.order = SortDirection.ASC;\n\n          return this.sortedInto ? 1 : -1;\n        } else if (a > b) {\n          setAria(SortDirection.DESC, key);\n          this.order = SortDirection.DESC;\n\n          return this.sortedInto ? -1 : 1;\n        } else if (a == null || b == null) {\n          this.order = SortDirection.CONST;\n          return 1;\n        } else {\n          this.order = SortDirection.CONST;\n          return 0;\n        }\n      });\n\n      this.sortedInto = !this.sortedInto;\n    }\n  }\n\n  ngOnInit() {\n    const key = this.trimWhiteSigns(this.sortBy.toString()).split('.');\n\n    this.renderer.setAttribute(\n      this.el.nativeElement,\n      'aria-label',\n      `${key}: activate to sort column descending`\n    );\n\n    if (this.data.length === 0) {\n      // this.dataSource.map((element: any) => {\n      //   this.data.push(element);\n      // })\n\n      this.data = Array.from(this.dataSource);\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this.sortIcon) {\n      this.createIcon();\n    }\n  }\n\n  createIcon() {\n    // tslint:disable-next-line:max-line-length\n    const iconUp = `<svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"arrow-up\" class=\"svg-inline--fa fa-arrow-up fa-w-14 ascending\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path fill=\"currentColor\" d=\"M34.9 289.5l-22.2-22.2c-9.4-9.4-9.4-24.6 0-33.9L207 39c9.4-9.4 24.6-9.4 33.9 0l194.3 194.3c9.4 9.4 9.4 24.6 0 33.9L413 289.4c-9.5 9.5-25 9.3-34.3-.4L264 168.6V456c0 13.3-10.7 24-24 24h-32c-13.3 0-24-10.7-24-24V168.6L69.2 289.1c-9.3 9.8-24.8 10-34.3.4z\"></path></svg>`;\n\n    // tslint:disable-next-line:max-line-length\n    const iconDown = `<svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"arrow-down\" class=\"svg-inline--fa fa-arrow-down fa-w-14 descending\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path fill=\"currentColor\" d=\"M413.1 222.5l22.2 22.2c9.4 9.4 9.4 24.6 0 33.9L241 473c-9.4 9.4-24.6 9.4-33.9 0L12.7 278.6c-9.4-9.4-9.4-24.6 0-33.9l22.2-22.2c9.5-9.5 25-9.3 34.3.4L184 343.4V56c0-13.3 10.7-24 24-24h32c13.3 0 24 10.7 24 24v287.4l114.8-120.5c9.3-9.8 24.8-10 34.3-.4z\"></path></svg>`;\n\n    const title = this.el.nativeElement.innerHTML;\n    this.el.nativeElement.innerHTML = `${title} ${iconUp} ${iconDown}`;\n  }\n\n  removeSort() {\n    const nodes = this.el.nativeElement.parentElement.childNodes;\n    if (nodes) {\n      Array.from(nodes).map((node: HTMLElement) => {\n        if (node !== this.el.nativeElement && node.nodeName !== '#comment') {\n          this.renderer.removeAttribute(node, 'aria-sort');\n        }\n      });\n    }\n  }\n}\n"]}