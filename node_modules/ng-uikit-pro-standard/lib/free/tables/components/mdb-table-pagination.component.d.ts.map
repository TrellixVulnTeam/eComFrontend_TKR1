{"version":3,"file":"mdb-table-pagination.component.d.ts","sources":["../../../../../../projects/ng-uikit-pro-standard/src/lib/free/tables/components/mdb-table-pagination.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAEL,MAAM,EAEN,YAAY,EAEZ,iBAAiB,EACjB,SAAS,EACT,aAAa,EACb,aAAa,EACb,SAAS,EACV,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,MAAM,CAAC;AAC3C,OAAO,EAAE,iBAAiB,EAAE,MAAM,mCAAmC,CAAC;;AAGtE,MAAM,WAAW,kBAAkB;AACnC,IAAE,KAAK,EAAE,MAAM,CAAC;AAChB,IAAE,IAAI,EAAE,MAAM,CAAC;AACf,CAAC;AAED,qBAIa,2BAA4B,YAAW,MAAM,EAAE,SAAS,EAAE,aAAa,EAAE,SAAS;AAC/F,IA+Bc,OAAO,CAAC,KAAK;AAAE,IA/BlB,OAAO,EAAE,iBAAiB,CAAC;AACtC,IAAW,gBAAgB,UAAS;AACpC,IAAW,gBAAgB,EAAE,GAAG,CAAQ;AACxC,IAAW,SAAS,SAAQ;AAC5B,IAAW,WAAW,SAAO;AAC7B,IAAW,eAAe,SAAM;AAChC,IAAW,eAAe,UAAS;AACnC,IACE,OAAO,CAAC,SAAS,CAAgC;AACnD,IACE,eAAe,SAAM;AACvB,IACE,cAAc,SAAK;AACrB,IAAE,aAAa,EAAE,MAAM,CAAwB;AAC/C,IAAE,oBAAoB,SAAK;AAC3B,IACE,gBAAgB,SAAK;AACvB,IACE,cAAc,SAAK;AACrB,IACE,oBAAoB,UAAS;AAC/B,IAAE,wBAAwB,UAAQ;AAClC,IACE,UAAU,SAAM;AAClB,IACE,UAAU,EAAE,OAAO,CAAC,kBAAkB,CAAC,CAAqC;AAC9E,IACY,aAAa,mCAA0C;AACnE,IAAY,iBAAiB,mCAA0C;AACvE,IAAY,cAAc,mCAA0C;AACpE,IAAY,aAAa,mCAA0C;AACnE,gBAAsB,KAAK,EAAE,iBAAiB;AAAG,IAE/C,QAAQ;AACL,IAKH,eAAe;AACZ,IA8BH,WAAW,CAAC,OAAO,EAAE,aAAa;AAC/B,IA2BH,0BAA0B,CAAC,KAAK,EAAE,MAAM;AACrC,IAMH,aAAa,IAAI,UAAU,CAAC,GAAG,CAAC;AAAE,IAOlC,iBAAiB,CAAC,IAAI,EAAE,GAAG;AACxB,IAOH,uBAAuB;AACpB,IAIH,sBAAsB;AACnB,IAiBH,gBAAgB,IAAI,UAAU,CAAC,GAAG,CAAC;AAAE,IAIrC,6BAA6B;AACxB,IAGL,YAAY;AACT,IAMH,QAAQ;AACL,IAeH,SAAS;AACN,IAOH,QAAQ;AACL,IAQH,kBAAkB,IAAI,UAAU,CAAC,GAAG,CAAC;AAAE,IAOvC,sBAAsB,IAAI,UAAU,CAAC,GAAG,CAAC;AAAE,IAO3C,2BAA2B;AACrB,IAaN,+BAA+B;AACzB,IAKN,WAAW;;;AACR,CAGJ;AACD","sourcesContent":["import {\n  Component,\n  OnInit,\n  Output,\n  EventEmitter,\n  Input,\n  ChangeDetectorRef,\n  OnChanges,\n  SimpleChanges,\n  AfterViewInit,\n  OnDestroy,\n} from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { MdbTableDirective } from '../directives/mdb-table.directive';\nimport { takeUntil } from 'rxjs/operators';\n\nexport interface MdbPaginationIndex {\n  first: number;\n  last: number;\n}\n\n@Component({\n  selector: 'mdb-table-pagination',\n  templateUrl: './mdb-table-pagination.component.html',\n})\nexport class MdbTablePaginationComponent implements OnInit, OnChanges, AfterViewInit, OnDestroy {\n  @Input() tableEl: MdbTableDirective;\n  @Input() searchPagination = false;\n  @Input() searchDataSource: any = null;\n  @Input() ofKeyword = 'of';\n  @Input() dashKeyword = '-';\n  @Input() paginationAlign = '';\n  @Input() hideDescription = false;\n\n  private _destroy$: Subject<void> = new Subject();\n\n  maxVisibleItems = 10;\n\n  firstItemIndex = 0;\n  lastItemIndex: number = this.maxVisibleItems;\n  lastVisibleItemIndex = 5;\n\n  activePageNumber = 1;\n\n  allItemsLength = 0;\n\n  nextShouldBeDisabled = false;\n  previousShouldBeDisabled = true;\n\n  searchText = '';\n\n  pagination: Subject<MdbPaginationIndex> = new Subject<MdbPaginationIndex>();\n\n  @Output() nextPageClick = new EventEmitter<MdbPaginationIndex>();\n  @Output() previousPageClick = new EventEmitter<MdbPaginationIndex>();\n  @Output() firstPageClick = new EventEmitter<MdbPaginationIndex>();\n  @Output() lastPageClick = new EventEmitter<MdbPaginationIndex>();\n  constructor(private cdRef: ChangeDetectorRef) {}\n\n  ngOnInit() {\n    if (this.tableEl) {\n      this.allItemsLength = this.tableEl.getDataSource().length;\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this.tableEl) {\n      this.tableEl\n        .dataSourceChange()\n        .pipe(takeUntil(this._destroy$))\n        .subscribe((data: any) => {\n          this.allItemsLength = data.length;\n          this.lastVisibleItemIndex = data.length;\n          this.calculateFirstItemIndex();\n          this.calculateLastItemIndex();\n          this.disableNextButton(data);\n\n          if (this.searchDataSource) {\n            setTimeout(() => {\n              if (this.searchDataSource.length !== data.length) {\n                this.activePageNumber = 1;\n                this.firstItemIndex = 1;\n              }\n            }, 0);\n          }\n        });\n    }\n\n    this.paginationChange()\n      .pipe(takeUntil(this._destroy$))\n      .subscribe((data: any) => {\n        this.firstItemIndex = data.first;\n        this.lastVisibleItemIndex = data.last;\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const searchDataSource = changes['searchDataSource'];\n    if (searchDataSource.currentValue.length !== 0) {\n      this.allItemsLength = searchDataSource.currentValue.length;\n    }\n\n    if (this.lastVisibleItemIndex > this.allItemsLength) {\n      this.lastVisibleItemIndex = this.allItemsLength;\n    }\n\n    if (searchDataSource.currentValue.length === 0) {\n      this.firstItemIndex = 0;\n      this.lastItemIndex = 0;\n      this.lastVisibleItemIndex = 0;\n      this.allItemsLength = 0;\n    }\n\n    if (\n      !searchDataSource.isFirstChange() &&\n      searchDataSource.currentValue.length <= this.maxVisibleItems\n    ) {\n      this.nextShouldBeDisabled = true;\n      this.lastVisibleItemIndex = searchDataSource.currentValue.length;\n    } else {\n      this.nextShouldBeDisabled = false;\n    }\n  }\n\n  setMaxVisibleItemsNumberTo(value: number) {\n    this.lastItemIndex = value;\n    this.lastVisibleItemIndex = value;\n    this.maxVisibleItems = value;\n    this.cdRef.detectChanges();\n  }\n\n  searchTextObs(): Observable<any> {\n    const observable = new Observable((observer: any) => {\n      observer.next(this.searchText);\n    });\n    return observable;\n  }\n\n  disableNextButton(data: any) {\n    if (data.length <= this.maxVisibleItems) {\n      this.nextShouldBeDisabled = true;\n    } else {\n      this.nextShouldBeDisabled = false;\n    }\n  }\n\n  calculateFirstItemIndex() {\n    this.firstItemIndex = this.activePageNumber * this.maxVisibleItems - this.maxVisibleItems + 1;\n    this.pagination.next({ first: this.firstItemIndex, last: this.lastItemIndex });\n  }\n\n  calculateLastItemIndex() {\n    this.lastItemIndex = this.activePageNumber * this.maxVisibleItems;\n    this.lastVisibleItemIndex = this.lastItemIndex;\n\n    if (this.searchDataSource && this.lastItemIndex > this.searchDataSource.length) {\n      this.lastVisibleItemIndex = this.searchDataSource.length;\n    } else if (!this.searchDataSource) {\n      this.lastVisibleItemIndex = this.lastItemIndex;\n    }\n\n    if (this.lastItemIndex > this.tableEl.getDataSource().length) {\n      this.lastItemIndex = this.tableEl.getDataSource().length;\n      this.lastVisibleItemIndex = this.tableEl.getDataSource().length;\n    }\n\n    this.pagination.next({ first: this.firstItemIndex, last: this.lastItemIndex });\n  }\n\n  paginationChange(): Observable<any> {\n    return this.pagination;\n  }\n\n  calculateHowManyPagesShouldBe() {\n    return Math.ceil(this.tableEl.getDataSource().length / this.maxVisibleItems);\n  }\n\n  previousPage() {\n    this.activePageNumber--;\n    this.calculateFirstItemIndex();\n    this.calculateLastItemIndex();\n    this.previousPageClick.emit({ first: this.firstItemIndex, last: this.lastItemIndex });\n  }\n\n  nextPage() {\n    this.activePageNumber++;\n    this.calculateFirstItemIndex();\n    this.calculateLastItemIndex();\n\n    if (this.lastItemIndex > this.tableEl.getDataSource().length) {\n      this.lastItemIndex = this.tableEl.getDataSource().length;\n    }\n\n    if (this.lastVisibleItemIndex > this.allItemsLength) {\n      this.lastVisibleItemIndex = this.allItemsLength;\n    }\n\n    this.nextPageClick.emit({ first: this.firstItemIndex, last: this.lastItemIndex });\n  }\n\n  firstPage() {\n    this.activePageNumber = 1;\n    this.calculateFirstItemIndex();\n    this.calculateLastItemIndex();\n\n    this.firstPageClick.emit({ first: this.firstItemIndex, last: this.lastItemIndex });\n  }\n\n  lastPage() {\n    const lastPage = Math.ceil(this.allItemsLength / this.maxVisibleItems);\n    this.activePageNumber = lastPage;\n    this.calculateFirstItemIndex();\n    this.calculateLastItemIndex();\n\n    this.lastPageClick.emit({ first: this.firstItemIndex, last: this.lastItemIndex });\n  }\n\n  nextPageObservable(): Observable<any> {\n    const obs = new Observable((observer: any) => {\n      observer.next(this.firstItemIndex);\n    });\n    return obs;\n  }\n\n  previousPageObservable(): Observable<any> {\n    const obs = new Observable((observer: any) => {\n      observer.next(this.lastVisibleItemIndex);\n    });\n    return obs;\n  }\n\n  checkIfNextShouldBeDisabled() {\n    if (this.searchDataSource && this.lastVisibleItemIndex === this.searchDataSource.length) {\n      return true;\n    }\n\n    if (this.activePageNumber >= this.calculateHowManyPagesShouldBe()) {\n      return true;\n    }\n\n    if (this.nextShouldBeDisabled) {\n      return this.nextShouldBeDisabled;\n    }\n  }\n\n  checkIfPreviousShouldBeDisabled() {\n    if (this.activePageNumber === 1) {\n      return true;\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n}\n"]}