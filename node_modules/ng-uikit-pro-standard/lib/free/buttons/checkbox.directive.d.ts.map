{"version":3,"file":"checkbox.directive.d.ts","sources":["../../../../../projects/ng-uikit-pro-standard/src/lib/free/buttons/checkbox.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EAA+C,MAAM,EAAc,MAAM,eAAe,CAAC;AAChG,OAAO,EAAE,oBAAoB,EAAqB,MAAM,gBAAgB,CAAC;;AAEzE,eAAO,MAAM,+BAA+B,EAAE,GAK7C,CAAC;AAEF;AACA;AACA,GAAG;AACH,qBACa,uBAAwB,YAAW,oBAAoB,EAAE,MAAM;AAC5E,IAAE,2CAA2C;AAC7C,IAAkB,eAAe,EAAE,GAAG,CAAQ;AAC9C,IAAE,0CAA0C;AAC5C,IAAkB,gBAAgB,EAAE,GAAG,CAAS;AAChD,IACsC,KAAK,UAAS;AACpD,IACE,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC;AACvB,IAAE,SAAS,CAAC,UAAU,EAAE,OAAO,CAAC;AAChC,IACE,SAAS,CAAC,QAAQ,EAAE,GAAG,CAAsB;AAC/C,IAAE,SAAS,CAAC,SAAS,EAAE,GAAG,CAAsB;AAChD,IAGS,OAAO,IAAI,IAAI;AAAE,IASjB,QAAQ,IAAI,GAAG;AAAE,IAIxB,SAAS,KAAK,SAAS,IAAI,OAAO,CAEjC;AACH,IACE,SAAS,KAAK,UAAU,IAAI,OAAO,CAElC;AACH,IACS,MAAM,CAAC,KAAK,EAAE,OAAO,GAAG,IAAI;AAAE,IAO9B,UAAU,CAAC,KAAK,EAAE,GAAG,GAAG,IAAI;AAAE,IAK9B,gBAAgB,CAAC,UAAU,EAAE,OAAO,GAAG,IAAI;AAAE,IAI7C,gBAAgB,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,KAAK,EAAE,GAAG,IAAI;AAAE,IAI5C,iBAAiB,CAAC,EAAE,EAAE,MAAM,EAAE,GAAG,IAAI;;;AAAE,CAG/C;AACD","sourcesContent":["import { Directive, HostBinding, HostListener, Input, OnInit, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => ButtonCheckboxDirective),\n  multi: true,\n};\n\n/**\n * Add checkbox functionality to any element\n */\n@Directive({ selector: '[mdbCheckbox]', providers: [CHECKBOX_CONTROL_VALUE_ACCESSOR] })\nexport class ButtonCheckboxDirective implements ControlValueAccessor, OnInit {\n  /** Truthy value, will be set to ngModel */\n  @Input() public btnCheckboxTrue: any = true;\n  /** Falsy value, will be set to ngModel */\n  @Input() public btnCheckboxFalse: any = false;\n\n  @HostBinding('class.active') public state = false;\n\n  protected value: any;\n  protected isDisabled: boolean;\n\n  protected onChange: any = Function.prototype;\n  protected onTouched: any = Function.prototype;\n\n  // view -> model\n  @HostListener('click')\n  public onClick(): void {\n    if (this.isDisabled) {\n      return;\n    }\n\n    this.toggle(!this.state);\n    this.onChange(this.value);\n  }\n\n  public ngOnInit(): any {\n    this.toggle(this.trueValue === this.value);\n  }\n\n  protected get trueValue(): boolean {\n    return typeof this.btnCheckboxTrue !== 'undefined' ? this.btnCheckboxTrue : true;\n  }\n\n  protected get falseValue(): boolean {\n    return typeof this.btnCheckboxFalse !== 'undefined' ? this.btnCheckboxFalse : false;\n  }\n\n  public toggle(state: boolean): void {\n    this.state = state;\n    this.value = this.state ? this.trueValue : this.falseValue;\n  }\n\n  // ControlValueAccessor\n  // model -> view\n  public writeValue(value: any): void {\n    this.state = this.trueValue === value;\n    this.value = value ? this.trueValue : this.falseValue;\n  }\n\n  public setDisabledState(isDisabled: boolean): void {\n    this.isDisabled = isDisabled;\n  }\n\n  public registerOnChange(fn: (_: any) => {}): void {\n    this.onChange = fn;\n  }\n\n  public registerOnTouched(fn: () => {}): void {\n    this.onTouched = fn;\n  }\n}\n"]}