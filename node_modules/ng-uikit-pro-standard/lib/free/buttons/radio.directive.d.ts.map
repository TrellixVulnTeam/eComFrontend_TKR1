{"version":3,"file":"radio.directive.d.ts","sources":["../../../../../projects/ng-uikit-pro-standard/src/lib/free/buttons/radio.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EAEL,UAAU,EAKV,MAAM,EACN,SAAS,EACV,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,oBAAoB,EAAqB,MAAM,gBAAgB,CAAC;;AAEzE,eAAO,MAAM,4BAA4B,EAAE,GAK1C,CAAC;AAEF;AACA;AACA;AACA,GAAG;AACH,qBACa,oBAAqB,YAAW,oBAAoB,EAAE,MAAM;AACzE,IAgDqB,SAAS,CAAC,EAAE,EAAE,UAAU;AAAE,IAAA,OAAO,CAAC,QAAQ;AAAE,IAhDxD,QAAQ,EAAE,GAAG,CAAsB;AAC5C,IAAS,SAAS,EAAE,GAAG,CAAsB;AAC7C,IACE,kBAAkB,EAAE,KAAK,CAAC,GAAG,CAAC,CAAM;AACtC,IAAE,mDAAmD;AACrD,IAAkB,QAAQ,EAAE,GAAG,CAAC;AAChC,IAAE,gDAAgD;AAClD,IAAkB,WAAW,EAAE,OAAO,CAAC;AACvC,IAAE,gDAAgD;AAClD,IAAkB,KAAK,EAAE,GAAG,CAAC;AAC7B,IAGE,QAAQ,UAAS;AACnB,IACE,IACW,QAAQ,IAAI,OAAO,CAE7B;AACH,IAES,OAAO,CAAC,KAAK,CAAC,EAAE,GAAG,GAAG,IAAI;AAAE,gBA2BN,EAAE,EAAE,UAAU,EAAU,QAAQ,EAAE,SAAS;AAAG,IAEpE,QAAQ,IAAI,IAAI;AAAE,IAIlB,MAAM,IAAI,IAAI;AAAE,IAMhB,UAAU,CAAC,KAAK,EAAE,GAAG,GAAG,IAAI;AAAE,IAI9B,gBAAgB,CAAC,EAAE,EAAE,GAAG,GAAG,IAAI;AAAE,IAIjC,iBAAiB,CAAC,EAAE,EAAE,GAAG,GAAG,IAAI;;;AAAE,CAG1C;AACD","sourcesContent":["import {\n  Directive,\n  ElementRef,\n  HostBinding,\n  forwardRef,\n  HostListener,\n  Input,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const RADIO_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => ButtonRadioDirective),\n  multi: true,\n};\n\n/**\n * Create radio buttons or groups of buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\n@Directive({ selector: '[mdbRadio]', providers: [RADIO_CONTROL_VALUE_ACCESSOR] })\nexport class ButtonRadioDirective implements ControlValueAccessor, OnInit {\n  public onChange: any = Function.prototype;\n  public onTouched: any = Function.prototype;\n\n  radioElementsArray: Array<any> = [];\n  /** Radio button value, will be set to `ngModel` */\n  @Input() public mdbRadio: any;\n  /** If `true` â€” radio button can be unchecked */\n  @Input() public uncheckable: boolean;\n  /** Current value of radio component or group */\n  @Input() public value: any;\n\n  @HostBinding('class.disabled')\n  @Input()\n  disabled = false;\n\n  @HostBinding('class.active')\n  public get isActive(): boolean {\n    return this.mdbRadio === this.value;\n  }\n\n  @HostListener('click', ['$event'])\n  public onClick(event?: any): void {\n    if (this.disabled) {\n      return;\n    }\n    try {\n      this.el.nativeElement.parentElement.childNodes.forEach((element: any) => {\n        this.radioElementsArray.push(element);\n      });\n      this.radioElementsArray.forEach(element => {\n        this.renderer.removeClass(element, 'active');\n      });\n      this.renderer.addClass(event.target, 'active');\n    } catch (error) {}\n    if (this.el.nativeElement.attributes.disabled) {\n      return;\n    }\n\n    if (this.uncheckable && this.mdbRadio === this.value) {\n      this.value = undefined;\n    } else {\n      this.value = this.mdbRadio;\n    }\n\n    this.onTouched();\n    this.onChange(this.value);\n  }\n\n  public constructor(protected el: ElementRef, private renderer: Renderer2) {}\n\n  public ngOnInit(): void {\n    this.uncheckable = typeof this.uncheckable !== 'undefined';\n  }\n\n  public onBlur(): void {\n    this.onTouched();\n  }\n\n  // ControlValueAccessor\n  // model -> view\n  public writeValue(value: any): void {\n    this.value = value;\n  }\n\n  public registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  public registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n}\n"]}