{"version":3,"file":"positioning.service.d.ts","sources":["../../../../../../projects/ng-uikit-pro-standard/src/lib/free/utils/positioning/positioning.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAEL,UAAU,EACV,gBAAgB,EAGhB,MAAM,EACP,MAAM,eAAe,CAAC;AAMvB,OAAO,EAAE,OAAO,EAAE,MAAM,gBAAgB,CAAC;;AAEzC,MAAM,WAAW,kBAAkB;AACnC,IAAE,0FAA0F;AAC5F,IAAE,OAAO,CAAC,EAAE,GAAG,CAAC;AAChB,IACE,6GAA6G;AAC/G,IAAE,MAAM,CAAC,EAAE,GAAG,CAAC;AACf,IACE;AACF;AACE;AACE;AACE;AACE;AAEJ,OADC;AACL,IAAE,UAAU,CAAC,EAAE,GAAG,CAAC;AACnB,IACE;AACF;AACE,OAAG;AACL,IAAE,gBAAgB,CAAC,EAAE,MAAM,CAAC;AAC5B,IACE;AACF;AACE,OAAG;AACL,IAAE,MAAM,CAAC,EAAE,MAAM,CAAC;AAClB,IACE,8EAA8E;AAChF,IAAE,YAAY,CAAC,EAAE,MAAM,CAAC;AACxB,IACE,iDAAiD;AACnD,IAAE,YAAY,CAAC,EAAE,OAAO,CAAC;AACzB,CAAC;AAED,qBACa,kBAAkB;AAC/B,IAOI,OAAO,CAAC,OAAO;AAAE,IAPnB,OAAO,EAAE,OAAO,CAAC;AACnB,IAAE,OAAO,CAAC,QAAQ,CAAuB;AACzC,IAAE,OAAO,CAAC,gBAAgB,CAAa;AACvC,gBAEI,eAAe,EAAE,gBAAgB,EACZ,UAAU,EAAE,MAAM,EAC/B,OAAO,EAAE,MAAM;AACzB,IAyBA,QAAQ,CAAC,OAAO,EAAE,kBAAkB,GAAG,IAAI;AAAE,IAI7C,kBAAkB,CAAC,OAAO,EAAE,kBAAkB,GAAG,IAAI;AAAE,IAIvD,YAAY,IAAI,IAAI;AAAE,IAItB,qBAAqB,CAAC,KAAK,EAAE,UAAU,GAAG,IAAI;AAAE,IAIhD,UAAU,CAAC,OAAO,EAAE,OAAO;;;AACxB,CAEJ;AACD","sourcesContent":["import {\n  Injectable,\n  ElementRef,\n  RendererFactory2,\n  Inject,\n  PLATFORM_ID,\n  NgZone,\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { positionElements } from './ng-positioning';\n\nimport { fromEvent, merge, of, animationFrameScheduler, Subject } from 'rxjs';\nimport { Options } from './models/index';\n\nexport interface PositioningOptions {\n  /** The DOM element, ElementRef, or a selector string of an element which will be moved */\n  element?: any;\n\n  /** The DOM element, ElementRef, or a selector string of an element which the element will be attached to  */\n  target?: any;\n\n  /**\n   * A string of the form 'vert-attachment horiz-attachment' or 'placement'\n   * - placement can be \"top\", \"bottom\", \"left\", \"right\"\n   * not yet supported:\n   * - vert-attachment can be any of 'top', 'middle', 'bottom'\n   * - horiz-attachment can be any of 'left', 'center', 'right'\n   */\n  attachment?: any;\n\n  /** A string similar to `attachment`. The one difference is that, if it's not provided,\n   * `targetAttachment` will assume the mirror image of `attachment`.\n   */\n  targetAttachment?: string;\n\n  /** A string of the form 'vert-offset horiz-offset'\n   * - vert-offset and horiz-offset can be of the form \"20px\" or \"55%\"\n   */\n  offset?: string;\n\n  /** A string similar to `offset`, but referring to the offset of the target */\n  targetOffset?: string;\n\n  /** If true component will be attached to body */\n  appendToBody?: boolean;\n}\n\n@Injectable()\nexport class PositioningService {\n  options: Options;\n  private update$$ = new Subject<null>();\n  private positionElements = new Map();\n\n  constructor(\n    rendererFactory: RendererFactory2,\n    @Inject(PLATFORM_ID) platformId: number,\n    private _ngZone: NgZone\n  ) {\n    if (isPlatformBrowser(platformId)) {\n      this._ngZone.runOutsideAngular(() => {\n        merge(\n          fromEvent(window, 'scroll'),\n          fromEvent(window, 'resize'),\n          // tslint:disable-next-line: deprecation\n          of(0, animationFrameScheduler),\n          this.update$$\n        ).subscribe(() => {\n          this.positionElements.forEach((positionElement: PositioningOptions) => {\n            positionElements(\n              _getHtmlElement(positionElement.target),\n              _getHtmlElement(positionElement.element),\n              positionElement.attachment,\n              positionElement.appendToBody,\n              this.options,\n              rendererFactory.createRenderer(null, null)\n            );\n          });\n        });\n      });\n    }\n  }\n\n  position(options: PositioningOptions): void {\n    this.addPositionElement(options);\n  }\n\n  addPositionElement(options: PositioningOptions): void {\n    this.positionElements.set(_getHtmlElement(options.element), options);\n  }\n\n  calcPosition(): void {\n    this.update$$.next();\n  }\n\n  deletePositionElement(elRef: ElementRef): void {\n    this.positionElements.delete(_getHtmlElement(elRef));\n  }\n\n  setOptions(options: Options) {\n    this.options = options;\n  }\n}\n\nfunction _getHtmlElement(element: HTMLElement | ElementRef | string): any {\n  // it means that we got a selector\n  if (element && typeof element === 'string') {\n    return document.querySelector(element);\n  }\n\n  if (element instanceof ElementRef) {\n    return element.nativeElement;\n  }\n\n  return element;\n}\n"]}