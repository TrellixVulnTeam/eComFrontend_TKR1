{"version":3,"file":"equal-validator.directive.d.ts","sources":["../../../../../projects/ng-uikit-pro-standard/src/lib/free/inputs/equal-validator.directive.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAE,eAAe,EAAiB,MAAM,gBAAgB,CAAC;;AAE3E,qBAOa,uBAAwB,YAAW,SAAS;AACzD,IACuC,aAAa,EAAE,MAAM;AAC5D,IAAiC,OAAO,EAAE,MAAM;AAC/C,gBAFsC,aAAa,EAAE,MAAM,EAC3B,OAAO,EAAE,MAAM;AAC9C,IAEA,OAAO,KAAK,SAAS,GAKpB;AACH,IACE,QAAQ,CAAC,CAAC,EAAE,eAAe,GAAG;AAAE,QAAA,CAAC,GAAG,EAAE,MAAM,GAAG,GAAG,CAAA;AAAC,KAAC,GAAG,IAAI;;;AAAE,CA8B9D;AACD","sourcesContent":["import { Directive, forwardRef, Attribute } from '@angular/core';\nimport { Validator, AbstractControl, NG_VALIDATORS } from '@angular/forms';\n\n@Directive({\n  selector:\n    '[mdb-validateEqual][formControlName],[validateEqual][formControl],[validateEqual][ngModel]',\n  providers: [\n    { provide: NG_VALIDATORS, useExisting: forwardRef(() => EqualValidatorDirective), multi: true },\n  ],\n})\nexport class EqualValidatorDirective implements Validator {\n  constructor(\n    @Attribute('validateEqual') public validateEqual: string,\n    @Attribute('reverse') public reverse: string\n  ) {}\n\n  private get isReverse() {\n    if (!this.reverse) {\n      return false;\n    }\n    return this.reverse === 'true' ? true : false;\n  }\n\n  validate(c: AbstractControl): { [key: string]: any } | null {\n    // self value (e.g. retype password)\n    const v = c.value;\n\n    // control value (e.g. password)\n    const e: any = c.root.get(this.validateEqual);\n\n    // value not equal\n    if (e && v !== e.value) {\n      return { validateEqual: false };\n    }\n\n    // value equal and reverse\n    if (e && v === e.value && this.isReverse) {\n      delete e.errors['validateEqual'];\n      if (!Object.keys(e.errors).length) {\n        e.setErrors(null);\n      }\n    }\n\n    // value not equal and reverse\n    if (e && v !== e.value && this.isReverse) {\n      e.setErrors({\n        validateEqual: false,\n      });\n    }\n\n    // return null;\n    return null;\n  }\n}\n"]}