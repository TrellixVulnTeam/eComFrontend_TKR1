{"version":3,"file":"popover.directive.d.ts","sources":["../../../../../projects/ng-uikit-pro-standard/src/lib/free/popover/popover.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EAIL,YAAY,EACZ,MAAM,EACN,SAAS,EACT,SAAS,EACT,UAAU,EACV,WAAW,EACX,gBAAgB,EAEjB,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AACjD,OAAO,EAAE,sBAAsB,EAAE,MAAM,oDAAoD,CAAC;AAG5F,OAAO,EAAE,kBAAkB,EAAE,MAAM,0CAA0C,CAAC;AAE9E;AACA;AACA,GAAG;;AACH,qBACa,gBAAiB,YAAW,MAAM,EAAE,SAAS;AAC1D,IAkEI,OAAO,CAAC,gBAAgB;AAAE,IAlEZ,cAAc,EAAE,MAAM,CAAC;AACzC,IAAkB,SAAS,EAAE,MAAM,CAAC;AACpC,IAAkB,WAAW,EAAE,MAAM,CAAC;AACtC,IAAE;AACF;AACE,OAAG;AACL,IAAkB,UAAU,EAAE,MAAM,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;AACxD,IAAE;AACF;AACE,OAAG;AACL,IAAkB,gBAAgB,EAAE,MAAM,CAAC;AAC3C,IAAkB,YAAY,EAAE,MAAM,CAAC;AACvC,IAAE;AACF;AACE,OAAG;AACL,IAAkB,SAAS,EAAE,KAAK,GAAG,QAAQ,GAAG,MAAM,GAAG,OAAO,CAAC;AACjE,IAAE;AACF;AACE;AACE,OAAC;AACL,IAAkB,QAAQ,EAAE,MAAM,CAAC;AACnC,IAAE;AACF;AACE;AACE,OAAC;AACL,IAAkB,SAAS,EAAE,MAAM,CAAC;AACpC,IACE;AACF;AACE,OAAG;AACL,IAAE,IACW,MAAM,IAAI,OAAO,CAE3B;AACH,IACE,IAAW,MAAM,CAAC,KAAK,EAAE,OAAO,EAM/B;AACH,IACW,eAAe,UAAQ;AAClC,IAAW,YAAY,UAAS;AAChC,IAAE;AACF;AACE,OAAG;AACL,IACmB,OAAO,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC;AAC9C,IAAmB,KAAK,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC;AAC5C,IAAE;AACF;AACE,OAAG;AACL,IACmB,QAAQ,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC;AAC/C,IAAmB,MAAM,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC;AAC7C,IACE,OAAO,CAAC,QAAQ,CAA6C;AAC/D,gBAEI,WAAW,EAAE,UAAU,EACvB,SAAS,EAAE,SAAS,EACpB,iBAAiB,EAAE,gBAAgB,EACnC,OAAO,EAAE,aAAa,EACtB,GAAG,EAAE,sBAAsB,EACnB,gBAAgB,EAAE,kBAAkB;AAC9C,IAWA;AACF;AACE;AACE,OAAC;AACL,IAAS,IAAI,IAAI,IAAI,GAAG,GAAG;AAAE,IAoC3B;AACF;AACE;AACE,OAAC;AACL,IAAS,IAAI,IAAI,IAAI;AAAE,IAOrB;AACF;AACE;AACE,OAAC;AACL,IAAS,MAAM,IAAI,IAAI;AAAE,IAQY,OAAO,CAAC,KAAK,EAAE,GAAG;AAClD,IAM2B,MAAM;AACjC,IAM8C,YAAY,CAAC,KAAK,EAAE,GAAG;AACrE,IAKI,QAAQ,IAAI,GAAG;AAAE,IAQjB,OAAO;AACX,IAGI,WAAW,IAAI,GAAG;;;AAAE,CAG5B;AACD","sourcesContent":["import {\n  Directive,\n  Input,\n  Output,\n  EventEmitter,\n  OnInit,\n  OnDestroy,\n  Renderer2,\n  ElementRef,\n  TemplateRef,\n  ViewContainerRef,\n  HostListener,\n} from '@angular/core';\nimport { PopoverConfig } from './popover.config';\nimport { ComponentLoaderFactory } from '../utils/component-loader/component-loader.factory';\nimport { ComponentLoader } from '../utils/component-loader/component-loader.class';\nimport { PopoverContainerComponent } from './popover-container.component';\nimport { PositioningService } from '../utils/positioning/positioning.service';\n\n/**\n * A lightweight, extensible directive for fancy popover creation.\n */\n@Directive({ selector: '[mdbPopover]', exportAs: 'bs-mdbPopover' })\nexport class PopoverDirective implements OnInit, OnDestroy {\n  @Input() public containerClass: string;\n  @Input() public bodyClass: string;\n  @Input() public headerClass: string;\n  /**\n   * Content to be displayed as popover.\n   */\n  @Input() public mdbPopover: string | TemplateRef<any>;\n  /**\n   * Title of a popover.\n   */\n  @Input() public mdbPopoverHeader: string;\n  @Input() public popoverTitle: string;\n  /**\n   * Placement of a popover. Accepts: \"top\", \"bottom\", \"left\", \"right\"\n   */\n  @Input() public placement: 'top' | 'bottom' | 'left' | 'right';\n  /**\n   * Specifies events that should trigger. Supports a space separated list of\n   * event names.\n   */\n  @Input() public triggers: string;\n  /**\n   * A selector specifying the element the popover should be appended to.\n   * Currently only supports \"body\".\n   */\n  @Input() public container: string;\n\n  /**\n   * Returns whether or not the popover is currently being shown\n   */\n  @Input()\n  public get isOpen(): boolean {\n    return this._popover.isShown;\n  }\n\n  public set isOpen(value: boolean) {\n    if (value) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n\n  @Input() dynamicPosition = true;\n  @Input() outsideClick = false;\n  /**\n   * Emits an event when the popover is shown\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() public onShown: EventEmitter<any>;\n  @Output() public shown: EventEmitter<any>;\n  /**\n   * Emits an event when the popover is hidden\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() public onHidden: EventEmitter<any>;\n  @Output() public hidden: EventEmitter<any>;\n\n  private _popover: ComponentLoader<PopoverContainerComponent>;\n\n  public constructor(\n    _elementRef: ElementRef,\n    _renderer: Renderer2,\n    _viewContainerRef: ViewContainerRef,\n    _config: PopoverConfig,\n    cis: ComponentLoaderFactory,\n    private _positionService: PositioningService\n  ) {\n    this._popover = cis\n      .createLoader<PopoverContainerComponent>(_elementRef, _viewContainerRef, _renderer)\n      .provide({ provide: PopoverConfig, useValue: _config });\n    Object.assign(this, _config);\n    this.onShown = this._popover.onShown;\n    this.shown = this._popover.onShown;\n    this.onHidden = this._popover.onHidden;\n    this.hidden = this._popover.onHidden;\n  }\n\n  /**\n   * Opens an element’s popover. This is considered a “manual” triggering of\n   * the popover.\n   */\n  public show(): void | any {\n    if (this._popover.isShown) {\n      return;\n    }\n\n    this._positionService.setOptions({\n      modifiers: {\n        flip: {\n          enabled: this.dynamicPosition,\n        },\n        preventOverflow: {\n          enabled: this.dynamicPosition,\n        },\n      },\n    });\n\n    this._popover\n      .attach(PopoverContainerComponent)\n      .to(this.container)\n      .position({ attachment: this.placement })\n      .show({\n        content: this.mdbPopover,\n        placement: this.placement,\n        title: this.mdbPopoverHeader || this.popoverTitle,\n        containerClass: this.containerClass ? this.containerClass : '',\n        bodyClass: this.bodyClass ? this.bodyClass : '',\n        headerClass: this.headerClass ? this.headerClass : '',\n      });\n    this.isOpen = true;\n\n    if (!this.dynamicPosition) {\n      this._positionService.calcPosition();\n      this._positionService.deletePositionElement(this._popover._componentRef.location);\n    }\n  }\n\n  /**\n   * Closes an element’s popover. This is considered a “manual” triggering of\n   * the popover.\n   */\n  public hide(): void {\n    if (this.isOpen) {\n      this._popover.hide();\n      this.isOpen = false;\n    }\n  }\n\n  /**\n   * Toggles an element’s popover. This is considered a “manual” triggering of\n   * the popover.\n   */\n  public toggle(): void {\n    if (this.isOpen) {\n      return this.hide();\n    }\n\n    this.show();\n  }\n\n  @HostListener('click', ['$event']) onclick(event: any) {\n    if (this.triggers.toString().includes('focus')) {\n      event.stopPropagation();\n      this.show();\n    }\n  }\n\n  @HostListener('window:click') onblur() {\n    if (this.triggers.toString().includes('focus') && this.isOpen) {\n      this.hide();\n    }\n  }\n\n  // fix(popover): popover with outsideClick='true' will now close after clicking in document on iPad Safari\n  @HostListener('document:touchstart', ['$event']) onTouchStart(event: any) {\n    if (this.outsideClick && !event.target.classList.contains('popover-body')) {\n      this.hide();\n    }\n  }\n\n  public ngOnInit(): any {\n    this._popover.listen({\n      triggers: this.triggers,\n      outsideClick: this.outsideClick,\n      show: () => this.show(),\n    });\n  }\n\n  public dispose() {\n    this._popover.dispose();\n  }\n\n  public ngOnDestroy(): any {\n    this._popover.dispose();\n  }\n}\n"]}